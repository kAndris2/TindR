[{"D:\\Gyakran hasznalt\\Projects\\Codecool\\PHP\\TindR\\tindr-react\\src\\components\\SideBar.js":"1","D:\\Gyakran hasznalt\\Projects\\Codecool\\PHP\\TindR\\tindr-react\\src\\components\\Recommendations.js":"2","D:\\Gyakran hasznalt\\Projects\\Codecool\\PHP\\TindR\\tindr-react\\src\\index.js":"3","D:\\Gyakran hasznalt\\Projects\\Codecool\\PHP\\TindR\\tindr-react\\src\\components\\WelcomePage.js":"4","D:\\Gyakran hasznalt\\Projects\\Codecool\\PHP\\TindR\\tindr-react\\src\\components\\Asd.js":"5","D:\\Gyakran hasznalt\\Projects\\Codecool\\PHP\\TindR\\tindr-react\\src\\App.js":"6","D:\\Gyakran hasznalt\\Projects\\Codecool\\PHP\\TindR\\tindr-react\\src\\components\\Card.js":"7","D:\\Gyakran hasznalt\\Projects\\Codecool\\PHP\\TindR\\tindr-react\\src\\components\\Deck.js":"8","D:\\Gyakran hasznalt\\Projects\\Codecool\\PHP\\TindR\\tindr-react\\src\\components\\Settings.js":"9","D:\\Gyakran hasznalt\\Projects\\Codecool\\PHP\\TindR\\tindr-react\\src\\reportWebVitals.js":"10","D:\\Gyakran hasznalt\\Projects\\Codecool\\PHP\\TindR\\tindr-react\\src\\data.js":"11"},{"size":9356,"mtime":1607946076953,"results":"12","hashOfConfig":"13"},{"size":9584,"mtime":1607941601080,"results":"14","hashOfConfig":"13"},{"size":618,"mtime":1607676433648,"results":"15","hashOfConfig":"13"},{"size":16309,"mtime":1607945489538,"results":"16","hashOfConfig":"13"},{"size":1475,"mtime":1607945078487,"results":"17","hashOfConfig":"13"},{"size":2822,"mtime":1608029782140,"results":"18","hashOfConfig":"13"},{"size":1070,"mtime":1608028391160,"results":"19","hashOfConfig":"13"},{"size":2402,"mtime":1608036754854,"results":"20","hashOfConfig":"13"},{"size":4352,"mtime":1607945078492,"results":"21","hashOfConfig":"13"},{"size":362,"mtime":1606466984298,"results":"22","hashOfConfig":"13"},{"size":1659,"mtime":1608037214659,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"27"},"fgch4n",{"filePath":"28","messages":"29","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"36"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"46","messages":"47","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"D:\\Gyakran hasznalt\\Projects\\Codecool\\PHP\\TindR\\tindr-react\\src\\components\\SideBar.js",["52","53"],"import { bubble as Menu } from 'react-burger-menu';\r\nimport React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport {SettingsPane, SettingsPage, SettingsContent, SettingsMenu} from 'react-settings-pane';\r\nexport default class SideBar extends Component {\r\n  constructor(props){\r\n    super(props);\r\n\r\n    this.state={\r\n      profilePath:'',\r\n      isLoading:true,\r\n      \"mysettings.general.name\": \"Dennis Stücken\",\r\n      \"mysettings.general.username\": \"dstuecken\",\r\n      \"mysettings.general.color-theme\": \"purple\",\r\n      \"mysettings.general.email\": \"dstuecken@react-settings-pane.com\",\r\n      \"mysettings.general.picture\": \"earth\",\r\n      \"mysettings.profile.firstname\": \"Dennis\",\r\n      \"mysettings.profile.lastname\": \"Stücken\"\r\n    }\r\n\r\n     // Save settings after close\r\n     this._leavePaneHandler = (wasSaved, newSettings, oldSettings) => {\r\n      // \"wasSaved\" indicates wheather the pane was just closed or the save button was clicked.\r\n\r\n      if (wasSaved && newSettings !== oldSettings) {\r\n        // do something with the settings, e.g. save via ajax.\r\n        this.setState(newSettings);\r\n      }\r\n\r\n      this.hidePrefs();\r\n    };\r\n\r\n    // React if a single setting changed\r\n    this._settingsChanged = ev => {};\r\n\r\n    // Define your menu\r\n    this._menu = [\r\n      {\r\n        title: \"General\", // Title that is displayed as text in the menu\r\n        url: \"/settings/general\" // Identifier (url-slug)\r\n      },\r\n      {\r\n        title: \"Profile\",\r\n        url: \"/settings/profile\"\r\n      },\r\n      {\r\n        title: \"Notifications\",\r\n        url: \"/settings/notifications\"\r\n      },\r\n      {\r\n        title: \"Language\",\r\n        url: \"/settings/language\"\r\n      },\r\n      {\r\n        title: \"Appearance\",\r\n        url: \"/settings/appearance\"\r\n      },\r\n      {\r\n        title: \"Plugins\",\r\n        url: \"/settings/plugins\"\r\n      },\r\n      {\r\n        title: \"About\",\r\n        url: \"/settings/about\"\r\n      }\r\n    ];\r\n\r\n  }\r\n\r\n  hidePrefs() {\r\n    this.prefs.className = \"md-modal\";\r\n    this.overlay.style.visibility = \"\";\r\n  }\r\n\r\n  showPrefs() {\r\n    this.prefs.className = \"md-modal show\";\r\n    this.overlay.style.visibility = \"visible\";\r\n  }\r\n\r\n  async getProfilePictures(user) {\r\n    await axios.get(`http://${process.env.REACT_APP_IP}:8000/api/pictures/${user.id}`)\r\n    .then(response => {\r\n      /*\r\n      Promise.all(response.data.map(p => {\r\n        this.setState({\r\n          profilePath: p,\r\n          isLoading: false\r\n      });\r\n      }))\r\n      */\r\n        this.setState({\r\n            profilePath: response.data,\r\n            isLoading: false\r\n        });\r\n    })\r\n  }\r\n\r\n  async componentDidMount(){\r\n    await this.getProfilePictures(this.props.user);\r\n  }\r\n\r\n  render() {\r\n    const {isLoading, profilePath} = this.state;\r\n    let settings = this.state;\r\n    if(isLoading){\r\n      return(<p>Loading...</p>)\r\n    }\r\n    return (\r\n      <>\r\n        <Menu>\r\n          <div className=\"menu-item\" href=\"/\">\r\n            {this.props.user.name}\r\n          </div>\r\n          <a className=\"navbar-brand text-center\" href=\"#\">\r\n            <img src={profilePath[0].route} height=\"80\" alt=\"\"/>\r\n          </a>\r\n          <a className=\"menu-item\" href=\"/\">\r\n            Home\r\n          </a>\r\n          <p className=\"menu-item\" style={{cursor:\"pointer\"}} onClick={this.showPrefs.bind(this)}>\r\n            Settings\r\n          </p>\r\n          <a className=\"menu-item\" href=\"#\">\r\n            Asd\r\n          </a>\r\n          <a className=\"menu-item\" href=\"/\" onClick={this.props.removeCookie} >\r\n            Logout\r\n          </a>\r\n        </Menu>\r\n        <div ref={ref => (this.overlay = ref)} className=\"overlay\" />\r\n            <div ref={ref => (this.prefs = ref)} className=\"md-modal\">\r\n              <SettingsPane\r\n                items={this._menu}\r\n                index=\"/settings/general\"\r\n                settings={settings}\r\n                onChange={this._settingsChanged}\r\n                onPaneLeave={this._leavePaneHandler}\r\n              >\r\n                <SettingsMenu headline=\"General Settings\" />\r\n                <SettingsContent header>\r\n                  <SettingsPage handler=\"/settings/general\">\r\n                    <fieldset className=\"form-group\">\r\n                      <label htmlFor=\"generalName\">Name: </label>\r\n                      <input\r\n                        type=\"text\"\r\n                        className=\"form-control\"\r\n                        name={this.props.user.name}\r\n                        placeholder=\"Name\"\r\n                        id=\"generalName\"\r\n                        onChange={this._settingsChanged}\r\n                        defaultValue={this.props.user.name}\r\n                      />\r\n                    </fieldset>\r\n                    <fieldset className=\"form-group\">\r\n                      <label htmlFor=\"generalUsername\">Username: </label>\r\n                      <div className=\"input-group\">\r\n                        <input\r\n                          type=\"text\"\r\n                          name=\"mysettings.general.username\"\r\n                          className=\"form-control\"\r\n                          placeholder=\"Username\"\r\n                          aria-describedby=\"basic-addon1\"\r\n                          onChange={this._settingsChanged}\r\n                          defaultValue={settings[\"mysettings.general.username\"]}\r\n                        />\r\n                      </div>\r\n                    </fieldset>\r\n                    <fieldset className=\"form-group\">\r\n                      <label htmlFor=\"generalMail\">E-Mail address: </label>\r\n                      <input\r\n                        type=\"text\"\r\n                        className=\"form-control\"\r\n                        name=\"mysettings.general.email\"\r\n                        placeholder=\"E-Mail Address\"\r\n                        id=\"generalMail\"\r\n                        onChange={this._settingsChanged}\r\n                        defaultValue={settings[\"mysettings.general.email\"]}\r\n                      />\r\n                    </fieldset>\r\n                    <fieldset className=\"form-group\">\r\n                      <label htmlFor=\"generalPic\">Picture: </label>\r\n                      <input\r\n                        type=\"text\"\r\n                        className=\"form-control\"\r\n                        name=\"mysettings.general.picture\"\r\n                        placeholder=\"Picture\"\r\n                        id=\"generalPic\"\r\n                        onChange={this._settingsChanged}\r\n                        defaultValue={settings[\"mysettings.general.picture\"]}\r\n                      />\r\n                    </fieldset>\r\n                    <fieldset className=\"form-group\">\r\n                      <label htmlFor=\"profileColor\">Color-Theme: </label>\r\n                      <select\r\n                        name=\"mysettings.general.color-theme\"\r\n                        id=\"profileColor\"\r\n                        className=\"form-control\"\r\n                        defaultValue={settings[\"mysettings.general.color-theme\"]}\r\n                      >\r\n                        <option value=\"blue\">Blue</option>\r\n                        <option value=\"red\">Red</option>\r\n                        <option value=\"purple\">Purple</option>\r\n                        <option value=\"orange\">Orange</option>\r\n                      </select>\r\n                    </fieldset>\r\n                  </SettingsPage>\r\n                  <SettingsPage handler=\"/settings/profile\">\r\n                    <fieldset className=\"form-group\">\r\n                      <label htmlFor=\"profileFirstname\">Firstname: </label>\r\n                      <input\r\n                        type=\"text\"\r\n                        className=\"form-control\"\r\n                        name=\"mysettings.profile.firstname\"\r\n                        placeholder=\"Firstname\"\r\n                        id=\"profileFirstname\"\r\n                        onChange={this._settingsChanged}\r\n                        defaultValue={settings[\"mysettings.profile.firstname\"]}\r\n                      />\r\n                    </fieldset>\r\n                    <fieldset className=\"form-group\">\r\n                      <label htmlFor=\"profileLastname\">Lastname: </label>\r\n                      <input\r\n                        type=\"text\"\r\n                        className=\"form-control\"\r\n                        name=\"mysettings.profile.lastname\"\r\n                        placeholder=\"Lastname\"\r\n                        id=\"profileLastname\"\r\n                        onChange={this._settingsChanged}\r\n                        defaultValue={settings[\"mysettings.profile.lastname\"]}\r\n                      />\r\n                    </fieldset>\r\n                    <fieldset className=\"form-group\">\r\n                      <label htmlFor=\"profileBiography\">Biography: </label>\r\n                      <textarea\r\n                        className=\"form-control\"\r\n                        name=\"mysettings.profile.biography\"\r\n                        placeholder=\"Biography\"\r\n                        id=\"profileBiography\"\r\n                        onChange={this._settingsChanged}\r\n                        defaultValue={settings[\"mysettings.profile.biography\"]}\r\n                      />\r\n                    </fieldset>\r\n                  </SettingsPage>\r\n                </SettingsContent>\r\n              </SettingsPane>\r\n            </div>\r\n\r\n      </>\r\n    )\r\n  }\r\n}",["54","55"],"D:\\Gyakran hasznalt\\Projects\\Codecool\\PHP\\TindR\\tindr-react\\src\\components\\Recommendations.js",["56","57","58","59"],"import React, {Component} from 'react';\r\nimport { Helmet } from 'react-helmet';\r\nimport axios from 'axios';\r\nimport moment from \"moment\";\r\nimport TinderCard from 'react-tinder-card';\r\n\r\nclass Recommendations extends Component {\r\n    constructor() {\r\n      super();\r\n\r\n      this.state = {\r\n          recommendations: [],\r\n          pictures: [],\r\n          currentPictureIndex: 0,\r\n          isLoading: true,\r\n          showProfile: false,\r\n          current: {\r\n              index: undefined,\r\n              user: undefined\r\n          }\r\n      }\r\n\r\n      this.getRecommendations = this.getRecommendations.bind(this);\r\n      this.getNextProfile = this.getNextProfile.bind(this);\r\n      this.getCurrentData = this.getCurrentData.bind(this);\r\n      this.handleLike = this.handleLike.bind(this);\r\n      this.handleDislike = this.handleDislike.bind(this);\r\n      this.handleKeyDown = this.handleKeyDown.bind(this);\r\n      this.setNextPicture = this.setNextPicture.bind(this);\r\n      this.setPreviousPicture = this.setPreviousPicture.bind(this);\r\n      this.showProfile = this.showProfile.bind(this);\r\n      this.ageCalculation = this.ageCalculation.bind(this);\r\n      this.getCurrentPictures = this.getCurrentPictures.bind(this);\r\n\r\n      this.onCardLeftScreen = this.onCardLeftScreen.bind(this);\r\n      this.onSwipe = this.onSwipe.bind(this);\r\n    }\r\n\r\n    async componentDidMount() {\r\n        await this.getRecommendations();\r\n        await this.getCurrentPictures();\r\n    }\r\n\r\n    async getRecommendations() {\r\n        await axios.get(`http://${process.env.REACT_APP_IP}:8000/api/recommendations/${this.props.userID}`)\r\n        .then(response => {\r\n            let updCurrent = {\r\n                index: 0,\r\n                user: response.data.length === undefined ? response.data : response.data[0]\r\n            }\r\n\r\n            this.setState({\r\n                recommendations : response.data,\r\n                current : updCurrent\r\n            });\r\n        })\r\n    }\r\n\r\n   async getCurrentPictures() {\r\n       const { current } = this.state;\r\n\r\n        await axios.get(`http://${process.env.REACT_APP_IP}:8000/api/pictures/${current.user.id}`)\r\n            .then(response => {\r\n                Promise.all(response.data.map(p => {\r\n                    this.setState({\r\n                        pictures: p,\r\n                        isLoading: false\r\n                    });\r\n                }))\r\n            });\r\n   }\r\n\r\n    async getNextProfile() {\r\n        const { recommendations, current } = this.state;\r\n        console.log(recommendations[current.index + 1])\r\n\r\n        if (recommendations[current.index + 1] !== undefined) {\r\n            let updCurrent = {\r\n                index: current.index + 1,\r\n                user: recommendations[current.index + 1]\r\n            }\r\n            await this.setState({\r\n                current : updCurrent,\r\n                isLoading : true\r\n            })\r\n            this.getCurrentPictures();\r\n        }\r\n        else {\r\n            this.setState({\r\n                current : {\r\n                    index: 0,\r\n                    user: undefined\r\n                },\r\n                isLoading : false\r\n            })\r\n        }\r\n    }\r\n\r\n    setNextPicture() {\r\n        const { currentPictureIndex, pictures } = this.state;\r\n\r\n        const max = pictures.length -1;\r\n        const next = currentPictureIndex + 1;\r\n        \r\n        if (next <= max)\r\n            this.setState({currentPictureIndex: next})\r\n        else\r\n            this.setState({currentPictureIndex: 0});\r\n    }\r\n\r\n    setPreviousPicture() {\r\n        const { currentPictureIndex, pictures } = this.state;\r\n\r\n        const max = pictures.length -1;\r\n        const previous = currentPictureIndex - 1;\r\n\r\n        if (previous < 0) \r\n            this.setState({currentPictureIndex : max});\r\n        else\r\n            this.setState({currentPictureIndex : previous});\r\n    }\r\n\r\n    showProfile() {\r\n        const { current, showProfile } = this.state;\r\n        const user = current.user;\r\n\r\n        if(showProfile) {\r\n            return (\r\n                <>\r\n                    <link rel=\"stylesheet\" href=\"https://use.fontawesome.com/releases/v5.15.1/css/all.css\" integrity=\"sha384-vp86vTRFVJgpjF9jiIGPEEqYqlDwgyBgEF109VFjmqGmIY/Y4HV4d3Gp2irVfcrp\" crossorigin=\"anonymous\"></link>\r\n                    \r\n                    <p>\r\n                        <span className=\"fa fa-info-circle\" /> \r\n                        Description: {user.description !== null ? user.description : \"N/A\"}\r\n                    </p>\r\n                    <p>Birthdate: {user.birthdate !== null ? moment(user.birthdate).format('MMMM Do YYYY') : \"N/A\"}</p>\r\n                    <p>School: {user.school !== null ? user.school : \"N/A\"}</p>\r\n                    <p>Works at: {user.company !== null ? user.company : \"N/A\"}</p>\r\n                    <p>Position: {user.job_title !== null ? user.job_title : \"N/A\"}</p>\r\n                    <p>Gender: {user.gender !== null ? user.gender : \"N/A\"}</p>\r\n                    <p>Passions: {user.passion !== null ? user.passion : \"N/A\"}</p>\r\n                    <p>Sexual Orientation: {user.sexual_orientation !== null ? user.sexual_orientation : \"N/A\"}</p>\r\n\r\n                    {user.anthem !== null &&\r\n                        <iframe width=\"560\" height=\"315\" \r\n                                src={`https://www.youtube.com/embed/${user.anthem}`}\r\n                                frameborder=\"0\" \r\n                                allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" \r\n                                allowfullscreen\r\n                            >\r\n                        </iframe>\r\n                    }\r\n                </>\r\n            );\r\n        }\r\n    }\r\n\r\n    ageCalculation(date) {\r\n        const now = new Date();\r\n        const birthdate = new Date(date);\r\n\r\n        let diff = now.getTime() - birthdate.getTime();\r\n        return Math.floor(diff / (1000 * 60 * 60 * 24 * 365.25));\r\n    }\r\n\r\n    getCurrentData() {\r\n        const { current, pictures, currentPictureIndex } = this.state;\r\n\r\n        if (current.user !== undefined) {\r\n            const route = pictures.length === undefined ? pictures.route : pictures[currentPictureIndex].route;\r\n            return(\r\n                <>\r\n                    <img src={route} />\r\n\r\n                    <div className=\"mx-auto my-0 text-red\">\r\n                        <button onClick={this.handleDislike}>Dislike</button>\r\n                        <button onClick={this.handleLike}>Like</button>\r\n\r\n                        <h1>{current.user.name} {this.ageCalculation(current.user.birthdate)}</h1>\r\n                    </div>\r\n                    \r\n                    {this.showProfile()}\r\n                </>\r\n            );\r\n        }\r\n        else {\r\n            return(\r\n                <>\r\n                    No more!\r\n                </>\r\n            );\r\n        }\r\n    }\r\n\r\n    async handleLike() {\r\n        const { current } = this.state;\r\n\r\n        await axios.post(`http://${process.env.REACT_APP_IP}:8000/api/add_like`, {\r\n            giverid: this.props.userID,\r\n            receiverid: current.user.id\r\n        });\r\n        this.getNextProfile();\r\n    }\r\n\r\n    async handleDislike() {\r\n        const { current } = this.state;\r\n\r\n        await axios.post(`http://${process.env.REACT_APP_IP}:8000/api/add_dislike`, {\r\n            giverid: this.props.userID,\r\n            receiverid: current.user.id\r\n        });\r\n        this.getNextProfile();\r\n    }\r\n\r\n    handleKeyDown(event) {\r\n        switch(event.key) {\r\n            case \"ArrowRight\": {\r\n                this.handleLike();\r\n                break;\r\n            }\r\n            case \"ArrowLeft\": {\r\n                this.handleDislike();\r\n                break;\r\n            }\r\n            case \" \": { //Space\r\n                this.setNextPicture();\r\n                break;\r\n            }\r\n            case \"Backspace\": {\r\n                this.setPreviousPicture();\r\n                break;\r\n            }\r\n            case \"ArrowUp\": {\r\n                this.setState({showProfile : true});\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                this.setState({showProfile : false});\r\n                break;\r\n            }\r\n            default:\r\n        }\r\n    }\r\n\r\n    onSwipe(direction) {\r\n        console.log(direction)\r\n    }\r\n\r\n    onCardLeftScreen(id) {\r\n        console.log(id)\r\n    }\r\n\r\n    render() {\r\n        const { isLoading } = this.state;\r\n\r\n        if (!isLoading) {\r\n            /*\r\n            <div onKeyDown={this.handleKeyDown} tabIndex=\"0\" className=\"container d-flex h-100 align-items-center\">\r\n                        <div className=\"mx-auto text-center\">\r\n                            {this.getCurrentData()}\r\n                        </div>\r\n                    </div>\r\n            */\r\n            return (\r\n                <>\r\n                    <div onKeyDown={this.handleKeyDown} tabIndex=\"0\" className=\"container d-flex h-100 align-items-center\">\r\n                        <div className=\"mx-auto text-center\">\r\n                            <TinderCard onSwipe={this.onSwipe} onCardLeftScreen={() => this.onCardLeftScreen('fooBar')} preventSwipe={['right', 'left']}>\r\n                                {this.getCurrentData()}\r\n                            </TinderCard>\r\n                        </div>\r\n                    </div>\r\n                </>\r\n            );\r\n        }\r\n        else\r\n            return (\r\n                <h1>Loading...</h1>\r\n            );\r\n    }\r\n}\r\n\r\nexport default Recommendations;","D:\\Gyakran hasznalt\\Projects\\Codecool\\PHP\\TindR\\tindr-react\\src\\index.js",[],"D:\\Gyakran hasznalt\\Projects\\Codecool\\PHP\\TindR\\tindr-react\\src\\components\\WelcomePage.js",["60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","75","76","77","78","79"],"import React, {Component} from 'react';\r\nimport { Helmet } from 'react-helmet';\r\nimport Swal from \"sweetalert2\";\r\nimport axios from 'axios';\r\nimport moment from \"moment\";\r\nimport ReactCodeInput from 'react-code-input';\r\nimport withReactContent from 'sweetalert2-react-content'\r\n\r\nclass WelcomePage extends Component {\r\n    constructor() {\r\n      super();\r\n\r\n      this.state = {\r\n        apikey:'6259e30396ee22afa1b50ed0d8468bd7be1204de',\r\n        appkey:'a1yqe5e4o6a6eborahy7',\r\n        userName: undefined,\r\n        email: undefined,\r\n        phoneNumber: undefined,\r\n        password: undefined,\r\n        confirmPass: undefined,\r\n        birthDate: undefined,\r\n        passions: undefined,\r\n      }\r\n\r\n      this.startLogin = this.startLogin.bind(this);\r\n      this.handleLogin = this.handleLogin.bind(this);\r\n      this.doLogin = this.doLogin.bind(this);\r\n      this.startRegister = this.startRegister.bind(this);\r\n      this.regEnterUsername = this.regEnterUsername.bind(this);\r\n      this.regEnterEmail = this.regEnterEmail.bind(this);\r\n      this.isValidEmail = this.isValidEmail.bind(this);\r\n      this.regEnterPhoneNumber = this.regEnterPhoneNumber.bind(this);\r\n      this.isValidPhoneNumber = this.isValidPhoneNumber.bind(this);\r\n      this.regEnterPassword = this.regEnterPassword.bind(this);\r\n      this.regEnterBirthdate = this.regEnterBirthdate.bind(this);\r\n      this.regEnterPassions = this.regEnterPassions.bind(this);\r\n      this.regUploadImage = this.regUploadImage.bind(this);\r\n      this.showDetails = this.showDetails.bind(this);\r\n      this.doRegistration = this.doRegistration.bind(this);\r\n      this.requestPin = this.requestPin.bind(this);\r\n      this.validatePin = this.validatePin.bind(this);\r\n    }\r\n\r\n    async startLogin() {\r\n      await this.handleLogin();\r\n    }\r\n\r\n    async handleLogin(error = \"\") {\r\n      const { value: formValues } = await Swal.fire({\r\n        title: 'Sign in',\r\n        html:\r\n          `${error !== \"\" ? `<p style=\"color:red\">${error}</p>\\n\\n` : \"\"}` +\r\n          '<p>Enter your email address</p>' +\r\n          '<input id=\"swal-input1\" class=\"swal2-input\" type=\"email\">' +\r\n          '<p>Enter your password</p>' +\r\n          '<input id=\"swal-input2\" class=\"swal2-input\" type=\"password\">',\r\n        focusConfirm: false,\r\n        confirmButtonText: `Sign in`,\r\n        preConfirm: () => {\r\n          return [\r\n            document.getElementById('swal-input1').value,\r\n            document.getElementById('swal-input2').value\r\n          ]\r\n        }\r\n      })\r\n\r\n      if (formValues !== undefined) {\r\n        if (formValues[0] == \"\" || formValues[1] == \"\") {\r\n          this.handleLogin(\"You must be enter your username and your password!\");\r\n        }\r\n        else\r\n          this.doLogin(formValues[0], formValues[1]);\r\n      }\r\n    }\r\n\r\n    doLogin(email, password) {\r\n      axios.post(\"http://\"+process.env.REACT_APP_IP+\":8000/api/login\", {\r\n        email: email,\r\n        password: password\r\n      }).then(response => {\r\n        if (response.data.length !== 0) {\r\n          this.props.setUser(response.data);\r\n        }\r\n        else\r\n          this.handleLogin(\"Incorrect e-mail or password!\")\r\n      })\r\n    }\r\n\r\n    async startRegister() {\r\n      await this.regEnterUsername();\r\n    }\r\n\r\n    async regEnterUsername(error = \"\") {\r\n      const { value: username } = await Swal.fire({\r\n        title: 'Registration step 1/7',\r\n        html:\r\n          '<p>Enter your username</p>' +\r\n          `${error !== \"\" ? `\\n\\n<p style=\"color:red\">${error}</p>` : \"\"}` +\r\n          '<input id=\"swal-input1\" class=\"swal2-input\" type=\"text\">',\r\n        focusConfirm: false,\r\n        confirmButtonText: `Next`,\r\n        preConfirm: () => {\r\n          return [\r\n            document.getElementById('swal-input1').value\r\n          ]\r\n        }\r\n      })\r\n\r\n      if (username !== undefined) {\r\n        if (username[0] == \"\")\r\n          this.regEnterUsername(\"You must be enter your username!\");\r\n        else if (username[0].length <= 3)\r\n          this.regEnterUsername(\"Username must have 4 characters long!\");\r\n        else {\r\n            this.setState({userName : username[0]});\r\n            this.regEnterEmail();\r\n        }\r\n      }\r\n    }\r\n\r\n    async regEnterEmail(error = \"\") {\r\n      const { value: email } = await Swal.fire({\r\n        title: 'Registration step 2/7',\r\n        html:\r\n          '<p>Enter your e-mail address</p>' +\r\n          `${error !== \"\" ? `\\n\\n<p style=\"color:red\">${error}</p>` : \"\"}` +\r\n          '<input id=\"swal-input1\" class=\"swal2-input\" type=\"email\" placeholder=\"(eg.: somebody@example.com)\">',\r\n        focusConfirm: false,\r\n        confirmButtonText: `Next`,\r\n        preConfirm: () => {\r\n          return [\r\n            document.getElementById('swal-input1').value\r\n          ]\r\n        }\r\n      })\r\n\r\n      if (email !== undefined) {\r\n        if (email[0] == \"\")\r\n          return this.regEnterEmail(\"You must be enter your e-mail address!\")\r\n        else if (email[0].includes(\"@\") == false || email[0].includes(\".\") == false)\r\n          return this.regEnterEmail(\"Invalid e-mail address!\")\r\n      \r\n        const check = await this.isValidEmail(email[0])\r\n\r\n        if (check) {\r\n          this.setState({email : email[0]});\r\n          this.regEnterPhoneNumber();\r\n        } \r\n        else\r\n          this.regEnterEmail(\"This e-mail is already in use!\")\r\n      }\r\n    }\r\n\r\n    async isValidEmail(email) {\r\n      let temp = undefined;\r\n      await axios.get(\"http://\"+process.env.REACT_APP_IP+\":8000/api/valid_email/\" + email)\r\n      .then(response => {\r\n          temp = response.data.length == 0\r\n      })\r\n      return temp;\r\n    }\r\n\r\n    async requestPin(number){\r\n      await axios.post(\"http://\"+process.env.REACT_APP_IP+\":8000/api/getpin\",{\r\n        appkey:this.state.appkey,\r\n        apikey:this.state.apikey,\r\n        phone:number\r\n      })\r\n      .then(resp =>{\r\n        console.log(resp.data);\r\n      })\r\n    }\r\n\r\n    async regEnterPhoneNumber(error = \"\") {\r\n      const { value: phone } = await Swal.fire({\r\n        title: 'Registration step 3/7',\r\n        html:\r\n          '<p>Enter your phone number</p>' +\r\n          `${error !== \"\" ? `\\n\\n<p style=\"color:red\">${error}</p>` : \"\"}` +\r\n          '<input id=\"swal-input1\" class=\"swal2-input\" type=\"tel\" placeholder=\"(eg.: 30/123-4567)\">',\r\n        focusConfirm: false,\r\n        confirmButtonText: `Next`,\r\n        preConfirm: () => {\r\n          return [\r\n            document.getElementById('swal-input1').value\r\n          ]\r\n        }\r\n      })\r\n\r\n      if (phone !== undefined) {\r\n        if (phone[0] == \"\")\r\n          this.regEnterPhoneNumber(\"You must enter your phone number\");\r\n        else if (this.isValidPhoneNumber(phone[0])) {\r\n          let pinnumber = \"+36\" + phone[0].replace(\"/\",\"\").replace(\"-\",\"\");\r\n          this.requestPin(pinnumber);\r\n          this.validatePin(pinnumber);\r\n          this.setState({phoneNumber : phone[0]});\r\n          \r\n        } \r\n        else \r\n          this.regEnterPhoneNumber(`Invalid phone number!\\n'${phone}'`);\r\n      }\r\n    }\r\n    \r\n    async validatePin(pinnumber){\r\n      const mySwal = withReactContent(Swal);\r\n      let pin = 0;\r\n      let pinHtml = <ReactCodeInput type=\"number\" onChange={(e) => pin = e} fields={4}/>;\r\n      await mySwal.fire({\r\n        title: 'Enter the verification code',\r\n        html:pinHtml,\r\n        //input: 'text',\r\n        inputAttributes: {\r\n          autocapitalize: 'off'\r\n        },\r\n        showCancelButton: true,\r\n        confirmButtonText: 'Validate',\r\n        showLoaderOnConfirm: true,\r\n        preConfirm: (usuallytrue) => {\r\n          return axios.post(\"http://\"+process.env.REACT_APP_IP+\":8000/api/validatecode\",{\r\n            appkey:this.state.appkey,\r\n            apikey:this.state.apikey,\r\n            phone:pinnumber,\r\n            code:pin\r\n          })\r\n          .then(response => {\r\n            if (response.data.status !== \"SUCCESS\") {\r\n              throw new Error(response.statusText)\r\n            }\r\n            return response.data;\r\n          })\r\n          .catch(error => {\r\n            Swal.showValidationMessage(\r\n              `Request failed: ${error}`\r\n            )\r\n          })\r\n        },\r\n        allowOutsideClick: () => !Swal.isLoading()\r\n      }).then((result) => {\r\n        console.log(result);\r\n        if (result.isConfirmed) {\r\n          Swal.fire({\r\n            confirmButtonText:'OK',\r\n            title: `${result.value.status}`,\r\n            preConfirm: (ok) =>{\r\n              this.regEnterPassword();\r\n            }\r\n          })\r\n        }\r\n      })\r\n    }\r\n\r\n    isValidPhoneNumber(phone) {\r\n      if (phone.length < 11 || phone.length > 11)\r\n        return false;\r\n\r\n      for (let i = 0; i < phone.length; i++) {\r\n        if (i == 2) {\r\n          if (phone[i] != '/')\r\n            return false;\r\n        }\r\n        else if (i == 6) {\r\n          if (phone[i] != \"-\")\r\n            return false;\r\n        }\r\n        else if (isNaN(phone[i]))\r\n            return false;\r\n      }\r\n      return true;\r\n    }\r\n\r\n    async regEnterPassword(error = \"\", pw = \"\") {\r\n      const { value: formValues } = await Swal.fire({\r\n        title: 'Registration step 4/7',\r\n        html:\r\n          '<p>Enter your password</p>' +\r\n          `${error !== \"\" ? `<p style=\"color:red\">${error}</p>` : \"\"}` +\r\n          `<input id=\"swal-input1\" class=\"swal2-input\" type=\"password\" value=\"${pw}\">` +\r\n          '<p>Confirm your password</p>' +\r\n          '<input id=\"swal-input2\" class=\"swal2-input\" type=\"password\">',\r\n        focusConfirm: false,\r\n        confirmButtonText: `Next`,\r\n        preConfirm: () => {\r\n          return [\r\n            document.getElementById('swal-input1').value,\r\n            document.getElementById('swal-input2').value\r\n          ]\r\n        }\r\n      })\r\n      \r\n      if (formValues !== undefined) {\r\n        if (formValues[0] == \"\" || formValues[1] == \"\")\r\n          this.regEnterPassword(\"You must be enter your password and confirm it!\");\r\n        else if (formValues[0] === formValues[1]) {\r\n            this.setState({password : formValues[0]});\r\n            this.regEnterBirthdate();\r\n        }\r\n        else\r\n          this.regEnterPassword(\"Invalid confirm password!\", formValues[0]);\r\n      }\r\n    }\r\n\r\n    async regEnterBirthdate(error = \"\") {\r\n      const { value: birthdate } = await Swal.fire({\r\n        title: 'Registration step 5/7',\r\n        html: \r\n          '<p>Enter your birthdate</p>' +\r\n          `${error !== \"\" ? `<p style=\"color:red\">${error}</p>` : \"\"}` +\r\n          '<input id=\"swal-input1\" class=\"swal2-input\" type=\"date\">',\r\n        focusConfirm: false,\r\n        confirmButtonText: `Next`,\r\n        preConfirm: () => {\r\n          return [\r\n            document.getElementById('swal-input1').value\r\n          ]\r\n        }\r\n      })\r\n\r\n      const bDate = moment(birthdate[0]).valueOf(),\r\n            now = moment().valueOf(),\r\n            minValue = 31556952000 * 18; //age 18\r\n\r\n      if (birthdate !== undefined) {\r\n        if (birthdate[0] == \"\")\r\n          this.regEnterBirthdate(\"You didn't enter your birthdate!\");\r\n        else if(now - bDate < minValue)\r\n          this.regEnterBirthdate(\"You cannot register under the age of 18!\");\r\n        else {\r\n          this.setState({birthDate : bDate});\r\n          this.regEnterPassions();\r\n        }\r\n      }\r\n    }\r\n\r\n    async regEnterPassions(error = \"\") {\r\n      const { value: passions } = await Swal.fire({\r\n        title: 'Registration step 6/7',\r\n        html: \r\n          '<p>Enter minimum 3 passions comma separated</p>' +\r\n          `${error !== \"\" ? `<p style=\"color:red\">${error}</p>` : \"\"}` +\r\n          '<input id=\"swal-input1\" class=\"swal2-input\" type=\"text\" placeholder=\"(eg.: reading,coding,walking)\">',\r\n        focusConfirm: false,\r\n        confirmButtonText: `Next`,\r\n        preConfirm: () => {\r\n          return [\r\n            document.getElementById('swal-input1').value\r\n          ]\r\n        }\r\n      })\r\n\r\n      if (passions !== undefined) {\r\n        if (passions[0].split(',').length >= 3) {\r\n          this.setState({passions : passions[0]});\r\n          this.regUploadImage();\r\n        }\r\n        else\r\n          this.regEnterPassions(\"You have to enter minimum 3 passion!\")\r\n      }\r\n    }\r\n\r\n    async regUploadImage(error = \"\") {\r\n      const { value: file } = await Swal.fire({\r\n        title: 'Registration step 7/7',\r\n        html:\r\n          '<p>Upload an image of yourself</p>' +\r\n          `${error !== \"\" ? `<p style=\"color:red\">${error}</p>` : \"\"}`,\r\n        input: 'file',\r\n        confirmButtonText: `Upload`,\r\n        inputAttributes: {\r\n          'accept': 'image/*',\r\n          'aria-label': 'Upload your profile picture'\r\n        }\r\n      })\r\n      \r\n      if (file !== undefined) {\r\n        if (file) {\r\n          this.showDetails(file);\r\n        }\r\n        else\r\n          this.regUploadImage(\"You must be upload an image!\");\r\n      }\r\n    }\r\n\r\n    showDetails(file) {\r\n      const reader = new FileReader()\r\n      const {userName, email, phoneNumber, birthDate, passions} = this.state\r\n\r\n      reader.onload = (e) => {\r\n        const { value: accept } = Swal.fire({\r\n          title: 'Your details',\r\n          input: 'checkbox',\r\n          inputValue: 0,\r\n          inputPlaceholder: 'I agree with the terms and conditions',\r\n          imageUrl: e.target.result,\r\n          html:\r\n            `<p>Name: ${userName}</p>` +\r\n            `<p>E-mail: ${email}</p>` +\r\n            `<p>Phone: ${phoneNumber}</p>` +\r\n            `<p>Birthdate: ${moment(birthDate).format(\"MMMM Do YYYY\")}</p>` +\r\n            `<p>Passions: ${passions}</p>`,\r\n          imageAlt: 'The uploaded picture',\r\n          confirmButtonText: `Register`,\r\n          inputValidator: (result) => {\r\n            return !result ? 'You need to agree with T&C' : this.doRegistration(e.target.result);\r\n          }\r\n        })\r\n      }\r\n      reader.readAsDataURL(file)\r\n    }\r\n\r\n    async doRegistration(file) {\r\n      const {userName, email, phoneNumber, password, birthDate, passions} = this.state;\r\n\r\n      await axios.post(\"http://\"+process.env.REACT_APP_IP+\":8000/api/register\", {\r\n        name: userName,\r\n        email: email,\r\n        phone_number: phoneNumber,\r\n        password: password,\r\n        birthdate: birthDate,\r\n        passion: passions,\r\n        rawImage: file\r\n      }).then(response => {\r\n        if (response.data.length != 0) {\r\n          this.props.setUser(response.data);\r\n        }\r\n      })\r\n    }\r\n  \r\n    render() {\r\n      return (\r\n        <>\r\n          <Helmet>\r\n              <title>Tinder | Dating, Make Friends & Meet New People</title>\r\n          </Helmet>\r\n  \r\n          <section style={{ height:\"100vh\",\r\n                            background: 'linear-gradient(rgba(0,0,0,.4), rgba(0,0,0,.4)), url(\"https://tinder.com/static/build/m/b07fe760ab4714aa3e932a15657494e5.webp\")',\r\n                            backgroundRepeat:\"no-repeat\",\r\n                            backgroundSize:\"cover\"}}\r\n          >\r\n            <nav className=\"navbar navbar-light bg-transparent justify-content-between\">\r\n              <div className=\"flex justify-start lg:w-0 lg:flex-1\">\r\n                <a href=\"/\">\r\n                    <span className=\"sr-only\">TindR</span>\r\n                    <img src=\"logo.svg\" width=\"55%\"></img>\r\n                </a>\r\n              </div>   \r\n  \r\n              <div className=\"hidden md:flex items-center justify-end md:flex-1 lg:w-0\">\r\n                <a className=\"btn btn-success rounded-pill\"\r\n                    onClick={this.startLogin}\r\n                >\r\n                    LOG IN\r\n                </a>\r\n              </div>\r\n            </nav>\r\n  \r\n            <div className=\"container d-flex h-100 align-items-center\">\r\n              <div className=\"mx-auto text-center\">\r\n                <h1 className=\"mx-auto my-0 text-white\" style={{fontSize:\"800%\"}}>\r\n                  Swipe Right®\r\n                </h1>\r\n                <a  className=\"btn btn-danger js-scroll-trigger rounded-pill\"\r\n                    onClick={this.startRegister}\r\n                >\r\n                  CREATE ACCOUNT \r\n                </a>\r\n              </div>\r\n            </div>\r\n            \r\n            <button onClick={() => this.requestPin(this.state.phoneNumber)}>TEEEEEST</button>\r\n          </section>\r\n        </>\r\n      );\r\n    }\r\n  }\r\n  \r\n  export default WelcomePage;",["80","81"],"D:\\Gyakran hasznalt\\Projects\\Codecool\\PHP\\TindR\\tindr-react\\src\\components\\Asd.js",["82","83","84"],"import React, { Component } from 'react'\r\nimport SideBar from './SideBar'\r\nimport './css/side.css'\r\nimport Helmet from 'react-helmet';\r\nimport ReactCodeInput from 'react-code-input';\r\nexport default class Asd extends Component {\r\n  constructor(props){\r\n    super(props);\r\n\r\n  }\r\n\r\n  \r\n  // -- Request a PIN --\r\n  //apikey1 = 6259e30396ee22afa1b50ed0d8468bd7be1204de\r\n  //appkey1 = a1yqe5e4o6a6eborahy7\r\n  // curl -X \"POST\" \"https://api.ringcaptcha.com/APP_KEY/code/sms\" \\\r\n  // -d \"api_key=API_KEY\" \\\r\n  // -d \"phone=TO_NUMBER\"\r\n\r\n  // -- Verify Phone Number --\r\n\r\n  // curl -X \"POST\" \"https://api.ringcaptcha.com/APP_KEY/verify\" \\\r\n  // -d \"api_key=API_KEY\" \\\r\n  // -d \"phone=TO_NUMBER\" \\\r\n  // -d \"code=PIN\"\r\n\r\n  render() {\r\n    \r\n      return (\r\n      <>\r\n        <SideBar removeCookie={this.props.removeCookie} user={this.props.user} pageWrapId={'page-wrap'} outerContainerId={'outer-container'} />\r\n        <div className=\"container\" id=\"outer-container\">\r\n          <div class=\"row\">\r\n            <div class=\"col-sm-12 text-center\">\r\n                <h1>Main maybe?</h1>\r\n            </div>\r\n          </div>\r\n          <div class=\"row\">\r\n            <div class=\"col-sm-4\">\r\n              <h2>Left Col</h2>\r\n            </div>\r\n            <div class=\"col-sm-4\">\r\n              <h2>Mid Col</h2>\r\n            </div>\r\n            <div class=\"col-sm-4\">\r\n              <h2>Right Col</h2>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </>\r\n      );\r\n  }\r\n}\r\n","D:\\Gyakran hasznalt\\Projects\\Codecool\\PHP\\TindR\\tindr-react\\src\\App.js",["85","86","87"],"D:\\Gyakran hasznalt\\Projects\\Codecool\\PHP\\TindR\\tindr-react\\src\\components\\Card.js",[],"D:\\Gyakran hasznalt\\Projects\\Codecool\\PHP\\TindR\\tindr-react\\src\\components\\Deck.js",["88","89","90"],"D:\\Gyakran hasznalt\\Projects\\Codecool\\PHP\\TindR\\tindr-react\\src\\components\\Settings.js",["91","92","93","94","95"],"D:\\Gyakran hasznalt\\Projects\\Codecool\\PHP\\TindR\\tindr-react\\src\\reportWebVitals.js",[],"D:\\Gyakran hasznalt\\Projects\\Codecool\\PHP\\TindR\\tindr-react\\src\\data.js",["96"],{"ruleId":"97","severity":1,"message":"98","line":114,"column":11,"nodeType":"99","endLine":114,"endColumn":60},{"ruleId":"97","severity":1,"message":"98","line":123,"column":11,"nodeType":"99","endLine":123,"endColumn":45},{"ruleId":"100","replacedBy":"101"},{"ruleId":"102","replacedBy":"103"},{"ruleId":"104","severity":1,"message":"105","line":2,"column":10,"nodeType":"106","messageId":"107","endLine":2,"endColumn":16},{"ruleId":"108","severity":1,"message":"109","line":64,"column":49,"nodeType":"110","messageId":"111","endLine":64,"endColumn":51},{"ruleId":"112","severity":1,"message":"113","line":145,"column":25,"nodeType":"99","endLine":150,"endColumn":30},{"ruleId":"114","severity":1,"message":"115","line":173,"column":21,"nodeType":"99","endLine":173,"endColumn":40},{"ruleId":"116","severity":1,"message":"117","line":68,"column":27,"nodeType":"118","messageId":"119","endLine":68,"endColumn":29},{"ruleId":"116","severity":1,"message":"117","line":68,"column":50,"nodeType":"118","messageId":"119","endLine":68,"endColumn":52},{"ruleId":"116","severity":1,"message":"117","line":110,"column":25,"nodeType":"118","messageId":"119","endLine":110,"endColumn":27},{"ruleId":"116","severity":1,"message":"117","line":138,"column":22,"nodeType":"118","messageId":"119","endLine":138,"endColumn":24},{"ruleId":"116","severity":1,"message":"117","line":140,"column":41,"nodeType":"118","messageId":"119","endLine":140,"endColumn":43},{"ruleId":"116","severity":1,"message":"117","line":140,"column":76,"nodeType":"118","messageId":"119","endLine":140,"endColumn":78},{"ruleId":"116","severity":1,"message":"117","line":158,"column":39,"nodeType":"118","messageId":"119","endLine":158,"endColumn":41},{"ruleId":"116","severity":1,"message":"117","line":191,"column":22,"nodeType":"118","messageId":"119","endLine":191,"endColumn":24},{"ruleId":"116","severity":1,"message":"117","line":258,"column":15,"nodeType":"118","messageId":"119","endLine":258,"endColumn":17},{"ruleId":"116","severity":1,"message":"120","line":259,"column":24,"nodeType":"118","messageId":"119","endLine":259,"endColumn":26},{"ruleId":"116","severity":1,"message":"117","line":262,"column":20,"nodeType":"118","messageId":"119","endLine":262,"endColumn":22},{"ruleId":"116","severity":1,"message":"120","line":263,"column":24,"nodeType":"118","messageId":"119","endLine":263,"endColumn":26},{"ruleId":"116","severity":1,"message":"117","line":292,"column":27,"nodeType":"118","messageId":"119","endLine":292,"endColumn":29},{"ruleId":"116","severity":1,"message":"117","line":292,"column":50,"nodeType":"118","messageId":"119","endLine":292,"endColumn":52},{"ruleId":"116","severity":1,"message":"117","line":324,"column":26,"nodeType":"118","messageId":"119","endLine":324,"endColumn":28},{"ruleId":"104","severity":1,"message":"121","line":389,"column":24,"nodeType":"106","messageId":"107","endLine":389,"endColumn":30},{"ruleId":"116","severity":1,"message":"120","line":423,"column":34,"nodeType":"118","messageId":"119","endLine":423,"endColumn":36},{"ruleId":"114","severity":1,"message":"115","line":445,"column":21,"nodeType":"99","endLine":445,"endColumn":53},{"ruleId":"97","severity":1,"message":"122","line":450,"column":17,"nodeType":"99","endLine":452,"endColumn":18},{"ruleId":"97","severity":1,"message":"122","line":463,"column":17,"nodeType":"99","endLine":465,"endColumn":18},{"ruleId":"100","replacedBy":"123"},{"ruleId":"102","replacedBy":"124"},{"ruleId":"104","severity":1,"message":"105","line":4,"column":8,"nodeType":"106","messageId":"107","endLine":4,"endColumn":14},{"ruleId":"104","severity":1,"message":"125","line":5,"column":8,"nodeType":"106","messageId":"107","endLine":5,"endColumn":22},{"ruleId":"126","severity":1,"message":"127","line":7,"column":3,"nodeType":"128","messageId":"129","endLine":10,"endColumn":4},{"ruleId":"104","severity":1,"message":"130","line":7,"column":8,"nodeType":"106","messageId":"107","endLine":7,"endColumn":16},{"ruleId":"104","severity":1,"message":"131","line":10,"column":8,"nodeType":"106","messageId":"107","endLine":10,"endColumn":15},{"ruleId":"132","severity":1,"message":"133","line":26,"column":29,"nodeType":"134","messageId":"135","endLine":26,"endColumn":51,"fix":"136"},{"ruleId":"104","severity":1,"message":"137","line":24,"column":16,"nodeType":"106","messageId":"107","endLine":24,"endColumn":23},{"ruleId":"138","severity":1,"message":"139","line":34,"column":13,"nodeType":"110","endLine":46,"endColumn":4},{"ruleId":"138","severity":1,"message":"140","line":46,"column":6,"nodeType":"141","endLine":46,"endColumn":8,"suggestions":"142"},{"ruleId":"104","severity":1,"message":"143","line":2,"column":9,"nodeType":"106","messageId":"107","endLine":2,"endColumn":21},{"ruleId":"104","severity":1,"message":"144","line":2,"column":23,"nodeType":"106","messageId":"107","endLine":2,"endColumn":35},{"ruleId":"104","severity":1,"message":"145","line":2,"column":37,"nodeType":"106","messageId":"107","endLine":2,"endColumn":52},{"ruleId":"104","severity":1,"message":"146","line":2,"column":54,"nodeType":"106","messageId":"107","endLine":2,"endColumn":66},{"ruleId":"104","severity":1,"message":"147","line":80,"column":13,"nodeType":"106","messageId":"107","endLine":80,"endColumn":21},{"ruleId":"148","severity":1,"message":"149","line":1,"column":1,"nodeType":"150","endLine":45,"endColumn":3},"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-native-reassign",["151"],"no-negated-in-lhs",["152"],"no-unused-vars","'Helmet' is defined but never used.","Identifier","unusedVar","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","jsx-a11y/iframe-has-title","<iframe> elements must have a unique title property.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Expected '!==' and instead saw '!='.","'accept' is assigned a value but never used.","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md",["151"],["152"],"'ReactCodeInput' is defined but never used.","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","'Settings' is defined but never used.","'SideBar' is defined but never used.","no-whitespace-before-property","Unexpected whitespace before property checkLoginStatus.","MemberExpression","unexpectedWhitespace",{"range":"153","text":"154"},"'getData' is defined but never used.","react-hooks/exhaustive-deps","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","React Hook useEffect has a missing dependency: 'props.userID'. Either include it or remove the dependency array.","ArrayExpression",["155"],"'SettingsPane' is defined but never used.","'SettingsPage' is defined but never used.","'SettingsContent' is defined but never used.","'SettingsMenu' is defined but never used.","'settings' is assigned a value but never used.","import/no-anonymous-default-export","Assign array to a variable before exporting as module default","ExportDefaultDeclaration","no-global-assign","no-unsafe-negation",[765,767],".",{"desc":"156","fix":"157"},"Update the dependencies array to be: [props.userID]",{"range":"158","text":"159"},[1118,1120],"[props.userID]"]