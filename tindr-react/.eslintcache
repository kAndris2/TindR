[{"D:\\Gyakran hasznalt\\Projects\\Codecool\\PHP\\TindR\\tindr-react\\src\\App.js":"1","D:\\Gyakran hasznalt\\Projects\\Codecool\\PHP\\TindR\\tindr-react\\src\\components\\SideBar.js":"2","D:\\Gyakran hasznalt\\Projects\\Codecool\\PHP\\TindR\\tindr-react\\src\\index.js":"3","D:\\Gyakran hasznalt\\Projects\\Codecool\\PHP\\TindR\\tindr-react\\src\\components\\Recommendations.js":"4","D:\\Gyakran hasznalt\\Projects\\Codecool\\PHP\\TindR\\tindr-react\\src\\components\\Asd.js":"5","D:\\Gyakran hasznalt\\Projects\\Codecool\\PHP\\TindR\\tindr-react\\src\\components\\Deck.js":"6","D:\\Gyakran hasznalt\\Projects\\Codecool\\PHP\\TindR\\tindr-react\\src\\components\\spotify_config.js":"7","D:\\Gyakran hasznalt\\Projects\\Codecool\\PHP\\TindR\\tindr-react\\src\\components\\WelcomePage.js":"8","D:\\Gyakran hasznalt\\Projects\\Codecool\\PHP\\TindR\\tindr-react\\src\\components\\ItemLoading.js":"9","D:\\Gyakran hasznalt\\Projects\\Codecool\\PHP\\TindR\\tindr-react\\src\\components\\Pulse.js":"10","D:\\Gyakran hasznalt\\Projects\\Codecool\\PHP\\TindR\\tindr-react\\src\\components\\Loading.js":"11","D:\\Gyakran hasznalt\\Projects\\Codecool\\PHP\\TindR\\tindr-react\\src\\components\\Picture_upload.js":"12"},{"size":3511,"mtime":1611050340575,"results":"13","hashOfConfig":"14"},{"size":16324,"mtime":1611137680770,"results":"15","hashOfConfig":"14"},{"size":618,"mtime":1607676433648,"results":"16","hashOfConfig":"14"},{"size":9584,"mtime":1607941601080,"results":"17","hashOfConfig":"14"},{"size":2888,"mtime":1611218062793,"results":"18","hashOfConfig":"14"},{"size":3328,"mtime":1610719218441,"results":"19","hashOfConfig":"14"},{"size":434,"mtime":1609841141150,"results":"20","hashOfConfig":"14"},{"size":16114,"mtime":1610709664633,"results":"21","hashOfConfig":"14"},{"size":235,"mtime":1611137184625,"results":"22","hashOfConfig":"14"},{"size":1445,"mtime":1610539762437,"results":"23","hashOfConfig":"14"},{"size":1409,"mtime":1610452928155,"results":"24","hashOfConfig":"14"},{"size":5714,"mtime":1610539747854,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1msjh8u",{"filePath":"28","messages":"29","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"31"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"38"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"41","messages":"42","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"31"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"55","messages":"56","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"D:\\Gyakran hasznalt\\Projects\\Codecool\\PHP\\TindR\\tindr-react\\src\\App.js",[],"D:\\Gyakran hasznalt\\Projects\\Codecool\\PHP\\TindR\\tindr-react\\src\\components\\SideBar.js",["57","58","59","60","61","62"],"import { slide as Menu } from 'react-burger-menu';\r\nimport React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport {Badge} from 'react-bootstrap';\r\nimport {SettingsPane, SettingsPage, SettingsContent, SettingsMenu} from 'react-settings-pane';\r\nimport { InputTags } from 'react-bootstrap-tagsinput';\r\nimport 'react-bootstrap-tagsinput/dist/index.css';\r\nimport InputRange from 'react-input-range';\r\nimport 'react-input-range/lib/css/index.css';\r\nimport Select from 'react-select';\r\nimport Picture_upload from './Picture_upload';\r\nimport Test from './Test';\r\nimport NotifyMe from 'react-notification-timeline';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport Loading from './Loading'\r\nimport ItemLoading from './ItemLoading'\r\n\r\nconst options = [\r\n  { value: 'Men', label: 'Men' },\r\n  { value: 'Women', label: 'Women' },\r\n  { value: 'Everyone', label: 'Everyone' },\r\n];\r\n\r\nexport default class SideBar extends Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.picupload = React.createRef();\r\n    this.state={\r\n      profilePath:'',\r\n      isLoading: true,\r\n      settingsLoading: true,\r\n      notiLoading: true,\r\n      details:'',\r\n      formData: '',\r\n      tags:this.props.user.passion.split(\",\"),\r\n      finalTags:[],\r\n      tocompsave:false,\r\n      distanceValue: undefined,\r\n      ageValue: { \r\n        min: undefined, \r\n        max: undefined\r\n      },\r\n      lookingFor: undefined,\r\n      searchData: [],\r\n      notifications: []\r\n    }\r\n\r\n     // Save settings after close\r\n    \r\n     this._leavePaneHandler = (wasSaved, newSettings, oldSettings) => {\r\n    // \"wasSaved\" indicates wheather the pane was just closed or the save button was clicked.\r\n      if (wasSaved){\r\n        try {\r\n          this.setState({tocompsave:true});\r\n          this.saveToPic();\r\n        } catch (error) {\r\n          \r\n        }\r\n      }\r\n      if (wasSaved && (newSettings !== oldSettings)) {\r\n        // do something with the settings, e.g. save via ajax.\r\n        \r\n        //this.setState({formData:newSettings});\r\n        //https://open.spotify.com/track/0vWUhCPxpJOJR5urYbZypB\r\n\r\n        let songID='';\r\n        if ((newSettings.anthem) && newSettings.anthem.length > 22){\r\n          songID = newSettings.anthem.split(\"track/\")[1];\r\n        }\r\n        else songID = oldSettings.anthem;\r\n\r\n        axios.put(process.env.REACT_APP_IP+\"/api/update_user/\"+this.props.user.id,{\r\n          name:newSettings.name,\r\n          description:newSettings.description,\r\n          anthem:songID\r\n        });\r\n        axios.put(process.env.REACT_APP_IP+\"/api/update_account/\"+this.props.user.id,{\r\n          email:newSettings.email,\r\n          phone_number:newSettings.phone_number\r\n        });\r\n        axios.put(process.env.REACT_APP_IP+\"/api/update_search/\"+this.props.user.id,{\r\n          max_distance: newSettings.distanceValue,\r\n          looking_for: newSettings.lookingFor.value,\r\n          min_age: newSettings.ageValue.min,\r\n          max_age: newSettings.ageValue.max,\r\n          status: newSettings.status,\r\n          global: newSettings.global\r\n        }).then(() => {\r\n          this.props.forceRender();\r\n        });\r\n        if (this.state.finalTags.length >= 1){\r\n          axios.put(process.env.REACT_APP_IP+\"/api/update_user/\"+this.props.user.id,{\r\n            passion:newSettings.finalTags.join()\r\n          });\r\n        }\r\n      }\r\n\r\n      this.hidePrefs();\r\n    };\r\n\r\n    // React if a single setting changed\r\n    this._settingsChanged = ev => {\r\n      \r\n    };\r\n\r\n    // Settings menu definition\r\n    this._menu = [\r\n      {\r\n        title: \"General\", // Title that is displayed as text in the menu\r\n        url: \"/settings/general\" // Identifier (url-slug)\r\n      },\r\n      {\r\n        title: \"Profile\",\r\n        url: \"/settings/profile\"\r\n      },\r\n      {\r\n        title: \"Pictures\",\r\n        url: \"/settings/pictures\"\r\n      },\r\n      {\r\n        title: \"Search\",\r\n        url: \"/settings/search\"\r\n      }\r\n    ];\r\n\r\n  }\r\n\r\n  saveToPic(){\r\n    this.picupload.current.sendd();\r\n  }\r\n\r\n  hidePrefs() {\r\n    this.prefs.className = \"md-modal\";\r\n    this.overlay.style.visibility = \"\";\r\n  }\r\n\r\n  showPrefs() {\r\n    this.prefs.className = \"md-modal show\";\r\n    this.overlay.style.visibility = \"visible\";\r\n  }\r\n\r\n  async getProfilePictures(user) {\r\n    await axios.get(`${process.env.REACT_APP_IP}/api/pictures/${user.id}`)\r\n    .then(response => {\r\n      /*\r\n      Promise.all(response.data.map(p => {\r\n        this.setState({\r\n          profilePath: p,\r\n          isLoading: false\r\n      });\r\n      }))\r\n      */\r\n        this.setState({\r\n            profilePath: response.data,\r\n            isLoading: false\r\n        });\r\n    })\r\n  }\r\n\r\n  async getDetails(userid){\r\n    await axios.get(process.env.REACT_APP_IP+\"/api/details/\"+userid)\r\n    .then(resp => {\r\n      this.setState({details:resp.data})\r\n    })\r\n  }\r\n\r\n  async getSearchData() {\r\n    await axios.get(`${process.env.REACT_APP_IP}/api/profile_data/${this.props.user.id}`)\r\n    .then(response => {\r\n      const tempAge = {\r\n        min: response.data.min_age,\r\n        max: response.data.max_age\r\n      }\r\n  \r\n      this.setState({\r\n        searchData: response.data,\r\n        distanceValue: response.data.max_distance,\r\n        ageValue: tempAge,\r\n        lookingFor: response.data.looking_for,\r\n        settingsLoading : false\r\n      });\r\n    })\r\n  }\r\n  \r\n  async getNotifications() {\r\n    const temp = [];\r\n    await axios.get(`${process.env.REACT_APP_IP}/api/get_notifications/${this.props.user.id}`)\r\n    .then(response => {\r\n      Promise.all(response.data.map(p => {\r\n        temp.push({\r\n          \"update\" : p.content,\r\n          \"timestamp\" : p.date\r\n        });\r\n      }))\r\n    });\r\n\r\n    this.setState({\r\n      notifications : temp,\r\n      notiLoading : false\r\n    });\r\n  }\r\n\r\n  async componentDidMount(){\r\n    await this.getProfilePictures(this.props.user);\r\n    await this.getDetails(this.props.user.id);\r\n    await this.getSearchData();\r\n    await this.getNotifications();\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      isLoading, profilePath, details, tags, lookingFor, ageValue, distanceValue, searchData, notifications,\r\n      settingsLoading, notiLoading\r\n    } = this.state;\r\n\r\n    let settings = this.state;\r\n    if(isLoading){\r\n      return(<Loading />)\r\n    }\r\n    \r\n    return (\r\n      <>\r\n        <Menu>\r\n          <div className=\"menu-item\" href=\"/\">\r\n            {this.props.user.name}\r\n            {notiLoading === false ?\r\n              <span className=\"btn pull-right\">\r\n                <NotifyMe\r\n                  data={notifications}\r\n                  storageKey='notific_key'\r\n                  notific_key='timestamp'\r\n                  notific_value='update'\r\n                  heading='Notification Alerts'\r\n                  sortedByKey={false}\r\n                  showDate={true}\r\n                  size={36}\r\n                  color=\"yellow\"\r\n                  markAsReadFn={(e) => console.log(e)}\r\n                />\r\n            </span>\r\n            :\r\n            <ItemLoading />\r\n            }\r\n          </div>\r\n          <a className=\"navbar-brand text-center\" href=\"#\">\r\n            <img src={profilePath[0].route} height=\"80\" alt=\"\"/>\r\n          </a>\r\n          <a className=\"menu-item\" href=\"/\">\r\n            Home\r\n          </a>\r\n          {settingsLoading === false ? \r\n            <p className=\"menu-item\" style={{cursor:\"pointer\"}} onClick={this.showPrefs.bind(this)}>\r\n              Settings\r\n            </p>\r\n            :\r\n            <ItemLoading />\r\n          }\r\n          <a className=\"menu-item\" href=\"#\">\r\n            Asd\r\n          </a>\r\n          <a className=\"menu-item\" href=\"/\" onClick={this.props.removeCookie} >\r\n            Logout\r\n          </a>\r\n        </Menu>\r\n        <div ref={ref => (this.overlay = ref)} className=\"overlay\" />\r\n            <div ref={ref => (this.prefs = ref)} className=\"md-modal\">\r\n              <SettingsPane\r\n                items={this._menu}\r\n                index=\"/settings/general\"\r\n                settings={settings}\r\n                onChange={this._settingsChanged}\r\n                onPaneLeave={this._leavePaneHandler}\r\n              >\r\n                <SettingsMenu headline=\"General Settings\" />\r\n                <SettingsContent header>\r\n                  <SettingsPage \r\n                    handler=\"/settings/general\"\r\n                  >\r\n                    \r\n                    <fieldset className=\"form-group\">\r\n                      <label htmlFor=\"generalUsername\">Username: </label>\r\n                      <div className=\"input-group\">\r\n                        <input\r\n                          type=\"text\"\r\n                          name=\"name\"\r\n                          className=\"form-control\"\r\n                          placeholder=\"Username\"\r\n                          aria-describedby=\"basic-addon1\"\r\n                          onChange={this._settingsChanged}\r\n                          defaultValue={this.props.user.name}\r\n                        />\r\n                      </div>\r\n                    </fieldset>\r\n                    <fieldset className=\"form-group\">\r\n                      <label htmlFor=\"generalMail\">E-Mail address: </label>\r\n                      <input\r\n                        type=\"text\"\r\n                        className=\"form-control\"\r\n                        name=\"email\"\r\n                        placeholder=\"E-Mail Address\"\r\n                        id=\"generalMail\"\r\n                        onChange={this._settingsChanged}\r\n                        defaultValue={details.email}\r\n                      />\r\n                    </fieldset>\r\n                    <fieldset className=\"form-group\">\r\n                      <label htmlFor=\"generalPic\">Mobile number: </label>\r\n                      <input\r\n                        type=\"text\"\r\n                        className=\"form-control\"\r\n                        name=\"phone_number\"\r\n                        placeholder=\"Mobile number\"\r\n                        id=\"generalPic\"\r\n                        onChange={this._settingsChanged}\r\n                        defaultValue={details.phone_number}\r\n                      />\r\n                    </fieldset>\r\n                  </SettingsPage>\r\n                  <SettingsPage \r\n                    handler=\"/settings/profile\"\r\n                  >\r\n                  <fieldset className=\"form-group\">\r\n                      <label htmlFor=\"profileFirstname\">Company: </label>\r\n                      <input\r\n                        type=\"text\"\r\n                        className=\"form-control\"\r\n                        name=\"mysettings.profile.firstname\"\r\n                        placeholder=\"Add a company\"\r\n                        id=\"profileFirstname\"\r\n                        onChange={this._settingsChanged}\r\n                        defaultValue={this.props.user.copmany}\r\n                      />\r\n                    </fieldset>\r\n                    <fieldset className=\"form-group\">\r\n                      <label htmlFor=\"profileFirstname\">Job Title: </label>\r\n                      <input\r\n                        type=\"text\"\r\n                        className=\"form-control\"\r\n                        name=\"mysettings.profile.firstname\"\r\n                        placeholder=\"Job title\"\r\n                        id=\"profileFirstname\"\r\n                        onChange={this._settingsChanged}\r\n                        defaultValue={settings[\"mysettings.profile.firstname\"]}\r\n                      />\r\n                    </fieldset>\r\n                    <fieldset className=\"form-group\">\r\n                      <label htmlFor=\"profileLastname\">Your passions: </label>\r\n                      <InputTags values={tags} onTags={(value) => this.setState({finalTags:value.values})} />\r\n                    </fieldset>\r\n                    <fieldset className=\"form-group\">\r\n                      <label htmlFor=\"profileBiography\">Details: </label>\r\n                      <textarea\r\n                        className=\"form-control\"\r\n                        name=\"description\"\r\n                        placeholder=\"Tell us something about yourself\"\r\n                        id=\"profileBiography\"\r\n                        onChange={this._settingsChanged}\r\n                        defaultValue={this.props.user.description}\r\n                      />\r\n                    </fieldset>\r\n                    <fieldset className=\"form-group\">\r\n                      <label htmlFor=\"profileLastname\">Anthem: </label>\r\n                      <input\r\n                        type=\"text\"\r\n                        className=\"form-control\"\r\n                        name=\"anthem\"\r\n                        placeholder=\"ex.: https://open.spotify.com/track/0vWUhCPxpJOJR5urYbZypB\"\r\n                        onChange={this._settingsChanged}\r\n                        \r\n                      />\r\n                    </fieldset>\r\n                    {this.props.user.anthem !== null &&\r\n                      <fieldset className=\"form-group\">\r\n                        <label>Current:</label>\r\n                        <div><Test songID={this.props.user.anthem}></Test></div>\r\n                      </fieldset>\r\n                    }\r\n                  </SettingsPage>\r\n                  <SettingsPage handler=\"/settings/pictures\">\r\n                    <Picture_upload ref={this.picupload} saved={this.state.tocompsave} images={profilePath} user={this.props.user}></Picture_upload>\r\n                  </SettingsPage>\r\n\r\n                  <SettingsPage \r\n                    handler=\"/settings/search\"\r\n                  >\r\n                  <fieldset className=\"form-group\">\r\n                    <label>Looking for:</label>\r\n                      <Select\r\n                        value={lookingFor}\r\n                        placeholder={lookingFor}\r\n                        options={options}\r\n                        onChange={value => {\r\n                          this.setState({ lookingFor : value });\r\n                          //this._settingsChanged();\r\n                        }} \r\n                      />\r\n                    </fieldset>\r\n                    <fieldset className=\"form-group\">\r\n                      <label>Max distance:</label><br /><br />\r\n                      <InputRange\r\n                        maxValue={150}\r\n                        minValue={0}\r\n                        formatLabel={value => `${value} km`}\r\n                        value={distanceValue}\r\n                        onChange={value => {\r\n                          this.setState({ distanceValue : value });\r\n                          //this._settingsChanged();\r\n                        }} \r\n                      />\r\n                    </fieldset><br />\r\n                    <fieldset className=\"form-group\">\r\n                      <label>Age range:</label><br /><br />\r\n                      <InputRange\r\n                        maxValue={100}\r\n                        minValue={18}\r\n                        value={ageValue}\r\n                        onChange={value => {\r\n                          this.setState({ ageValue : value });\r\n                          //this._settingsChanged();\r\n                        }} \r\n                      />\r\n                    </fieldset><br />\r\n                    <fieldset className=\"form-group\">\r\n                      <input \r\n                        type=\"checkbox\" \r\n                        id=\"status\" \r\n                        name=\"status\" \r\n                        value=\"true\"\r\n                        defaultChecked={searchData.status}\r\n                        onChange={this._settingsChanged} \r\n                      />\r\n                      <label for=\"status\">Show me on TindR</label><br />\r\n                    </fieldset>\r\n                    <fieldset className=\"form-group\">\r\n                      <input \r\n                        type=\"checkbox\" \r\n                        id=\"global\" \r\n                        name=\"global\" \r\n                        value=\"true\"\r\n                        defaultChecked={searchData.global}\r\n                        onChange={this._settingsChanged}\r\n                      />\r\n                      <label for=\"global\">Global mode</label><br />\r\n                    </fieldset>\r\n                  </SettingsPage>\r\n\r\n                </SettingsContent>\r\n              </SettingsPane>\r\n            </div>\r\n      </>\r\n    )\r\n  }\r\n}",["63","64"],"D:\\Gyakran hasznalt\\Projects\\Codecool\\PHP\\TindR\\tindr-react\\src\\index.js",[],["65","66"],"D:\\Gyakran hasznalt\\Projects\\Codecool\\PHP\\TindR\\tindr-react\\src\\components\\Recommendations.js",["67","68","69","70"],"import React, {Component} from 'react';\r\nimport { Helmet } from 'react-helmet';\r\nimport axios from 'axios';\r\nimport moment from \"moment\";\r\nimport TinderCard from 'react-tinder-card';\r\n\r\nclass Recommendations extends Component {\r\n    constructor() {\r\n      super();\r\n\r\n      this.state = {\r\n          recommendations: [],\r\n          pictures: [],\r\n          currentPictureIndex: 0,\r\n          isLoading: true,\r\n          showProfile: false,\r\n          current: {\r\n              index: undefined,\r\n              user: undefined\r\n          }\r\n      }\r\n\r\n      this.getRecommendations = this.getRecommendations.bind(this);\r\n      this.getNextProfile = this.getNextProfile.bind(this);\r\n      this.getCurrentData = this.getCurrentData.bind(this);\r\n      this.handleLike = this.handleLike.bind(this);\r\n      this.handleDislike = this.handleDislike.bind(this);\r\n      this.handleKeyDown = this.handleKeyDown.bind(this);\r\n      this.setNextPicture = this.setNextPicture.bind(this);\r\n      this.setPreviousPicture = this.setPreviousPicture.bind(this);\r\n      this.showProfile = this.showProfile.bind(this);\r\n      this.ageCalculation = this.ageCalculation.bind(this);\r\n      this.getCurrentPictures = this.getCurrentPictures.bind(this);\r\n\r\n      this.onCardLeftScreen = this.onCardLeftScreen.bind(this);\r\n      this.onSwipe = this.onSwipe.bind(this);\r\n    }\r\n\r\n    async componentDidMount() {\r\n        await this.getRecommendations();\r\n        await this.getCurrentPictures();\r\n    }\r\n\r\n    async getRecommendations() {\r\n        await axios.get(`http://${process.env.REACT_APP_IP}:8000/api/recommendations/${this.props.userID}`)\r\n        .then(response => {\r\n            let updCurrent = {\r\n                index: 0,\r\n                user: response.data.length === undefined ? response.data : response.data[0]\r\n            }\r\n\r\n            this.setState({\r\n                recommendations : response.data,\r\n                current : updCurrent\r\n            });\r\n        })\r\n    }\r\n\r\n   async getCurrentPictures() {\r\n       const { current } = this.state;\r\n\r\n        await axios.get(`http://${process.env.REACT_APP_IP}:8000/api/pictures/${current.user.id}`)\r\n            .then(response => {\r\n                Promise.all(response.data.map(p => {\r\n                    this.setState({\r\n                        pictures: p,\r\n                        isLoading: false\r\n                    });\r\n                }))\r\n            });\r\n   }\r\n\r\n    async getNextProfile() {\r\n        const { recommendations, current } = this.state;\r\n        console.log(recommendations[current.index + 1])\r\n\r\n        if (recommendations[current.index + 1] !== undefined) {\r\n            let updCurrent = {\r\n                index: current.index + 1,\r\n                user: recommendations[current.index + 1]\r\n            }\r\n            await this.setState({\r\n                current : updCurrent,\r\n                isLoading : true\r\n            })\r\n            this.getCurrentPictures();\r\n        }\r\n        else {\r\n            this.setState({\r\n                current : {\r\n                    index: 0,\r\n                    user: undefined\r\n                },\r\n                isLoading : false\r\n            })\r\n        }\r\n    }\r\n\r\n    setNextPicture() {\r\n        const { currentPictureIndex, pictures } = this.state;\r\n\r\n        const max = pictures.length -1;\r\n        const next = currentPictureIndex + 1;\r\n        \r\n        if (next <= max)\r\n            this.setState({currentPictureIndex: next})\r\n        else\r\n            this.setState({currentPictureIndex: 0});\r\n    }\r\n\r\n    setPreviousPicture() {\r\n        const { currentPictureIndex, pictures } = this.state;\r\n\r\n        const max = pictures.length -1;\r\n        const previous = currentPictureIndex - 1;\r\n\r\n        if (previous < 0) \r\n            this.setState({currentPictureIndex : max});\r\n        else\r\n            this.setState({currentPictureIndex : previous});\r\n    }\r\n\r\n    showProfile() {\r\n        const { current, showProfile } = this.state;\r\n        const user = current.user;\r\n\r\n        if(showProfile) {\r\n            return (\r\n                <>\r\n                    <link rel=\"stylesheet\" href=\"https://use.fontawesome.com/releases/v5.15.1/css/all.css\" integrity=\"sha384-vp86vTRFVJgpjF9jiIGPEEqYqlDwgyBgEF109VFjmqGmIY/Y4HV4d3Gp2irVfcrp\" crossorigin=\"anonymous\"></link>\r\n                    \r\n                    <p>\r\n                        <span className=\"fa fa-info-circle\" /> \r\n                        Description: {user.description !== null ? user.description : \"N/A\"}\r\n                    </p>\r\n                    <p>Birthdate: {user.birthdate !== null ? moment(user.birthdate).format('MMMM Do YYYY') : \"N/A\"}</p>\r\n                    <p>School: {user.school !== null ? user.school : \"N/A\"}</p>\r\n                    <p>Works at: {user.company !== null ? user.company : \"N/A\"}</p>\r\n                    <p>Position: {user.job_title !== null ? user.job_title : \"N/A\"}</p>\r\n                    <p>Gender: {user.gender !== null ? user.gender : \"N/A\"}</p>\r\n                    <p>Passions: {user.passion !== null ? user.passion : \"N/A\"}</p>\r\n                    <p>Sexual Orientation: {user.sexual_orientation !== null ? user.sexual_orientation : \"N/A\"}</p>\r\n\r\n                    {user.anthem !== null &&\r\n                        <iframe width=\"560\" height=\"315\" \r\n                                src={`https://www.youtube.com/embed/${user.anthem}`}\r\n                                frameborder=\"0\" \r\n                                allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" \r\n                                allowfullscreen\r\n                            >\r\n                        </iframe>\r\n                    }\r\n                </>\r\n            );\r\n        }\r\n    }\r\n\r\n    ageCalculation(date) {\r\n        const now = new Date();\r\n        const birthdate = new Date(date);\r\n\r\n        let diff = now.getTime() - birthdate.getTime();\r\n        return Math.floor(diff / (1000 * 60 * 60 * 24 * 365.25));\r\n    }\r\n\r\n    getCurrentData() {\r\n        const { current, pictures, currentPictureIndex } = this.state;\r\n\r\n        if (current.user !== undefined) {\r\n            const route = pictures.length === undefined ? pictures.route : pictures[currentPictureIndex].route;\r\n            return(\r\n                <>\r\n                    <img src={route} />\r\n\r\n                    <div className=\"mx-auto my-0 text-red\">\r\n                        <button onClick={this.handleDislike}>Dislike</button>\r\n                        <button onClick={this.handleLike}>Like</button>\r\n\r\n                        <h1>{current.user.name} {this.ageCalculation(current.user.birthdate)}</h1>\r\n                    </div>\r\n                    \r\n                    {this.showProfile()}\r\n                </>\r\n            );\r\n        }\r\n        else {\r\n            return(\r\n                <>\r\n                    No more!\r\n                </>\r\n            );\r\n        }\r\n    }\r\n\r\n    async handleLike() {\r\n        const { current } = this.state;\r\n\r\n        await axios.post(`http://${process.env.REACT_APP_IP}:8000/api/add_like`, {\r\n            giverid: this.props.userID,\r\n            receiverid: current.user.id\r\n        });\r\n        this.getNextProfile();\r\n    }\r\n\r\n    async handleDislike() {\r\n        const { current } = this.state;\r\n\r\n        await axios.post(`http://${process.env.REACT_APP_IP}:8000/api/add_dislike`, {\r\n            giverid: this.props.userID,\r\n            receiverid: current.user.id\r\n        });\r\n        this.getNextProfile();\r\n    }\r\n\r\n    handleKeyDown(event) {\r\n        switch(event.key) {\r\n            case \"ArrowRight\": {\r\n                this.handleLike();\r\n                break;\r\n            }\r\n            case \"ArrowLeft\": {\r\n                this.handleDislike();\r\n                break;\r\n            }\r\n            case \" \": { //Space\r\n                this.setNextPicture();\r\n                break;\r\n            }\r\n            case \"Backspace\": {\r\n                this.setPreviousPicture();\r\n                break;\r\n            }\r\n            case \"ArrowUp\": {\r\n                this.setState({showProfile : true});\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                this.setState({showProfile : false});\r\n                break;\r\n            }\r\n            default:\r\n        }\r\n    }\r\n\r\n    onSwipe(direction) {\r\n        console.log(direction)\r\n    }\r\n\r\n    onCardLeftScreen(id) {\r\n        console.log(id)\r\n    }\r\n\r\n    render() {\r\n        const { isLoading } = this.state;\r\n\r\n        if (!isLoading) {\r\n            /*\r\n            <div onKeyDown={this.handleKeyDown} tabIndex=\"0\" className=\"container d-flex h-100 align-items-center\">\r\n                        <div className=\"mx-auto text-center\">\r\n                            {this.getCurrentData()}\r\n                        </div>\r\n                    </div>\r\n            */\r\n            return (\r\n                <>\r\n                    <div onKeyDown={this.handleKeyDown} tabIndex=\"0\" className=\"container d-flex h-100 align-items-center\">\r\n                        <div className=\"mx-auto text-center\">\r\n                            <TinderCard onSwipe={this.onSwipe} onCardLeftScreen={() => this.onCardLeftScreen('fooBar')} preventSwipe={['right', 'left']}>\r\n                                {this.getCurrentData()}\r\n                            </TinderCard>\r\n                        </div>\r\n                    </div>\r\n                </>\r\n            );\r\n        }\r\n        else\r\n            return (\r\n                <h1>Loading...</h1>\r\n            );\r\n    }\r\n}\r\n\r\nexport default Recommendations;",["71","72"],"D:\\Gyakran hasznalt\\Projects\\Codecool\\PHP\\TindR\\tindr-react\\src\\components\\Asd.js",["73","74"],"D:\\Gyakran hasznalt\\Projects\\Codecool\\PHP\\TindR\\tindr-react\\src\\components\\Deck.js",["75","76","77"],"import React, { useState, useEffect } from \"react\";\r\nimport { useSprings } from \"react-spring\";\r\nimport { useGesture } from \"react-with-gesture\";\r\n\r\nimport Card from \"./Card\";\r\nimport Pulse from \"./Pulse\";\r\n\r\nimport \"./css/deck.css\";\r\nimport './css/loading_heart.css';\r\n\r\nconst to = i => ({\r\n  x: 0,\r\n  y: i * -10,\r\n  scale: 1,\r\n  rot: 0,\r\n  //rot: -10 + Math.random() * 20,\r\n  delay: i * 100\r\n});\r\nconst from = i => ({ rot: 0, scale: 1.5, y: -1000 });\r\n\r\nconst trans = (r, s) =>\r\n  `perspective(1500px) rotateX(30deg) rotateY(${r /\r\n  10}deg) rotateZ(${r}deg) scale(${s})`;\r\n\r\nfunction Deck({userID, data}) {\r\n\r\n  const [doFetch, setFetch] = useState(\"\");\r\n  const [isLoading, setLoading] = useState(false);\r\n\r\n  useEffect(() => {\r\n    async function giveVote(receiverID, direction) {\r\n      const send = {\r\n        \"receiverid\": receiverID,\r\n        \"giverid\": userID,\r\n        \"direction\": direction\r\n      }\r\n\r\n      await fetch(`${process.env.REACT_APP_IP}/api/give_vote`, {\r\n        method: 'post',\r\n        headers: {'Content-Type':'application/json'},\r\n        body: JSON.stringify(send)\r\n        })\r\n        .then(() => {\r\n          setLoading(false);\r\n        });\r\n    }\r\n    \r\n    if (doFetch !== \"\") {\r\n      const temp = doFetch.split(',');\r\n      giveVote(temp[0], temp[1]);\r\n    }\r\n  }, [doFetch])\r\n\r\n  const [gone] = useState(() => new Set());\r\n  const [cardState, set] = useSprings(data.length, i => ({\r\n    ...to(i),\r\n    from: from(i)\r\n  }));\r\n\r\n  const bind = useGesture(\r\n    ({\r\n      args: [index],\r\n      down,\r\n      delta: [xDelta],\r\n      distance,\r\n      direction: [xDir],\r\n      velocity\r\n    }) => {\r\n      const trigger = velocity > 0.2;\r\n\r\n      const dir = xDir < 0 ? -1 : 1;\r\n\r\n      let temp = \"\";\r\n\r\n      if (!down && trigger) {\r\n        gone.add(index);\r\n        temp = `${data[index].id},${dir}`;\r\n      }\r\n\r\n      set(i => {\r\n        if (index !== i) return;\r\n        const isGone = gone.has(index);\r\n\r\n        const x = isGone ? (200 + window.innerWidth) * dir : down ? xDelta : 0;\r\n\r\n        const rot = xDelta / 100 + (isGone ? dir * 10 * velocity : 0);\r\n\r\n        const scale = down ? 1.1 : 1;\r\n        return {\r\n          x,\r\n          rot,\r\n          scale,\r\n          delay: undefined,\r\n          config: { friction: 50, tension: down ? 800 : isGone ? 200 : 500 }\r\n        };\r\n      });\r\n\r\n      if(temp.length != 0) {\r\n        setLoading(true);\r\n        setFetch(temp);\r\n      }\r\n\r\n      /*\r\n      if (!down && gone.size === data.length) {\r\n        setTimeout(() => gone.clear() || set(i => to(i)), 600);\r\n      }\r\n      */\r\n    }\r\n  );\r\n\r\n  /*\r\n  if(isLoading) {\r\n    return (\r\n      <h1>fetch loading...</h1>\r\n    );\r\n  }\r\n  else */if(cardState.length != gone.size) {\r\n    return (\r\n      <>\r\n      <div className=\"background-image\"></div>\r\n      <div id='recommendations'>\r\n        {cardState.map(({ x, y, rot, scale }, i) => (\r\n          <Card\r\n            key={i}\r\n            i={i}\r\n            x={x}\r\n            y={y}\r\n            rot={rot}\r\n            scale={scale}\r\n            trans={trans}\r\n            data={data}\r\n            bind={bind}\r\n          />\r\n        ))}\r\n        {isLoading === true &&\r\n          <h1>fetch loading...</h1>\r\n        }\r\n      </div>\r\n      </>\r\n    );\r\n  }\r\n  else {\r\n    return(<Pulse userID={userID} />);\r\n  }\r\n}\r\n\r\nexport default Deck;","D:\\Gyakran hasznalt\\Projects\\Codecool\\PHP\\TindR\\tindr-react\\src\\components\\spotify_config.js",[],"D:\\Gyakran hasznalt\\Projects\\Codecool\\PHP\\TindR\\tindr-react\\src\\components\\WelcomePage.js",["78","79","80","81","82","83","84","85","86","87","88","89","90","91","92","93","94","95","96","97"],"D:\\Gyakran hasznalt\\Projects\\Codecool\\PHP\\TindR\\tindr-react\\src\\components\\ItemLoading.js",[],"D:\\Gyakran hasznalt\\Projects\\Codecool\\PHP\\TindR\\tindr-react\\src\\components\\Pulse.js",["98","99"],"import React, { Component } from 'react'\r\nimport \"./css/pulse.css\";\r\nimport axios from 'axios';\r\n\r\nimport Loading from './Loading'\r\n\r\nexport default class Pulse extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            isLoading: true,\r\n            userImg: ''\r\n        }\r\n\r\n        this.getProfilePicture = this.getProfilePicture.bind(this);\r\n    }\r\n\r\n    async getProfilePicture() {\r\n        await axios.get(`${process.env.REACT_APP_IP}/api/pictures/${this.props.userID}`)\r\n        .then(response => {\r\n            Promise.all(response.data.map(p => {\r\n                this.setState({\r\n                    isLoading : false,\r\n                    userImg : p.route\r\n                });\r\n              }))\r\n        });\r\n    }\r\n\r\n    async componentDidMount() {\r\n        await this.getProfilePicture();\r\n    }\r\n\r\n    render() {\r\n        const { isLoading, userImg } = this.state;\r\n\r\n        if(!isLoading) {\r\n            return(\r\n                <>\r\n                    <div class=\"load\">\r\n                        <img src={userImg} style={{borderRadius:\"50%\", width:\"100%\"}}></img>\r\n                    </div>\r\n                    <p>We are unable to find any potential matches right now. Try changing your preferences to see who is nearby.</p>\r\n                </>\r\n            );\r\n        }\r\n        else {\r\n            return(\r\n                <Loading />\r\n            );\r\n        }\r\n    }\r\n}","D:\\Gyakran hasznalt\\Projects\\Codecool\\PHP\\TindR\\tindr-react\\src\\components\\Loading.js",["100"],"D:\\Gyakran hasznalt\\Projects\\Codecool\\PHP\\TindR\\tindr-react\\src\\components\\Picture_upload.js",["101","102"],{"ruleId":"103","severity":1,"message":"104","line":4,"column":9,"nodeType":"105","messageId":"106","endLine":4,"endColumn":14},{"ruleId":"103","severity":1,"message":"107","line":14,"column":8,"nodeType":"105","messageId":"106","endLine":14,"endColumn":16},{"ruleId":"108","severity":1,"message":"109","line":189,"column":39,"nodeType":"110","messageId":"111","endLine":189,"endColumn":41},{"ruleId":"112","severity":1,"message":"113","line":245,"column":11,"nodeType":"114","endLine":245,"endColumn":60},{"ruleId":"112","severity":1,"message":"113","line":258,"column":11,"nodeType":"114","endLine":258,"endColumn":45},{"ruleId":"115","severity":1,"message":"116","line":380,"column":21,"nodeType":"114","endLine":380,"endColumn":132},{"ruleId":"117","replacedBy":"118"},{"ruleId":"119","replacedBy":"120"},{"ruleId":"117","replacedBy":"121"},{"ruleId":"119","replacedBy":"122"},{"ruleId":"103","severity":1,"message":"123","line":2,"column":10,"nodeType":"105","messageId":"106","endLine":2,"endColumn":16},{"ruleId":"108","severity":1,"message":"109","line":64,"column":49,"nodeType":"110","messageId":"111","endLine":64,"endColumn":51},{"ruleId":"124","severity":1,"message":"125","line":145,"column":25,"nodeType":"114","endLine":150,"endColumn":30},{"ruleId":"126","severity":1,"message":"127","line":173,"column":21,"nodeType":"114","endLine":173,"endColumn":40},{"ruleId":"117","replacedBy":"128"},{"ruleId":"119","replacedBy":"129"},{"ruleId":"103","severity":1,"message":"130","line":7,"column":8,"nodeType":"105","messageId":"106","endLine":7,"endColumn":13},{"ruleId":"103","severity":1,"message":"131","line":66,"column":28,"nodeType":"105","messageId":"106","endLine":66,"endColumn":38},{"ruleId":"132","severity":1,"message":"133","line":52,"column":6,"nodeType":"134","endLine":52,"endColumn":15,"suggestions":"135"},{"ruleId":"136","severity":1,"message":"137","line":98,"column":22,"nodeType":"138","messageId":"139","endLine":98,"endColumn":24},{"ruleId":"136","severity":1,"message":"137","line":117,"column":30,"nodeType":"138","messageId":"139","endLine":117,"endColumn":32},{"ruleId":"136","severity":1,"message":"140","line":68,"column":27,"nodeType":"138","messageId":"139","endLine":68,"endColumn":29},{"ruleId":"136","severity":1,"message":"140","line":68,"column":50,"nodeType":"138","messageId":"139","endLine":68,"endColumn":52},{"ruleId":"136","severity":1,"message":"140","line":110,"column":25,"nodeType":"138","messageId":"139","endLine":110,"endColumn":27},{"ruleId":"136","severity":1,"message":"140","line":138,"column":22,"nodeType":"138","messageId":"139","endLine":138,"endColumn":24},{"ruleId":"136","severity":1,"message":"140","line":140,"column":41,"nodeType":"138","messageId":"139","endLine":140,"endColumn":43},{"ruleId":"136","severity":1,"message":"140","line":140,"column":76,"nodeType":"138","messageId":"139","endLine":140,"endColumn":78},{"ruleId":"136","severity":1,"message":"140","line":158,"column":39,"nodeType":"138","messageId":"139","endLine":158,"endColumn":41},{"ruleId":"136","severity":1,"message":"140","line":191,"column":22,"nodeType":"138","messageId":"139","endLine":191,"endColumn":24},{"ruleId":"136","severity":1,"message":"140","line":258,"column":15,"nodeType":"138","messageId":"139","endLine":258,"endColumn":17},{"ruleId":"136","severity":1,"message":"137","line":259,"column":24,"nodeType":"138","messageId":"139","endLine":259,"endColumn":26},{"ruleId":"136","severity":1,"message":"140","line":262,"column":20,"nodeType":"138","messageId":"139","endLine":262,"endColumn":22},{"ruleId":"136","severity":1,"message":"137","line":263,"column":24,"nodeType":"138","messageId":"139","endLine":263,"endColumn":26},{"ruleId":"136","severity":1,"message":"140","line":292,"column":27,"nodeType":"138","messageId":"139","endLine":292,"endColumn":29},{"ruleId":"136","severity":1,"message":"140","line":292,"column":50,"nodeType":"138","messageId":"139","endLine":292,"endColumn":52},{"ruleId":"136","severity":1,"message":"140","line":324,"column":26,"nodeType":"138","messageId":"139","endLine":324,"endColumn":28},{"ruleId":"103","severity":1,"message":"141","line":389,"column":24,"nodeType":"105","messageId":"106","endLine":389,"endColumn":30},{"ruleId":"136","severity":1,"message":"137","line":423,"column":34,"nodeType":"138","messageId":"139","endLine":423,"endColumn":36},{"ruleId":"126","severity":1,"message":"127","line":445,"column":21,"nodeType":"114","endLine":445,"endColumn":53},{"ruleId":"112","severity":1,"message":"142","line":450,"column":17,"nodeType":"114","endLine":452,"endColumn":18},{"ruleId":"112","severity":1,"message":"142","line":463,"column":17,"nodeType":"114","endLine":465,"endColumn":18},{"ruleId":"108","severity":1,"message":"109","line":22,"column":45,"nodeType":"110","messageId":"111","endLine":22,"endColumn":47},{"ruleId":"126","severity":1,"message":"127","line":42,"column":25,"nodeType":"114","endLine":42,"endColumn":87},{"ruleId":"143","severity":1,"message":"144","line":8,"column":17,"nodeType":"145","endLine":8,"endColumn":63},{"ruleId":"126","severity":1,"message":"127","line":136,"column":25,"nodeType":"114","endLine":136,"endColumn":57},{"ruleId":"146","severity":1,"message":"147","line":148,"column":25,"nodeType":"114","endLine":148,"endColumn":158},"no-unused-vars","'Badge' is defined but never used.","Identifier","unusedVar","'Checkbox' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","react/jsx-pascal-case","Imported JSX component Picture_upload must be in PascalCase or SCREAMING_SNAKE_CASE","no-native-reassign",["148"],"no-negated-in-lhs",["149"],["148"],["149"],"'Helmet' is defined but never used.","jsx-a11y/iframe-has-title","<iframe> elements must have a unique title property.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.",["148"],["149"],"'axios' is defined but never used.","'searchData' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'userID'. Either include it or remove the dependency array.","ArrayExpression",["150"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","Expected '===' and instead saw '=='.","'accept' is assigned a value but never used.","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","no-global-assign","no-unsafe-negation",{"desc":"151","fix":"152"},"Update the dependencies array to be: [doFetch, userID]",{"range":"153","text":"154"},[1302,1311],"[doFetch, userID]"]