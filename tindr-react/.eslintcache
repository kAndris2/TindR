[{"/home/lara/TindR/tindr-react/src/index.js":"1","/home/lara/TindR/tindr-react/src/reportWebVitals.js":"2","/home/lara/TindR/tindr-react/src/App.js":"3","/home/lara/TindR/tindr-react/src/components/chat/Chat.js":"4","/home/lara/TindR/tindr-react/src/components/Asd.js":"5","/home/lara/TindR/tindr-react/src/components/Loading.js":"6","/home/lara/TindR/tindr-react/src/components/ShowTickets.js":"7","/home/lara/TindR/tindr-react/src/components/UserList.js":"8","/home/lara/TindR/tindr-react/src/components/CreateTickets.js":"9","/home/lara/TindR/tindr-react/src/components/InvalidPage.js":"10","/home/lara/TindR/tindr-react/src/components/WelcomePage.js":"11","/home/lara/TindR/tindr-react/src/components/SideBar.js":"12","/home/lara/TindR/tindr-react/src/components/DeckLoading.js":"13","/home/lara/TindR/tindr-react/src/components/Pulse.js":"14","/home/lara/TindR/tindr-react/src/components/Deck.js":"15","/home/lara/TindR/tindr-react/src/components/Table.js":"16","/home/lara/TindR/tindr-react/src/components/AdminTicketTable.js":"17","/home/lara/TindR/tindr-react/src/components/NewSide.js":"18","/home/lara/TindR/tindr-react/src/components/ItemLoading.js":"19","/home/lara/TindR/tindr-react/src/components/Test.js":"20","/home/lara/TindR/tindr-react/src/components/Picture_upload.js":"21","/home/lara/TindR/tindr-react/src/components/Card.js":"22","/home/lara/TindR/tindr-react/src/components/spotify_config.js":"23","/home/lara/TindR/tindr-react/src/components/chat/MessagesPanel.js":"24","/home/lara/TindR/tindr-react/src/components/chat/ChannelList.js":"25","/home/lara/TindR/tindr-react/src/components/chat/Message.js":"26","/home/lara/TindR/tindr-react/src/components/chat/Channel.js":"27"},{"size":597,"mtime":1607511733050,"results":"28","hashOfConfig":"29"},{"size":362,"mtime":1606467231072,"results":"30","hashOfConfig":"29"},{"size":4830,"mtime":1612871923150,"results":"31","hashOfConfig":"29"},{"size":3228,"mtime":1612876482090,"results":"32","hashOfConfig":"29"},{"size":2290,"mtime":1612255012827,"results":"33","hashOfConfig":"29"},{"size":1375,"mtime":1610534214277,"results":"34","hashOfConfig":"29"},{"size":2479,"mtime":1612255012827,"results":"35","hashOfConfig":"29"},{"size":1954,"mtime":1612255012831,"results":"36","hashOfConfig":"29"},{"size":5304,"mtime":1612255012827,"results":"37","hashOfConfig":"29"},{"size":8472,"mtime":1612871923150,"results":"38","hashOfConfig":"29"},{"size":15639,"mtime":1610627479456,"results":"39","hashOfConfig":"29"},{"size":16451,"mtime":1612255313379,"results":"40","hashOfConfig":"29"},{"size":997,"mtime":1610737902869,"results":"41","hashOfConfig":"29"},{"size":1392,"mtime":1610542624534,"results":"42","hashOfConfig":"29"},{"size":3182,"mtime":1610737902869,"results":"43","hashOfConfig":"29"},{"size":4295,"mtime":1612255012827,"results":"44","hashOfConfig":"29"},{"size":10982,"mtime":1612255012827,"results":"45","hashOfConfig":"29"},{"size":1633,"mtime":1612256278115,"results":"46","hashOfConfig":"29"},{"size":226,"mtime":1612255012827,"results":"47","hashOfConfig":"29"},{"size":3480,"mtime":1608154326294,"results":"48","hashOfConfig":"29"},{"size":5552,"mtime":1610542624534,"results":"49","hashOfConfig":"29"},{"size":3403,"mtime":1612255012827,"results":"50","hashOfConfig":"29"},{"size":424,"mtime":1608117066224,"results":"51","hashOfConfig":"29"},{"size":2684,"mtime":1612879013625,"results":"52","hashOfConfig":"29"},{"size":707,"mtime":1612879085341,"results":"53","hashOfConfig":"29"},{"size":1367,"mtime":1612880100406,"results":"54","hashOfConfig":"29"},{"size":1673,"mtime":1612878226295,"results":"55","hashOfConfig":"29"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},"rjn930",{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"58"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"58"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"58"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"58"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"58"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"58"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"58"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"58"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"58"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"58"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"58"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"58"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"58"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"58"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"58"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"118","messages":"119","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},"/home/lara/TindR/tindr-react/src/index.js",[],["126","127"],"/home/lara/TindR/tindr-react/src/reportWebVitals.js",[],"/home/lara/TindR/tindr-react/src/App.js",[],"/home/lara/TindR/tindr-react/src/components/chat/Chat.js",["128"],"import React from 'react';\nimport { ChannelList } from './ChannelList';\nimport './chat.scss';\nimport './Chat2.css';\nimport { MessagesPanel } from './MessagesPanel';\nimport socketClient from \"socket.io-client\";\nimport axios from 'axios';\nconst SERVER = process.env.REACT_APP_CHAT_SERVER_IP;\n\n\nexport class Chat extends React.Component {\n    state = {\n        channels: null,\n        socket: null,\n        channel: null\n    }\n    socket;\n    componentDidMount() {\n        this.load();\n        //this.loadChannels();\n        this.configureSocket();\n    }\n\n    configureSocket = () => {\n        var socket = socketClient(SERVER);\n        socket.on('connection', () => {\n            if (this.state.channel) {\n                this.handleChannelSelect(this.state.channel.id);\n            }\n        });\n        socket.on('channel', channel => {\n            let channels = this.state.channels;\n            channels.forEach(c => {\n                if (c.id === channel.id) {\n                    c.participants = channel.participants;\n                }\n            });\n            this.setState({ channels });\n        });\n        socket.on('message', message => {\n            let channels = this.state.channels\n            channels.forEach(c => {\n                if (c.id === message.channel_id) {\n                    if (!c.messages) {\n                        c.messages = [message];\n                    } else {\n                        c.messages.push(message);\n                    }\n                }\n            });\n            this.setState({ channels });\n        });\n        this.socket = socket;\n    }\n\n    load(){\n        axios.get(`${process.env.REACT_APP_CHAT_SERVER_IP}/getChannels/${this.props.userID}`)\n        .then(res => {\n            let temp = [];\n            res.data.channels.map(r => {\n                temp.push(r);\n            })\n            this.setState({channels : temp})\n        })\n    }\n\n    handleChannelSelect = id => {\n        let channel = this.state.channels.find(c => {\n            return c.id === id;\n        });\n        this.setState({ channel });\n        this.socket.emit('channel-join', id, ack => {\n        });\n    }\n\n    handleSendMessage = (channel_id, text) => {\n        this.socket.emit('send-message', { channel_id, text, senderName: this.props.user, id: Date.now() });\n    }\n\n    render() {\n        console.log(this.state.channels);\n\n        return (\n            <div className='container'>\n                <h3 class=\" text-center\">Messaging</h3>\n                <div class=\"messaging\">\n                    <div class=\"inbox_msg\">\n                        <div class=\"inbox_people\">\n                            <div class=\"headind_srch\">\n                                <div class=\"recent_heading\">\n                                <h4>Recent</h4>\n                                </div>\n                            </div>\n                            <ChannelList channels={this.state.channels} onSelectChannel={this.handleChannelSelect} />\n                        </div>  \n                        <MessagesPanel username={this.props.user} onSendMessage={this.handleSendMessage} channel={this.state.channel} />\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n","/home/lara/TindR/tindr-react/src/components/Asd.js",[],"/home/lara/TindR/tindr-react/src/components/Loading.js",["129"],"import React, { Component } from 'react'\n\nexport default class Loading extends Component {\n    render() {\n        return (\n            <svg \n                xmlns=\"http://www.w3.org/2000/svg\" \n                xmlns={{xlink:\"http://www.w3.org/1999/xlink\"}} \n                style={{margin:'auto', background:'#fff', display:'block', float:'left'}} \n                width=\"100px\" \n                height=\"100px\" \n                viewBox=\"0 0 100 100\" \n                preserveAspectRatio=\"xMidYMid\"\n            >\n                <path \n                    fill=\"none\" \n                    stroke=\"#e90c59\" \n                    stroke-width=\"8\" \n                    stroke-dasharray=\"42.76482137044271 42.76482137044271\" \n                    d=\"M24.3 30C11.4 30 5 43.3 5 50s6.4 20 19.3 20c19.3 0 32.1-40 51.4-40 C88.6 30 95 43.3 95 50s-6.4 20-19.3 20C56.4 70 43.6 30 24.3 30z\" \n                    stroke-linecap=\"round\" \n                    style={{transform:'scale(0.8)', transformOrigin:'50px 50px'}}\n                >\n                    <animate \n                        attributeName=\"stroke-dashoffset\" \n                        repeatCount=\"indefinite\" \n                        dur=\"1s\" \n                        keyTimes=\"0;1\" \n                        values=\"0;256.58892822265625\"\n                    ></animate>\n                </path>\n        </svg>\n        );\n    }\n}","/home/lara/TindR/tindr-react/src/components/ShowTickets.js",["130"],"import React, { Component } from 'react'\nimport axios from 'axios';\nimport moment from \"moment\";\n\nimport Loading from './Loading'\nimport AdminTicketTable from './AdminTicketTable'\n\nexport default class ShowTickets extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            isLoading: true,\n            tickets: []\n        }\n\n        this.getTickets = this.getTickets.bind(this);\n        this.formatTickets = this.formatTickets.bind(this);\n        this.updateTicket = this.updateTicket.bind(this);\n    }\n\n    getTickets() {\n        axios.get(`${process.env.REACT_APP_IP}/api/get_all_tickets`)\n        .then(response => {\n            this.setState({\n                tickets: response.data,\n                isLoading: false\n            });\n        })\n    }\n\n    formatTickets(tickets) {\n        const data = [];\n\n        tickets.map(t => {\n            data.push({\n                id: t.id,\n                date: moment(t.date).format(\"YYYY. MMM. D.\"),\n                subject: t.subject,\n                section: t.section,\n                solved: t.solved === false ? \"Open\" : \"Closed\",\n                steps: t.steps,\n                notifier_id: t.notifier_id,\n                solver_id: t.solver_id,\n            })\n        })\n        return data;\n    }\n\n    async updateTicket(ticketID, newStatus) {\n        this.setState({\n            isLoading : true,\n            tickets : []\n        });\n\n        await axios.put(`${process.env.REACT_APP_IP}/api/update_ticket/${ticketID}`, {\n            \"solved\": newStatus,\n            \"solver_id\": this.props.userID\n        })\n        .then(response => {\n            this.setState({\n                tickets: response.data,\n                isLoading: false\n            });\n        })\n    }\n\n    componentDidMount() {\n        this.getTickets();\n    }\n\n    render() {\n        const { isLoading, tickets } = this.state;\n\n        return(\n            <>\n                {isLoading !== true ?\n                    <div style={{position:\"fixed\", top:\"5%\", left:\"30%\"}}>\n                        <AdminTicketTable \n                            data={this.formatTickets(tickets)}\n                            updateTicket={this.updateTicket}\n                        />\n                    </div>\n                :\n                    <div style={{position:\"fixed\", top:\"10%\", left:\"50%\"}}>\n                        <Loading />\n                    </div>\n                }\n            </>\n        );\n    }    \n}","/home/lara/TindR/tindr-react/src/components/UserList.js",[],"/home/lara/TindR/tindr-react/src/components/CreateTickets.js",["131"],"import React, { Component } from 'react'\nimport axios from 'axios';\nimport moment from \"moment\";\n\nimport Table from './Table';\nimport Loading from './Loading'\n\nexport default class CreateTickets extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      subject: \"\",\n      section: \"\",\n      steps: \"\",\n      isLoading: true,\n      tickets: [],\n      columns: [\n          {\n              Header: \"#\",\n              accessor: \"index\",\n          },\n          {\n            Header: \"Date\",\n            accessor: \"date\",\n          },\n          {\n              Header: \"Subject\",\n              accessor: \"subject\",\n          },\n          {\n              Header: \"Section\",\n              accessor: \"section\",\n          },\n          {\n              Header: \"Status\",\n              accessor: \"solved\",\n          },\n      ]\n    }\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleChange(event) {\n    this.setState({\n        [event.target.name] : event.target.value\n    });\n  }\n\n  handleClick() {\n    const { subject, section, steps, tickets } = this.state;\n\n    this.setState({isLoading : true});\n\n    const newTicket = {\n        \"notifier_id\": this.props.userID,\n        \"subject\": subject,\n        \"section\": section,\n        \"steps\": steps\n    };\n\n    axios.post(`${process.env.REACT_APP_IP}/api/create_ticket`, newTicket)\n    .then(() => {\n        const temp = tickets;\n        temp.push(newTicket);\n\n        this.setState({\n            tickets, temp,\n            isLoading : false\n        });\n    })\n  }\n\n  getFormattedTickets(tickets) {\n    const data = [];\n    let i = 0;\n\n      tickets.map(t => {\n          i++;\n        data.push({\n            index: `${i}.`,\n            date: moment(t.date).format(\"YYYY. MMM. D.\"),\n            subject: t.subject,\n            section: t.section,\n            solved: t.solved === false ? \"Open\" : \"Closed\",\n            steps: t.steps, \n        })\n      })\n      return data;\n  }\n\n  getTickets() {\n    axios.get(`${process.env.REACT_APP_IP}/api/get_tickets/${this.props.userID}`)\n    .then(response => {\n      this.setState({\n          isLoading : false,\n          tickets : response.data\n      });\n    });\n}\n\n  componentDidMount() {\n    this.getTickets();\n  }\n\n  render() {\n    const { isLoading, tickets, columns } = this.state;\n\n      return(\n          <>\n            <div style={{position:\"fixed\", top:\"5%\", left:\"45%\"}}>\n                <h1>Report us a bug:</h1>\n\n                <fieldset className=\"form-group\">\n                    <label>Subject:</label>\n                    <div className=\"input-group\">\n                        <input\n                            type=\"text\"\n                            name=\"subject\"\n                            className=\"form-control\"\n                            placeholder=\"(eg.: I couldn't save my preferences.)\"\n                            onChange={this.handleChange}\n                            required\n                        />\n                    </div>\n                </fieldset>\n\n                <fieldset className=\"form-group\">\n                    <label>Section:</label>\n                    <div className=\"input-group\">\n                        <input\n                            type=\"text\"\n                            name=\"section\"\n                            className=\"form-control\"\n                            placeholder=\"(eg.: Settings)\"\n                            onChange={this.handleChange}\n                            required\n                        />\n                    </div>\n                </fieldset>\n\n                <fieldset className=\"form-group\">\n                    <label>Steps:</label>\n                    <div className=\"input-group\">\n                        <textarea\n                            className=\"form-control\"\n                            name=\"steps\"\n                            placeholder=\"Describe the steps leading to the error separated by commas\"\n                            maxLength=\"500\"\n                            style={{width:\"400px\", height:\"200px\", resize:\"none\"}}\n                            onChange={this.handleChange}\n                            required\n                        />\n                    </div>\n                </fieldset>\n\n                <button \n                    type=\"button\" \n                    class=\"btn btn-warning\"\n                    onClick={this.handleClick}\n                >Send</button>\n\n                {isLoading !== true ? \n                    <>\n                        <br /><br />\n                        {tickets.length !== 0 ?\n                            <>\n                                <h1>My tickets:</h1>\n                                <Table \n                                    data={this.getFormattedTickets(tickets)}\n                                    columnsData={columns}\n                                />\n                            </>\n                        :\n                            <p>You didn't sent any bug report yet!</p>\n                        }\n                    </>\n                :\n                    <div style={{margin:\"auto\", width:\"30%\"}}>\n                        <Loading />\n                    </div>\n                }\n\n            </div>\n          </>\n      );\n  }\n}","/home/lara/TindR/tindr-react/src/components/InvalidPage.js",["132"],"import React, { Component } from 'react'\n\nexport default class InvalidPage extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n        }\n    }\n\n    render() {\n        const { mode, userID } = this.props;\n\n        return(\n            <div style={{width:'50%', marginRight:'auto', marginLeft:'auto', display:'block'}}>\n                <svg \n                    xmlns={{svg:\"http://www.w3.org/2000/svg\"}} \n                    xmlns=\"http://www.w3.org/2000/svg\"\n                    version=\"1.1\" \n                    width=\"575px\" \n                    height=\"575px\" \n                    viewBox=\"-2 -2 1525 1525\"\n                >\n                    <defs />\n                    <g transform=\"translate(419.34,155.03)\">\n                        <path\n                            d=\"M 322.86,1367.5 C 127.98,1362.9 -57.878,1283.1 -196.48,1144.7 -302.25,1039.1 -375.33,903.3 -404.5,758.15 -415.01,705.84 -419.34,661.54 -419.34,606.15 -419.34,566.44 -417.82,542.14 -413.07,505.68 -398,390.11 -356,279.2 -290.36,181.65 -242.46,110.47 -184.17,48.932 -116.14,-2.2632 -11.921,-80.698 109.73,-130.86 237.86,-148.24 276.29,-153.45 300.45,-155.03 341.86,-155.03 383.27,-155.03 407.42,-153.45 445.86,-148.24 680.44,-116.42 887.42,24.226 1005.2,231.81 1057.1,323.31 1089.7,426.66 1099.8,531.65 1104.3,578.96 1104.3,633.34 1099.8,680.65 1087.7,805.71 1044.6,925.84 974.07,1030.6 887.06,1160 763.98,1258.7 618.86,1315.7 526.17,1352 424.09,1369.9 322.86,1367.5 z M 378.86,1235.7 C 416.81,1230.2 454.78,1216.5 485.21,1197.3 525.9,1171.8 561.75,1133.4 582.13,1093.5 601.27,1056.1 610.71,1019 612.87,972.81 613.9,950.68 614.21,709.94 613.22,703.9 L 612.6,700.15 341.81,700.15 71.028,700.15 70.339,707.5 C 69.96,711.54 69.874,773.31 70.148,844.75 70.679,983.12 70.876,989.15 75.847,1018.6 81.76,1053.6 95.464,1086.7 118.15,1120.6 131.49,1140.6 160.11,1170.7 177.86,1183.3 197.92,1197.6 219.55,1210 237.86,1217.7 260.17,1227.1 289.23,1234.4 315.32,1237.2 327.11,1238.4 366.59,1237.5 378.86,1235.7 z M 313.86,999.65 C 313.86,959.6 313.48,930.15 312.97,930.15 311.14,930.15 301.6,920.65 298,915.25 291.09,904.88 288.68,897.1 288.68,885.17 288.68,870.01 293.7,857.54 304.02,847.06 313.92,837.01 327.33,831.67 342.36,831.8 366.35,832 386.53,847.18 393.26,870.08 395.77,878.62 395.38,892.38 392.37,901.92 389.18,912.01 381.65,922.96 374.84,927.42 L 369.89,930.65 369.88,999.9 369.86,1069.1 341.86,1069.1 313.86,1069.1 313.86,999.65 z M 205.62,651.05 205.36,619.95 184.36,612.52 C 144.83,598.55 140.55,597.12 139.97,597.7 139.07,598.6 137.53,672.47 138.3,677.61 L 138.98,682.15 172.43,682.15 205.89,682.15 z M 545.48,642.44 C 544.91,608.63 544.4,597.15 543.45,597.15 541.37,597.15 480.79,619.03 479.1,620.4 478.11,621.19 477.95,627.88 478.36,651.03 478.65,667.32 478.88,680.95 478.87,681.31 478.86,681.67 494,682.03 512.51,682.1 L 546.16,682.23 z M 246.39,609.68 C 255.89,604.12 261.2,594.73 261.14,583.65 261.09,575.11 258.63,568.91 253.47,564.38 248.3,559.84 246.02,558.82 224.02,551.18 158.62,528.47 66.519,493.18 26.357,475.43 6.1536,466.5 0.57807,464.7 -6.6549,464.8 -15.711,464.92 -24.984,471.22 -29.963,480.65 -32.18,484.85 -32.605,486.93 -32.606,493.65 -32.608,502.89 -30.603,507.78 -24.688,512.97 -20.066,517.03 -18.821,517.65 5.1472,527.79 61.724,551.73 102.63,567.63 164.36,589.66 180.31,595.36 199.66,602.34 207.36,605.19 230.57,613.76 237.98,614.61 246.39,609.68 z M 462.41,609.76 C 525.26,588.37 617.09,553.41 681.62,526.3 710.53,514.16 715.67,509.75 716.6,496.3 717.79,478.98 703.35,462.95 687.89,464.45 682.68,464.95 668.56,470.35 632.36,485.69 591.41,503.03 533.65,524.91 461.94,550.24 437.39,558.91 432.55,561.28 427.9,566.9 414.09,583.55 427.29,612.54 448.91,613.06 450.87,613.11 456.94,611.62 462.41,609.76 z M -25.143,593.69 C -10.058,591.38 2.4458,586.5 15.357,577.86 26.089,570.67 39.627,558.72 38.071,557.8 37.678,557.57 25.644,552.42 11.328,546.35 L -14.7,535.32 -23.672,537.19 C -28.606,538.23 -34.471,539.09 -36.705,539.11 -42.466,539.16 -53.646,536.02 -68.143,530.28 -82.945,524.41 -93.719,519.59 -118.64,507.66 -126.34,503.98 -137.05,498.97 -142.44,496.54 -164.01,486.79 -170.39,481.54 -176.15,468.78 L -179.64,461.06 -205.74,448.1 C -220.1,440.98 -232.36,435.15 -232.99,435.15 -233.78,435.15 -234.14,438.1 -234.14,444.42 -234.14,484.25 -219.28,515.73 -192.13,533.41 -185.17,537.94 -152.41,555.15 -150.74,555.15 -150.48,555.15 -137.98,560.83 -122.96,567.77 -66.926,593.65 -51.568,597.72 -25.143,593.69 z M 745.62,592.2 C 757.66,589.24 770.41,584.26 796.86,572.17 809.78,566.26 825.76,559.05 832.36,556.15 859.06,544.42 880.17,532.06 888.96,523.04 902.19,509.46 911.26,491.62 915.37,471.12 916.99,463.02 918.61,435.15 917.45,435.15 917.07,435.15 904.8,440.86 890.2,447.84 868.39,458.28 863.49,460.99 862.71,463.09 859.54,471.58 852.82,480.96 846.29,485.97 844.06,487.69 834.38,492.75 824.79,497.22 815.2,501.69 798.13,509.64 786.86,514.88 751.07,531.53 730.09,539.18 720.42,539.12 718.18,539.11 712.53,538.23 707.86,537.17 L 699.36,535.23 672.86,546.29 C 658.28,552.36 646.02,557.66 645.6,558.05 645.19,558.44 647.21,561.03 650.1,563.81 666.01,579.11 686.18,589.57 707.6,593.63 717.66,595.54 734.61,594.9 745.62,592.2 z M 245.4,527.38 C 265.49,507.63 286.89,495.71 313.36,489.52 319.73,488.03 325.33,487.65 340.86,487.65 362.19,487.65 369.29,488.69 386.36,494.35 405.58,500.72 426.76,514.64 442.09,530.98 445.79,534.92 449.43,538.15 450.18,538.15 453.25,538.15 511.67,517.35 513.78,515.5 514.73,514.67 500.49,495.06 492.83,486.65 473.71,465.65 457.25,453.26 432.36,441.1 373.63,412.43 307.82,412.18 251.36,440.4 231.17,450.49 216.99,460.89 199.29,478.58 187.33,490.55 169.86,512.01 169.86,514.75 169.86,515.37 174.24,517.58 179.61,519.66 193.44,525.02 231.06,538.03 232.9,538.1 233.75,538.12 239.38,533.3 245.4,527.38 z M 659.68,458.51 C 665.7,455.99 666.13,455.57 669,449.51 673.66,439.64 680.32,433.08 691.16,427.67 707.4,419.57 786.15,384.02 792.36,381.99 799.74,379.57 809.8,379.4 819.59,381.54 L 826.81,383.11 852.34,370.67 C 866.37,363.82 877.86,357.8 877.86,357.27 877.86,356.75 875.72,354.43 873.11,352.12 856.95,337.83 833.36,327.56 810.78,324.99 798.91,323.64 784.99,325.05 774.17,328.68 764.53,331.91 674.01,372.86 662.36,379.25 632.1,395.86 615.16,425.31 612.31,466.31 611.94,471.63 611.9,476.41 612.23,476.95 612.75,477.78 625.21,472.94 659.68,458.51 z M 71.403,467.4 C 69.182,436.08 59.736,413.19 41.357,394.59 30.382,383.48 24.174,379.43 6.0854,371.56 -6.0121,366.29 -9.8601,364.55 -29.643,355.41 -49.458,346.25 -79.649,332.86 -86.143,330.35 -113.29,319.87 -146.82,323.92 -174.07,340.96 -180.88,345.21 -193.64,355.9 -193.64,357.34 -193.64,358.58 -151.64,379.86 -145.64,381.66 -142.49,382.6 -140.37,382.58 -135.64,381.56 -126.49,379.6 -115.06,379.82 -108.36,382.08 -105.22,383.15 -94.768,387.69 -85.143,392.17 -75.518,396.66 -54.644,406.17 -38.756,413.31 -22.868,420.44 -7.3434,427.7 -4.2561,429.43 3.6613,433.87 10.957,441.5 14.612,449.16 L 17.704,455.65 43.031,466.29 C 56.96,472.14 69.198,476.97 70.226,477.04 71.975,477.14 72.051,476.52 71.403,467.4 z M -144.69,451.21 C -133.32,446.01 -125.54,430.77 -128,418.51 -129.19,412.58 -132.82,406.48 -136.91,403.53 -140.29,401.08 -234.32,354.15 -235.83,354.15 -238.3,354.15 -256.99,402.51 -255.76,405.71 -255.08,407.47 -166.32,451.76 -160.95,453.01 -155.62,454.26 -149.98,453.63 -144.69,451.21 z M 854.25,448.97 C 869.87,442.1 938.98,406.99 939.49,405.67 940.7,402.51 921.99,354.15 919.56,354.15 918.96,354.15 896.32,365.18 869.24,378.65 816.13,405.08 815.15,405.71 812.72,414.65 811.06,420.76 812.12,431.96 814.88,437.49 817.54,442.81 822.9,448.58 827.36,450.91 835.27,455.06 841.44,454.61 854.25,448.97 z\"\n                            id=\"path8818\"\n                            style={{fill:'#004488', fillOpacity:'1'}} />\n                    </g>\n                </svg>\n                \n                {mode === \"not_admin\" &&\n                    <>\n                        <br />\n                        <h2>You have no permission to access this page!</h2>\n                    </>\n                }\n                {mode === \"no_page\" &&\n                    <>\n                        <br />\n                        <h2>Oops! We can't find the page you're looking for</h2>\n                        <p>You tried to request a page that doesn't exist. If you believe this to be in error, let\n                                        us know <a href={`/tickets/${userID}`}>with a ticket</a>.</p>\n                    </>\n                }\n\n            </div>\n        );\n    }\n}","/home/lara/TindR/tindr-react/src/components/WelcomePage.js",["133","134","135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152"],"import React, {Component} from 'react';\nimport { Helmet } from 'react-helmet';\nimport Swal from \"sweetalert2\";\nimport axios from 'axios';\nimport moment from \"moment\";\nimport ReactCodeInput from 'react-code-input';\nimport withReactContent from 'sweetalert2-react-content'\n\nclass WelcomePage extends Component {\n    constructor() {\n      super();\n\n      this.state = {\n        apikey:'6259e30396ee22afa1b50ed0d8468bd7be1204de',\n        appkey:'a1yqe5e4o6a6eborahy7',\n        userName: undefined,\n        email: undefined,\n        phoneNumber: undefined,\n        password: undefined,\n        confirmPass: undefined,\n        birthDate: undefined,\n        passions: undefined,\n      }\n\n      this.startLogin = this.startLogin.bind(this);\n      this.handleLogin = this.handleLogin.bind(this);\n      this.doLogin = this.doLogin.bind(this);\n      this.startRegister = this.startRegister.bind(this);\n      this.regEnterUsername = this.regEnterUsername.bind(this);\n      this.regEnterEmail = this.regEnterEmail.bind(this);\n      this.isValidEmail = this.isValidEmail.bind(this);\n      this.regEnterPhoneNumber = this.regEnterPhoneNumber.bind(this);\n      this.isValidPhoneNumber = this.isValidPhoneNumber.bind(this);\n      this.regEnterPassword = this.regEnterPassword.bind(this);\n      this.regEnterBirthdate = this.regEnterBirthdate.bind(this);\n      this.regEnterPassions = this.regEnterPassions.bind(this);\n      this.regUploadImage = this.regUploadImage.bind(this);\n      this.showDetails = this.showDetails.bind(this);\n      this.doRegistration = this.doRegistration.bind(this);\n      this.requestPin = this.requestPin.bind(this);\n      this.validatePin = this.validatePin.bind(this);\n    }\n\n    async startLogin() {\n      await this.handleLogin();\n    }\n\n    async handleLogin(error = \"\") {\n      const { value: formValues } = await Swal.fire({\n        title: 'Sign in',\n        html:\n          `${error !== \"\" ? `<p style=\"color:red\">${error}</p>\\n\\n` : \"\"}` +\n          '<p>Enter your email address</p>' +\n          '<input id=\"swal-input1\" class=\"swal2-input\" type=\"email\">' +\n          '<p>Enter your password</p>' +\n          '<input id=\"swal-input2\" class=\"swal2-input\" type=\"password\">',\n        focusConfirm: false,\n        confirmButtonText: `Sign in`,\n        preConfirm: () => {\n          return [\n            document.getElementById('swal-input1').value,\n            document.getElementById('swal-input2').value\n          ]\n        }\n      })\n\n      if (formValues !== undefined) {\n        if (formValues[0] == \"\" || formValues[1] == \"\") {\n          this.handleLogin(\"You must enter your username and your password!\");\n        }\n        else\n          this.doLogin(formValues[0], formValues[1]);\n      }\n    }\n\n    doLogin(email, password) {\n      axios.post(process.env.REACT_APP_IP+\"/api/login\", {\n        email: email,\n        password: password\n      }).then(response => {\n        if (response.data.length !== 0) {\n          this.props.setUser(response.data);\n        }\n        else\n          this.handleLogin(\"Incorrect e-mail or password!\")\n      })\n    }\n\n    async startRegister() {\n      await this.regEnterUsername();\n    }\n\n    async regEnterUsername(error = \"\") {\n      const { value: username } = await Swal.fire({\n        title: 'Registration step 1/7',\n        html:\n          '<p>Enter your username</p>' +\n          `${error !== \"\" ? `\\n\\n<p style=\"color:red\">${error}</p>` : \"\"}` +\n          '<input id=\"swal-input1\" class=\"swal2-input\" type=\"text\">',\n        focusConfirm: false,\n        confirmButtonText: `Next`,\n        preConfirm: () => {\n          return [\n            document.getElementById('swal-input1').value\n          ]\n        }\n      })\n\n      if (username !== undefined) {\n        if (username[0] == \"\")\n          this.regEnterUsername(\"You must enter your username!\");\n        else if (username[0].length <= 3)\n          this.regEnterUsername(\"Username must have at least 4 characters!\");\n        else {\n            this.setState({userName : username[0]});\n            this.regEnterEmail();\n        }\n      }\n    }\n\n    async regEnterEmail(error = \"\") {\n      const { value: email } = await Swal.fire({\n        title: 'Registration step 2/7',\n        html:\n          '<p>Enter your e-mail address</p>' +\n          `${error !== \"\" ? `\\n\\n<p style=\"color:red\">${error}</p>` : \"\"}` +\n          '<input id=\"swal-input1\" class=\"swal2-input\" type=\"email\" placeholder=\"(eg.: somebody@example.com)\">',\n        focusConfirm: false,\n        confirmButtonText: `Next`,\n        preConfirm: () => {\n          return [\n            document.getElementById('swal-input1').value\n          ]\n        }\n      })\n\n      if (email !== undefined) {\n        if (email[0] == \"\")\n          return this.regEnterEmail(\"You must enter your e-mail address!\")\n        else if (email[0].includes(\"@\") == false || email[0].includes(\".\") == false)\n          return this.regEnterEmail(\"Invalid e-mail address!\")\n      \n        const check = await this.isValidEmail(email[0])\n\n        if (check) {\n          this.setState({email : email[0]});\n          this.regEnterPhoneNumber();\n        } \n        else\n          this.regEnterEmail(\"This e-mail is already in use!\")\n      }\n    }\n\n    async isValidEmail(email) {\n      let temp = undefined;\n      await axios.get(process.env.REACT_APP_IP+\"/api/valid_email/\" + email)\n      .then(response => {\n          temp = response.data.length == 0\n      })\n      return temp;\n    }\n\n    async requestPin(number){\n      await axios.post(process.env.REACT_APP_IP+\"/api/getpin\",{\n        appkey:this.state.appkey,\n        apikey:this.state.apikey,\n        phone:number\n      })\n      .then(resp =>{\n        console.log(resp.data);\n      })\n    }\n\n    async regEnterPhoneNumber(error = \"\") {\n      const { value: phone } = await Swal.fire({\n        title: 'Registration step 3/7',\n        html:\n          '<p>Enter your phone number</p>' +\n          `${error !== \"\" ? `\\n\\n<p style=\"color:red\">${error}</p>` : \"\"}` +\n          '<input id=\"swal-input1\" class=\"swal2-input\" type=\"tel\" placeholder=\"(eg.: 30/123-4567)\">',\n        focusConfirm: false,\n        confirmButtonText: `Next`,\n        preConfirm: () => {\n          return [\n            document.getElementById('swal-input1').value\n          ]\n        }\n      })\n\n      if (phone !== undefined) {\n        if (phone[0] == \"\")\n          this.regEnterPhoneNumber(\"You must enter your phone number\");\n        else if (this.isValidPhoneNumber(phone[0])) {\n          let pinnumber = \"+36\" + phone[0].replace(\"/\",\"\").replace(\"-\",\"\");\n          this.requestPin(pinnumber);\n          this.validatePin(pinnumber);\n          this.setState({phoneNumber : phone[0]});\n          \n        } \n        else \n          this.regEnterPhoneNumber(`Invalid phone number!\\n'${phone}'`);\n      }\n    }\n    \n    async validatePin(pinnumber){\n      const mySwal = withReactContent(Swal);\n      let pin = 0;\n      let pinHtml = <ReactCodeInput type=\"number\" onChange={(e) => pin = e} fields={4}/>;\n      await mySwal.fire({\n        title: 'Enter the verification code',\n        html:pinHtml,\n        //input: 'text',\n        inputAttributes: {\n          autocapitalize: 'off'\n        },\n        showCancelButton: true,\n        confirmButtonText: 'Validate',\n        showLoaderOnConfirm: true,\n        preConfirm: (usuallytrue) => {\n          return axios.post(process.env.REACT_APP_IP+\"/api/validatecode\",{\n            appkey:this.state.appkey,\n            apikey:this.state.apikey,\n            phone:pinnumber,\n            code:pin\n          })\n          .then(response => {\n            if (response.data.status !== \"SUCCESS\") {\n              throw new Error(response.statusText)\n            }\n            return response.data;\n          })\n          .catch(error => {\n            Swal.showValidationMessage(\n              `Request failed: ${error}`\n            )\n          })\n        },\n        allowOutsideClick: () => !Swal.isLoading()\n      }).then((result) => {\n        console.log(result);\n        if (result.isConfirmed) {\n          Swal.fire({\n            confirmButtonText:'OK',\n            title: `${result.value.status}`,\n            preConfirm: (ok) =>{\n              this.regEnterPassword();\n            }\n          })\n        }\n      })\n    }\n\n    isValidPhoneNumber(phone) {\n      if (phone.length < 11 || phone.length > 11)\n        return false;\n\n      for (let i = 0; i < phone.length; i++) {\n        if (i == 2) {\n          if (phone[i] != '/')\n            return false;\n        }\n        else if (i == 6) {\n          if (phone[i] != \"-\")\n            return false;\n        }\n        else if (isNaN(phone[i]))\n            return false;\n      }\n      return true;\n    }\n\n    async regEnterPassword(error = \"\", pw = \"\") {\n      const { value: formValues } = await Swal.fire({\n        title: 'Registration step 4/7',\n        html:\n          '<p>Enter your password</p>' +\n          `${error !== \"\" ? `<p style=\"color:red\">${error}</p>` : \"\"}` +\n          `<input id=\"swal-input1\" class=\"swal2-input\" type=\"password\" value=\"${pw}\">` +\n          '<p>Confirm your password</p>' +\n          '<input id=\"swal-input2\" class=\"swal2-input\" type=\"password\">',\n        focusConfirm: false,\n        confirmButtonText: `Next`,\n        preConfirm: () => {\n          return [\n            document.getElementById('swal-input1').value,\n            document.getElementById('swal-input2').value\n          ]\n        }\n      })\n      \n      if (formValues !== undefined) {\n        if (formValues[0] == \"\" || formValues[1] == \"\")\n          this.regEnterPassword(\"You must enter your password and confirm it!\");\n        else if (formValues[0] === formValues[1]) {\n            this.setState({password : formValues[0]});\n            this.regEnterBirthdate();\n        }\n        else\n          this.regEnterPassword(\"Passwords do not match!\", formValues[0]);\n      }\n    }\n\n    async regEnterBirthdate(error = \"\") {\n      const { value: birthdate } = await Swal.fire({\n        title: 'Registration step 5/7',\n        html: \n          '<p>Enter your birthdate</p>' +\n          `${error !== \"\" ? `<p style=\"color:red\">${error}</p>` : \"\"}` +\n          '<input id=\"swal-input1\" class=\"swal2-input\" type=\"date\">',\n        focusConfirm: false,\n        confirmButtonText: `Next`,\n        preConfirm: () => {\n          return [\n            document.getElementById('swal-input1').value\n          ]\n        }\n      })\n\n      const bDate = moment(birthdate[0]).valueOf(),\n            now = moment().valueOf(),\n            minValue = 31556952000 * 18; //age 18\n\n      if (birthdate !== undefined) {\n        if (birthdate[0] == \"\")\n          this.regEnterBirthdate(\"You didn't enter your birthdate!\");\n        else if(now - bDate < minValue)\n          this.regEnterBirthdate(\"You cannot register under the age of 18!\");\n        else {\n          this.setState({birthDate : bDate});\n          this.regEnterPassions();\n        }\n      }\n    }\n\n    async regEnterPassions(error = \"\") {\n      const { value: passions } = await Swal.fire({\n        title: 'Registration step 6/7',\n        html: \n          '<p>Enter minimum 3 passions comma separated</p>' +\n          `${error !== \"\" ? `<p style=\"color:red\">${error}</p>` : \"\"}` +\n          '<input id=\"swal-input1\" class=\"swal2-input\" type=\"text\" placeholder=\"(eg.: reading,coding,walking)\">',\n        focusConfirm: false,\n        confirmButtonText: `Next`,\n        preConfirm: () => {\n          return [\n            document.getElementById('swal-input1').value\n          ]\n        }\n      })\n\n      if (passions !== undefined) {\n        if (passions[0].split(',').length >= 3) {\n          this.setState({passions : passions[0]});\n          this.regUploadImage();\n        }\n        else\n          this.regEnterPassions(\"You have to enter at least 3 passions!\")\n      }\n    }\n\n    async regUploadImage(error = \"\") {\n      const { value: file } = await Swal.fire({\n        title: 'Registration step 7/7',\n        html:\n          '<p>Upload an image of yourself</p>' +\n          `${error !== \"\" ? `<p style=\"color:red\">${error}</p>` : \"\"}`,\n        input: 'file',\n        confirmButtonText: `Upload`,\n        inputAttributes: {\n          'accept': 'image/*',\n          'aria-label': 'Upload your profile picture'\n        }\n      })\n      \n      if (file !== undefined) {\n        if (file) {\n          this.showDetails(file);\n        }\n        else\n          this.regUploadImage(\"You must upload an image!\");\n      }\n    }\n\n    showDetails(file) {\n      const reader = new FileReader()\n      const {userName, email, phoneNumber, birthDate, passions} = this.state\n\n      reader.onload = (e) => {\n        const { value: accept } = Swal.fire({\n          title: 'Your details',\n          input: 'checkbox',\n          inputValue: 0,\n          inputPlaceholder: 'I agree with the terms and conditions',\n          imageUrl: e.target.result,\n          html:\n            `<p>Name: ${userName}</p>` +\n            `<p>E-mail: ${email}</p>` +\n            `<p>Phone: ${phoneNumber}</p>` +\n            `<p>Birthdate: ${moment(birthDate).format(\"MMMM Do YYYY\")}</p>` +\n            `<p>Passions: ${passions}</p>`,\n          imageAlt: 'The uploaded picture',\n          confirmButtonText: `Register`,\n          inputValidator: (result) => {\n            return !result ? 'You need to agree with T&C' : this.doRegistration(e.target.result);\n          }\n        })\n      }\n      reader.readAsDataURL(file)\n    }\n\n    async doRegistration(file) {\n      const {userName, email, phoneNumber, password, birthDate, passions} = this.state;\n\n      await axios.post(process.env.REACT_APP_IP+\"/api/register\", {\n        name: userName,\n        email: email,\n        phone_number: phoneNumber,\n        password: password,\n        birthdate: birthDate,\n        passion: passions,\n        rawImage: file\n      }).then(response => {\n        if (response.data.length != 0) {\n          this.props.setUser(response.data);\n        }\n      })\n    }\n  \n    render() {\n      return (\n        <>\n          <Helmet>\n              <title>Tinder | Dating, Make Friends & Meet New People</title>\n          </Helmet>\n  \n          <section style={{ height:\"100vh\",\n                            background: 'linear-gradient(rgba(0,0,0,.4), rgba(0,0,0,.4)), url(\"https://tinder.com/static/build/m/b07fe760ab4714aa3e932a15657494e5.webp\")',\n                            backgroundRepeat:\"no-repeat\",\n                            backgroundSize:\"cover\"}}\n          >\n            <nav className=\"navbar navbar-light bg-transparent justify-content-between\">\n              <div className=\"flex justify-start lg:w-0 lg:flex-1\">\n                <a href=\"/\">\n                    <span className=\"sr-only\">TindR</span>\n                    <img src=\"logo.svg\" width=\"55%\"></img>\n                </a>\n              </div>   \n  \n              <div className=\"hidden md:flex items-center justify-end md:flex-1 lg:w-0\">\n                <a className=\"btn btn-success rounded-pill\"\n                    onClick={this.startLogin}\n                >\n                    LOG IN\n                </a>\n              </div>\n            </nav>\n  \n            <div className=\"container d-flex h-100 align-items-center\">\n              <div className=\"mx-auto text-center\">\n                <h1 className=\"mx-auto my-0 text-white\" style={{fontSize:\"800%\"}}>\n                  Swipe Right®\n                </h1>\n                <a  className=\"btn btn-danger js-scroll-trigger rounded-pill\"\n                    onClick={this.startRegister}\n                >\n                  CREATE ACCOUNT \n                </a>\n              </div>\n            </div>\n          </section>\n        </>\n      );\n    }\n  }\n  \n  export default WelcomePage;","/home/lara/TindR/tindr-react/src/components/SideBar.js",["153","154","155","156","157","158"],"import { slide as Menu } from 'react-burger-menu';\nimport React, { Component } from 'react';\nimport axios from 'axios';\nimport {Badge} from 'react-bootstrap';\nimport {SettingsPane, SettingsPage, SettingsContent, SettingsMenu} from 'react-settings-pane';\nimport { InputTags } from 'react-bootstrap-tagsinput';\nimport 'react-bootstrap-tagsinput/dist/index.css';\nimport InputRange from 'react-input-range';\nimport 'react-input-range/lib/css/index.css';\nimport Select from 'react-select';\nimport Picture_upload from './Picture_upload';\nimport Test from './Test';\nimport NotifyMe from 'react-notification-timeline';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Loading from './Loading'\nimport NewSide from './NewSide';\nimport ItemLoading from './ItemLoading'\n\nconst options = [\n  { value: 'Men', label: 'Men' },\n  { value: 'Women', label: 'Women' },\n  { value: 'Everyone', label: 'Everyone' },\n];\n\nexport default class SideBar extends Component {\n  constructor(props){\n    super(props);\n    this.picupload = React.createRef();\n    this.state={\n      profilePath:'',\n      isLoading: true,\n      settingsLoading: true,\n      notiLoading: true,\n      details:'',\n      formData: '',\n      tags:this.props.user.passion.split(\",\"),\n      finalTags:[],\n      tocompsave:false,\n      distanceValue: undefined,\n      ageValue: { \n        min: undefined, \n        max: undefined\n      },\n      lookingFor: undefined,\n      searchData: [],\n      notifications: []\n    }\n\n     // Save settings after close\n    \n     this._leavePaneHandler = (wasSaved, newSettings, oldSettings) => {\n    // \"wasSaved\" indicates wheather the pane was just closed or the save button was clicked.\n      if (wasSaved){\n        try {\n          this.setState({tocompsave:true});\n          this.saveToPic();\n        } catch (error) {\n          \n        }\n      }\n      if (wasSaved && (newSettings !== oldSettings)) {\n        // do something with the settings, e.g. save via ajax.\n        \n        //this.setState({formData:newSettings});\n        //https://open.spotify.com/track/0vWUhCPxpJOJR5urYbZypB\n\n        let songID='';\n        if ((newSettings.anthem) && newSettings.anthem.length > 22){\n          songID = newSettings.anthem.split(\"track/\")[1];\n        }\n        else songID = oldSettings.anthem;\n\n        axios.put(process.env.REACT_APP_IP+\"/api/update_user/\"+this.props.user.id,{\n          name:newSettings.name,\n          description:newSettings.description,\n          anthem:songID\n        });\n        axios.put(process.env.REACT_APP_IP+\"/api/update_account/\"+this.props.user.id,{\n          email:newSettings.email,\n          phone_number:newSettings.phone_number\n        });\n        axios.put(process.env.REACT_APP_IP+\"/api/update_search/\"+this.props.user.id,{\n          max_distance: newSettings.distanceValue,\n          looking_for: newSettings.lookingFor.value,\n          min_age: newSettings.ageValue.min,\n          max_age: newSettings.ageValue.max,\n          status: newSettings.status,\n          global: newSettings.global\n        }).then(() => {\n          this.props.forceRender();\n        });\n        if (this.state.finalTags.length >= 1){\n          axios.put(process.env.REACT_APP_IP+\"/api/update_user/\"+this.props.user.id,{\n            passion:newSettings.finalTags.join()\n          });\n        }\n      }\n\n      this.hidePrefs();\n    };\n\n    // React if a single setting changed\n    this._settingsChanged = ev => {\n      \n    };\n\n    // Settings menu definition\n    this._menu = [\n      {\n        title: \"General\", // Title that is displayed as text in the menu\n        url: \"/settings/general\" // Identifier (url-slug)\n      },\n      {\n        title: \"Profile\",\n        url: \"/settings/profile\"\n      },\n      {\n        title: \"Pictures\",\n        url: \"/settings/pictures\"\n      },\n      {\n        title: \"Search\",\n        url: \"/settings/search\"\n      }\n    ];\n\n  }\n\n  saveToPic(){\n    this.picupload.current.sendd();\n  }\n\n  hidePrefs() {\n    this.prefs.className = \"md-modal\";\n    this.overlay.style.visibility = \"\";\n  }\n\n  showPrefs() {\n    this.prefs.className = \"md-modal show\";\n    this.overlay.style.visibility = \"visible\";\n  }\n\n  async getProfilePictures(user) {\n    await axios.get(`${process.env.REACT_APP_IP}/api/pictures/${user.id}`)\n    .then(response => {\n      /*\n      Promise.all(response.data.map(p => {\n        this.setState({\n          profilePath: p,\n          isLoading: false\n      });\n      }))\n      */\n        this.setState({\n            profilePath: response.data,\n            isLoading: false\n        });\n    })\n  }\n\n  async getDetails(userid){\n    await axios.get(process.env.REACT_APP_IP+\"/api/details/\"+userid)\n    .then(resp => {\n      this.setState({details:resp.data})\n    })\n  }\n\n  async getSearchData() {\n    await axios.get(`${process.env.REACT_APP_IP}/api/profile_data/${this.props.user.id}`)\n    .then(response => {\n      const tempAge = {\n        min: response.data.min_age,\n        max: response.data.max_age\n      }\n  \n      this.setState({\n        searchData: response.data,\n        distanceValue: response.data.max_distance,\n        ageValue: tempAge,\n        lookingFor: response.data.looking_for,\n        settingsLoading : false\n      });\n    })\n  }\n  \n  async getNotifications() {\n    const temp = [];\n    await axios.get(`${process.env.REACT_APP_IP}/api/get_notifications/${this.props.user.id}`)\n    .then(response => {\n      Promise.all(response.data.map(p => {\n        temp.push({\n          \"update\" : p.content,\n          \"timestamp\" : p.date\n        });\n      }))\n    });\n\n    this.setState({\n      notifications : temp,\n      notiLoading : false\n    });\n  }\n\n  async componentDidMount(){\n    await this.getProfilePictures(this.props.user);\n    await this.getDetails(this.props.user.id);\n    await this.getSearchData();\n    await this.getNotifications();\n  }\n\n  render() {\n    const {\n      isLoading, profilePath, details, tags, lookingFor, ageValue, distanceValue, searchData, notifications,\n      settingsLoading, notiLoading\n    } = this.state;\n\n    let settings = this.state;\n    if(isLoading){\n      return(<Loading />)\n    }\n    \n    return (\n      <>\n        <Menu>\n          <div className=\"menu-item\" href=\"/\">\n            {this.props.user.name}\n            {<span className=\"btn pull-right\">\n              <NotifyMe\n                data={notifications}\n                storageKey='notific_key'\n                notific_key='timestamp'\n                notific_value='update'\n                heading='Notification Alerts'\n                sortedByKey={false}\n                showDate={true}\n                size={36}\n                color=\"red\"\n                //12markAsReadFn={/*() => /*yourOwnFunctionHandler()*/}\n              />\n            </span>}\n            {notiLoading === false ?\n              <span className=\"btn pull-right\">\n                <NotifyMe\n                  data={notifications}\n                  storageKey='notific_key'\n                  notific_key='timestamp'\n                  notific_value='update'\n                  heading='Notification Alerts'\n                  sortedByKey={false}\n                  showDate={true}\n                  size={36}\n                  color=\"yellow\"\n                  markAsReadFn={(e) => console.log(e)}\n                />\n            </span>\n            :\n            <ItemLoading />\n            }\n          </div>\n          <a className=\"navbar-brand text-center\" href=\"#\">\n            <img src={profilePath[0].route} height=\"80\" alt=\"\"/>\n          </a>\n          <a className=\"menu-item\" href=\"/\">\n            Home\n          </a>\n          {settingsLoading === false ? \n            <p className=\"menu-item\" style={{cursor:\"pointer\"}} onClick={this.showPrefs.bind(this)}>\n              Settings\n            </p>\n            :\n            <ItemLoading />\n          }\n          <a className=\"menu-item\" href={`/tickets/${this.props.user.id}`}>\n            Error report\n          </a>\n          <a className=\"menu-item\" href=\"/\" onClick={this.props.removeCookie} >\n            Logout\n          </a>\n        </Menu>\n        <div ref={ref => (this.overlay = ref)} className=\"overlay\" />\n            <div ref={ref => (this.prefs = ref)} className=\"md-modal\">\n              <SettingsPane\n                items={this._menu}\n                index=\"/settings/general\"\n                settings={settings}\n                onChange={this._settingsChanged}\n                onPaneLeave={this._leavePaneHandler}\n              >\n                <SettingsMenu headline=\"General Settings\" />\n                <SettingsContent header>\n                  <SettingsPage \n                    handler=\"/settings/general\"\n                  >\n                    \n                    <fieldset className=\"form-group\">\n                      <label htmlFor=\"generalUsername\">Username: </label>\n                      <div className=\"input-group\">\n                        <input\n                          type=\"text\"\n                          name=\"name\"\n                          className=\"form-control\"\n                          placeholder=\"Username\"\n                          aria-describedby=\"basic-addon1\"\n                          onChange={this._settingsChanged}\n                          defaultValue={this.props.user.name}\n                        />\n                      </div>\n                    </fieldset>\n                    <fieldset className=\"form-group\">\n                      <label htmlFor=\"generalMail\">E-Mail address: </label>\n                      <input\n                        type=\"text\"\n                        className=\"form-control\"\n                        name=\"email\"\n                        placeholder=\"E-Mail Address\"\n                        id=\"generalMail\"\n                        onChange={this._settingsChanged}\n                        defaultValue={details.email}\n                      />\n                    </fieldset>\n                    <fieldset className=\"form-group\">\n                      <label htmlFor=\"generalPic\">Mobile number: </label>\n                      <input\n                        type=\"text\"\n                        className=\"form-control\"\n                        name=\"phone_number\"\n                        placeholder=\"Mobile number\"\n                        id=\"generalPic\"\n                        onChange={this._settingsChanged}\n                        defaultValue={details.phone_number}\n                      />\n                    </fieldset>\n                  </SettingsPage>\n                  <SettingsPage \n                    handler=\"/settings/profile\"\n                  >\n                  <fieldset className=\"form-group\">\n                      <label htmlFor=\"profileFirstname\">Company: </label>\n                      <input\n                        type=\"text\"\n                        className=\"form-control\"\n                        name=\"mysettings.profile.firstname\"\n                        placeholder=\"Add a company\"\n                        id=\"profileFirstname\"\n                        onChange={this._settingsChanged}\n                        defaultValue={this.props.user.copmany}\n                      />\n                    </fieldset>\n                    <fieldset className=\"form-group\">\n                      <label htmlFor=\"profileFirstname\">Job Title: </label>\n                      <input\n                        type=\"text\"\n                        className=\"form-control\"\n                        name=\"mysettings.profile.firstname\"\n                        placeholder=\"Job title\"\n                        id=\"profileFirstname\"\n                        onChange={this._settingsChanged}\n                        defaultValue={settings[\"mysettings.profile.firstname\"]}\n                      />\n                    </fieldset>\n                    <fieldset className=\"form-group\">\n                      <label htmlFor=\"profileLastname\">Your passions: </label>\n                      <InputTags values={tags} onTags={(value) => this.setState({finalTags:value.values})} />\n                    </fieldset>\n                    <fieldset className=\"form-group\">\n                      <label htmlFor=\"profileBiography\">Details: </label>\n                      <textarea\n                        className=\"form-control\"\n                        name=\"description\"\n                        placeholder=\"Tell us something about yourself\"\n                        id=\"profileBiography\"\n                        onChange={this._settingsChanged}\n                        defaultValue={this.props.user.description}\n                      />\n                    </fieldset>\n                    <fieldset className=\"form-group\">\n                      <label htmlFor=\"profileLastname\">Anthem: </label>\n                      <input\n                        type=\"text\"\n                        className=\"form-control\"\n                        name=\"anthem\"\n                        placeholder=\"ex.: https://open.spotify.com/track/0vWUhCPxpJOJR5urYbZypB\"\n                        onChange={this._settingsChanged}\n                        \n                      />\n                    </fieldset>\n                    {this.props.user.anthem !== null &&\n                      <fieldset className=\"form-group\">\n                        <label>Current:</label>\n                        <div><Test songID={this.props.user.anthem}></Test></div>\n                      </fieldset>\n                    }\n                  </SettingsPage>\n                  <SettingsPage handler=\"/settings/pictures\">\n                    <Picture_upload ref={this.picupload} saved={this.state.tocompsave} images={profilePath} user={this.props.user}></Picture_upload>\n                  </SettingsPage>\n\n                  <SettingsPage \n                    handler=\"/settings/search\"\n                  >\n                  <fieldset className=\"form-group\">\n                    <label>Looking for:</label>\n                      <Select\n                        value={lookingFor}\n                        placeholder={lookingFor}\n                        options={options}\n                        onChange={value => {\n                          this.setState({ lookingFor : value });\n                          //this._settingsChanged();\n                        }} \n                      />\n                    </fieldset>\n                    <fieldset className=\"form-group\">\n                      <label>Max distance:</label><br /><br />\n                      <InputRange\n                        maxValue={150}\n                        minValue={0}\n                        formatLabel={value => `${value} km`}\n                        value={distanceValue}\n                        onChange={value => {\n                          this.setState({ distanceValue : value });\n                          //this._settingsChanged();\n                        }} \n                      />\n                    </fieldset><br />\n                    <fieldset className=\"form-group\">\n                      <label>Age range:</label><br /><br />\n                      <InputRange\n                        maxValue={100}\n                        minValue={18}\n                        value={ageValue}\n                        onChange={value => {\n                          this.setState({ ageValue : value });\n                          //this._settingsChanged();\n                        }} \n                      />\n                    </fieldset><br />\n                    <fieldset className=\"form-group\">\n                      <input \n                        type=\"checkbox\" \n                        id=\"status\" \n                        name=\"status\" \n                        value=\"true\"\n                        defaultChecked={searchData.status}\n                        onChange={this._settingsChanged} \n                      />\n                      <label for=\"status\">Show me on TindR</label><br />\n                    </fieldset>\n                    <fieldset className=\"form-group\">\n                      <input \n                        type=\"checkbox\" \n                        id=\"global\" \n                        name=\"global\" \n                        value=\"true\"\n                        defaultChecked={searchData.global}\n                        onChange={this._settingsChanged}\n                      />\n                      <label for=\"global\">Global mode</label><br />\n                    </fieldset>\n                  </SettingsPage>\n\n                </SettingsContent>\n              </SettingsPane>\n            </div>\n      </>\n    )\n  }\n}","/home/lara/TindR/tindr-react/src/components/DeckLoading.js",[],"/home/lara/TindR/tindr-react/src/components/Pulse.js",["159","160"],"import React, { Component } from 'react'\nimport \"./css/pulse.css\";\nimport axios from 'axios';\n\nimport Loading from './Loading'\n\nexport default class Pulse extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            isLoading: true,\n            userImg: ''\n        }\n\n        this.getProfilePicture = this.getProfilePicture.bind(this);\n    }\n\n    async getProfilePicture() {\n        await axios.get(`${process.env.REACT_APP_IP}/api/pictures/${this.props.userID}`)\n        .then(response => {\n            Promise.all(response.data.map(p => {\n                this.setState({\n                    isLoading : false,\n                    userImg : p.route\n                });\n              }))\n        });\n    }\n\n    async componentDidMount() {\n        await this.getProfilePicture();\n    }\n\n    render() {\n        const { isLoading, userImg } = this.state;\n\n        if(!isLoading) {\n            return(\n                <>\n                    <div class=\"load\">\n                        <img src={userImg} style={{borderRadius:\"50%\", width:\"100%\"}}></img>\n                    </div>\n                    <p>We are unable to find any potential matches right now. Try changing your preferences to see who is nearby.</p>\n                </>\n            );\n        }\n        else {\n            return(\n                <Loading />\n            );\n        }\n    }\n}","/home/lara/TindR/tindr-react/src/components/Deck.js",["161","162","163"],"import React, { useState, useEffect } from \"react\";\nimport { useSprings } from \"react-spring\";\nimport { useGesture } from \"react-with-gesture\";\n\nimport Card from \"./Card\";\nimport Pulse from \"./Pulse\";\n\nimport \"./css/deck.css\";\nimport './css/loading_heart.css';\n\nconst to = i => ({\n  x: 0,\n  y: i * -10,\n  scale: 1,\n  rot: 0,\n  //rot: -10 + Math.random() * 20,\n  delay: i * 100\n});\nconst from = i => ({ rot: 0, scale: 1.5, y: -1000 });\n\nconst trans = (r, s) =>\n  `perspective(1500px) rotateX(30deg) rotateY(${r /\n  10}deg) rotateZ(${r}deg) scale(${s})`;\n\nfunction Deck({userID, data}) {\n\n  const [doFetch, setFetch] = useState(\"\");\n  const [isLoading, setLoading] = useState(false);\n\n  useEffect(() => {\n    async function giveVote(receiverID, direction) {\n      const send = {\n        \"receiverid\": receiverID,\n        \"giverid\": userID,\n        \"direction\": direction\n      }\n\n      await fetch(`${process.env.REACT_APP_IP}/api/give_vote`, {\n        method: 'post',\n        headers: {'Content-Type':'application/json'},\n        body: JSON.stringify(send)\n        })\n        .then(() => {\n          setLoading(false);\n        });\n    }\n    \n    if (doFetch !== \"\") {\n      const temp = doFetch.split(',');\n      giveVote(temp[0], temp[1]);\n    }\n  }, [doFetch])\n\n  const [gone] = useState(() => new Set());\n  const [cardState, set] = useSprings(data.length, i => ({\n    ...to(i),\n    from: from(i)\n  }));\n\n  const bind = useGesture(\n    ({\n      args: [index],\n      down,\n      delta: [xDelta],\n      distance,\n      direction: [xDir],\n      velocity\n    }) => {\n      const trigger = velocity > 0.2;\n\n      const dir = xDir < 0 ? -1 : 1;\n\n      let temp = \"\";\n\n      if (!down && trigger) {\n        gone.add(index);\n        temp = `${data[index].id},${dir}`;\n      }\n\n      set(i => {\n        if (index !== i) return;\n        const isGone = gone.has(index);\n\n        const x = isGone ? (200 + window.innerWidth) * dir : down ? xDelta : 0;\n\n        const rot = xDelta / 100 + (isGone ? dir * 10 * velocity : 0);\n\n        const scale = down ? 1.1 : 1;\n        return {\n          x,\n          rot,\n          scale,\n          delay: undefined,\n          config: { friction: 50, tension: down ? 800 : isGone ? 200 : 500 }\n        };\n      });\n\n      if(temp.length != 0) {\n        setLoading(true);\n        setFetch(temp);\n      }\n\n      /*\n      if (!down && gone.size === data.length) {\n        setTimeout(() => gone.clear() || set(i => to(i)), 600);\n      }\n      */\n    }\n  );\n\n  /*\n  if(isLoading) {\n    return (\n      <h1>fetch loading...</h1>\n    );\n  }\n  else */if(cardState.length != gone.size) {\n    return (\n      <>\n      <div className=\"background-image\"></div>\n      <div id='recommendations'>\n        {cardState.map(({ x, y, rot, scale }, i) => (\n          <Card\n            key={i}\n            i={i}\n            x={x}\n            y={y}\n            rot={rot}\n            scale={scale}\n            trans={trans}\n            data={data}\n            bind={bind}\n          />\n        ))}\n        {isLoading === true &&\n          <h1>fetch loading...</h1>\n        }\n      </div>\n      </>\n    );\n  }\n  else {\n    return(<Pulse userID={userID} />);\n  }\n}\n\nexport default Deck;","/home/lara/TindR/tindr-react/src/components/Table.js",["164","165","166"],"import React from 'react'\nimport styled from 'styled-components'\nimport { useTable, useExpanded } from 'react-table'\n\nconst Styles = styled.div`\n  padding: 1rem;\n\n  table {\n    border-spacing: 0;\n    border: 1px solid black;\n\n    tr {\n      :last-child {\n        td {\n          border-bottom: 0;\n        }\n      }\n    }\n\n    th,\n    td {\n      margin: 0;\n      padding: 0.5rem;\n      border-bottom: 1px solid black;\n      border-right: 1px solid black;\n\n      :last-child {\n        border-right: 0;\n      }\n    }\n  }\n`\n\n// A simple way to support a renderRowSubComponent is to make a render prop\n// This is NOT part of the React Table API, it's merely a rendering\n// option we are creating for ourselves in our table renderer\nfunction Table({ columns: userColumns, data, renderRowSubComponent }) {\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow,\n    visibleColumns,\n    state: { expanded },\n  } = useTable(\n    {\n      columns: userColumns,\n      data,\n    },\n    useExpanded // We can useExpanded to track the expanded state\n    // for sub components too!\n  )\n\n  return (\n    <>\n      <table {...getTableProps()}>\n        <thead>\n          {headerGroups.map(headerGroup => (\n            <tr {...headerGroup.getHeaderGroupProps()}>\n              {headerGroup.headers.map(column => (\n                <th {...column.getHeaderProps()}>{column.render('Header')}</th>\n              ))}\n            </tr>\n          ))}\n        </thead>\n        <tbody {...getTableBodyProps()}>\n          {rows.map((row, i) => {\n            prepareRow(row)\n            return (\n              // Use a React.Fragment here so the table markup is still valid\n              <React.Fragment {...row.getRowProps()}>\n                <tr>\n                  {row.cells.map(cell => {\n                    return (\n                      <td {...cell.getCellProps()}>{cell.render('Cell')}</td>\n                    )\n                  })}\n                </tr>\n                {/*\n                    If the row is in an expanded state, render a row with a\n                    column that fills the entire length of the table.\n                  */}\n                {row.isExpanded ? (\n                  <tr>\n                    <td colSpan={visibleColumns.length}>\n                      {/*\n                          Inside it, call our renderRowSubComponent function. In reality,\n                          you could pass whatever you want as props to\n                          a component like this, including the entire\n                          table instance. But for this example, we'll just\n                          pass the row\n                        */}\n                      {renderRowSubComponent({ row })}\n                    </td>\n                  </tr>\n                ) : null}\n              </React.Fragment>\n            )\n          })}\n        </tbody>\n      </table>\n    </>\n  )\n}\n\nfunction App({data, columnsData}) {\n  const columns = React.useMemo(\n    () => [\n      {\n        // Make an expander cell\n        Header: () => null, // No header\n        id: 'expander', // It needs an ID\n        Cell: ({ row }) => (\n          // Use Cell to render an expander for each row.\n          // We can use the getToggleRowExpandedProps prop-getter\n          // to build the expander.\n          <span {...row.getToggleRowExpandedProps()}>\n            {row.isExpanded ? '👇' : '👉'}\n          </span>\n        ),\n      },\n    ],\n    []\n  )\n  \n  columnsData.map(c => {\n      columns.push(c)\n  })\n\n  // Create a function that will render our row sub components\n  const renderRowSubComponent = React.useCallback(\n    ({ row }) => (\n      <pre\n        style={{\n          fontSize: '10px',\n        }}\n      >\n          <p>Steps:</p>\n        {data[row.index].steps.split(\",\").map(s =>\n            <ul>\n                <li>{s}</li>\n            </ul>\n        )}\n\n      </pre>\n    ),\n    []\n  )\n\n  return (\n    <Styles>\n      <Table\n        columns={columns}\n        data={data}\n        // We added this as a prop for our table component\n        // Remember, this is not part of the React Table API,\n        // it's merely a rendering option we created for\n        // ourselves\n        renderRowSubComponent={renderRowSubComponent}\n      />\n    </Styles>\n  )\n}\n\nexport default App\n","/home/lara/TindR/tindr-react/src/components/AdminTicketTable.js",["167","168","169","170","171"],"import React from 'react'\nimport styled from 'styled-components'\nimport { useTable, useSortBy, useFilters, useColumnOrder, useExpanded } from 'react-table'\nimport { motion, AnimatePresence } from 'framer-motion'\nimport {matchSorter} from 'match-sorter'\n\nconst Styles = styled.div`\n  padding: 1rem;\n\n  table {\n    border-spacing: 0;\n    border: 1px solid black;\n\n    tr {\n      :last-child {\n        td {\n          border-bottom: 0;\n        }\n      }\n    }\n\n    th,\n    td {\n      margin: 0;\n      padding: 0.5rem;\n      border-bottom: 1px solid black;\n      border-right: 1px solid black;\n      background: white;\n\n      :last-child {\n        border-right: 0; \n      }\n    }\n  }\n`\n\n// Define a default UI for filtering\nfunction DefaultColumnFilter({\n  column: { filterValue, preFilteredRows, setFilter },\n}) {\n  const count = preFilteredRows.length\n\n  return (\n    <input\n      value={filterValue || ''}\n      onChange={e => {\n        setFilter(e.target.value || undefined) // Set undefined to remove the filter entirely\n      }}\n      placeholder={`Search ${count} records...`}\n    />\n  )\n}\n\n// This is a custom filter UI for selecting\n// a unique option from a list\nfunction SelectColumnFilter({\n  column: { filterValue, setFilter, preFilteredRows, id },\n}) {\n  // Calculate the options for filtering\n  // using the preFilteredRows\n  const options = React.useMemo(() => {\n    const options = new Set()\n    preFilteredRows.forEach(row => {\n      options.add(row.values[id])\n    })\n    return [...options.values()]\n  }, [id, preFilteredRows])\n\n  // Render a multi-select box\n  return (\n    <select\n      value={filterValue}\n      onChange={e => {\n        setFilter(e.target.value || undefined)\n      }}\n    >\n      <option value=\"\">All</option>\n      {options.map((option, i) => (\n        <option key={i} value={option}>\n          {option}\n        </option>\n      ))}\n    </select>\n  )\n}\n\n// This is a custom filter UI that uses a\n// slider to set the filter value between a column's\n// min and max values\nfunction SliderColumnFilter({\n  column: { filterValue, setFilter, preFilteredRows, id },\n}) {\n  // Calculate the min and max\n  // using the preFilteredRows\n\n  const [min, max] = React.useMemo(() => {\n    let min = preFilteredRows.length ? preFilteredRows[0].values[id] : 0\n    let max = preFilteredRows.length ? preFilteredRows[0].values[id] : 0\n    preFilteredRows.forEach(row => {\n      min = Math.min(row.values[id], min)\n      max = Math.max(row.values[id], max)\n    })\n    return [min, max]\n  }, [id, preFilteredRows])\n\n  return (\n    <>\n      <input\n        type=\"range\"\n        min={min}\n        max={max}\n        value={filterValue || min}\n        onChange={e => {\n          setFilter(parseInt(e.target.value, 10))\n        }}\n      />\n      <button onClick={() => setFilter(undefined)}>Off</button>\n    </>\n  )\n}\n\n// This is a custom UI for our 'between' or number range\n// filter. It uses two number boxes and filters rows to\n// ones that have values between the two\nfunction NumberRangeColumnFilter({\n  column: { filterValue = [], preFilteredRows, setFilter, id },\n}) {\n  const [min, max] = React.useMemo(() => {\n    let min = preFilteredRows.length ? preFilteredRows[0].values[id] : 0\n    let max = preFilteredRows.length ? preFilteredRows[0].values[id] : 0\n    preFilteredRows.forEach(row => {\n      min = Math.min(row.values[id], min)\n      max = Math.max(row.values[id], max)\n    })\n    return [min, max]\n  }, [id, preFilteredRows])\n\n  return (\n    <div\n      style={{\n        display: 'flex',\n      }}\n    >\n      <input\n        value={filterValue[0] || ''}\n        type=\"number\"\n        onChange={e => {\n          const val = e.target.value\n          setFilter((old = []) => [val ? parseInt(val, 10) : undefined, old[1]])\n        }}\n        placeholder={`Min (${min})`}\n        style={{\n          width: '70px',\n          marginRight: '0.5rem',\n        }}\n      />\n      to\n      <input\n        value={filterValue[1] || ''}\n        type=\"number\"\n        onChange={e => {\n          const val = e.target.value\n          setFilter((old = []) => [old[0], val ? parseInt(val, 10) : undefined])\n        }}\n        placeholder={`Max (${max})`}\n        style={{\n          width: '70px',\n          marginLeft: '0.5rem',\n        }}\n      />\n    </div>\n  )\n}\n\nfunction fuzzyTextFilterFn(rows, id, filterValue) {\n  return matchSorter(rows, filterValue, { keys: [row => row.values[id]] })\n}\n\n// Let the table remove the filter if the string is empty\nfuzzyTextFilterFn.autoRemove = val => !val\n\nfunction shuffle(arr) {\n  arr = [...arr]\n  const shuffled = []\n  while (arr.length) {\n    const rand = Math.floor(Math.random() * arr.length)\n    shuffled.push(arr.splice(rand, 1)[0])\n  }\n  return shuffled\n}\n\nfunction Table({ columns, data, renderRowSubComponent }) {\n  console.log(columns)\n  const defaultColumn = React.useMemo(\n    () => ({\n      // Let's set up our default Filter UI\n      Filter: DefaultColumnFilter,\n    }),\n    []\n  )\n\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    visibleColumns,\n    prepareRow,\n    setColumnOrder,\n    state: { expanded },\n  } = useTable(\n    {\n      columns,\n      data,\n      defaultColumn,\n    },\n    useColumnOrder,\n    useFilters,\n    useSortBy,\n    useExpanded\n  )\n\n  const spring = React.useMemo(\n    () => ({\n      type: 'spring',\n      damping: 50,\n      stiffness: 100,\n    }),\n    []\n  )\n\n  return (\n    <>\n      <table {...getTableProps()}>\n        <thead>\n          {headerGroups.map((headerGroup, i) => (\n            <tr {...headerGroup.getHeaderGroupProps()}>\n              {headerGroup.headers.map(column => (\n                <motion.th\n                  {...column.getHeaderProps({\n                    layoutTransition: spring,\n                    style: {\n                      minWidth: column.minWidth,\n                    },\n                  })}\n                >\n                  <div {...column.getSortByToggleProps()}>\n                    {column.render('Header')}\n                    <span>\n                      {column.isSorted\n                        ? column.isSortedDesc\n                          ? ' 🔽'\n                          : ' 🔼'\n                        : ''}\n                    </span>\n                  </div>\n                  <div>{column.canFilter ? column.render('Filter') : null}</div>\n                </motion.th>\n              ))}\n            </tr>\n          ))}\n        </thead>\n        <tbody {...getTableBodyProps()}>\n          <AnimatePresence>\n            {rows.slice(0, 10).map((row, i) => {\n              prepareRow(row)\n              return (\n                <>\n                <motion.tr\n                  {...row.getRowProps({\n                    layoutTransition: spring,\n                    exit: { opacity: 0, maxHeight: 0 },\n                  })}\n                >\n                  {row.cells.map((cell, i) => {\n                    return (\n                      <motion.td\n                        {...cell.getCellProps({\n                          layoutTransition: spring,\n                        })}\n                      >\n                        {cell.render('Cell')}\n                      </motion.td>\n                    )\n                  })}\n                </motion.tr>\n                {row.isExpanded ? (\n                  <tr>\n                    <td colSpan={visibleColumns.length}>\n                      {/*\n                          Inside it, call our renderRowSubComponent function. In reality,\n                          you could pass whatever you want as props to\n                          a component like this, including the entire\n                          table instance. But for this example, we'll just\n                          pass the row\n                        */}\n                      {renderRowSubComponent({ row })}\n                    </td>\n                  </tr>\n                ) : null}\n                </>\n              )\n            })}\n          </AnimatePresence>\n        </tbody>\n      </table>\n    </>\n  )\n}\n\n// Define a custom filter filter function!\nfunction filterGreaterThan(rows, id, filterValue) {\n  return rows.filter(row => {\n    const rowValue = row.values[id]\n    return rowValue >= filterValue\n  })\n}\n\n// This is an autoRemove method on the filter function that\n// when given the new filter value and returns true, the filter\n// will be automatically removed. Normally this is just an undefined\n// check, but here, we want to remove the filter if it's not a number\nfilterGreaterThan.autoRemove = val => typeof val !== 'number'\n\nfunction App({data, updateTicket}) {\n  const columns = React.useMemo(\n    () => [\n      {\n        // Make an expander cell\n        Header: () => null, // No header\n        id: 'expander', // It needs an ID\n        Cell: ({ row }) => (\n          // Use Cell to render an expander for each row.\n          // We can use the getToggleRowExpandedProps prop-getter\n          // to build the expander.\n          <span {...row.getToggleRowExpandedProps()}>\n            {row.isExpanded ? '👇' : '👉'}\n          </span>\n        ),\n      },\n        {\n          Header: 'ID',\n          accessor: 'id',\n          Filter: NumberRangeColumnFilter,\n          filter: \"between\"\n        },\n        {\n          Header: 'Date',\n          accessor: 'date',\n        },\n        {\n          Header: 'Subject',\n          accessor: 'subject',\n        },\n        {\n          Header: 'Section',\n          accessor: 'section',\n        },\n        {\n          Header: 'Status',\n          accessor: 'solved',\n          Filter: SelectColumnFilter,\n          filter: 'includes'\n        },\n    ],\n    []\n  )\n\n  // Create a function that will render our row sub components\n  const renderRowSubComponent = React.useCallback(\n    ({ row }) => (\n      <>\n        <pre style={{fontSize: '10px', position: 'relative'}}>\n\n          <p style={{textAlign:'center'}}><b>Notifier ID: {data[row.index].notifier_id}</b></p>\n          \n          <p>Steps:</p>\n          {data[row.index].steps.split(\",\").map(s =>\n            <ul>\n                <li>{s}</li>\n            </ul>\n          )}\n\n          <div style={{position: \"absolute\", right:\"2%\", bottom:'0%'}}>\n            <button\n              type=\"button\" \n              className={data[row.index].solved === \"Closed\" ? \"btn btn-warning\" : \"btn btn-success\"} \n              onClick={() => {\n                updateTicket(\n                  data[row.index].id, \n                  data[row.index].solved === \"Closed\" ? false : true\n                )}}\n            >\n              {data[row.index].solved === \"Closed\" ? \"Re-open\" : \"Close\"}\n            </button>\n\n            {data[row.index].solver_id !== null &&\n              <p>Solver ID: {data[row.index].solver_id}</p>\n            }\n          </div>\n\n        </pre>\n      </>\n    ),\n    []\n  )\n\n  return (\n    <Styles>\n      <Table \n        columns={columns} \n        data={data}\n        renderRowSubComponent={renderRowSubComponent}\n      />\n    </Styles>\n  )\n}\n\nexport default App\n","/home/lara/TindR/tindr-react/src/components/NewSide.js",["172","173","174"],"import React, { Component } from 'react'\nimport {Navbar, Nav, NavDropdown, Form, FormControl, Button} from 'react-bootstrap';\n\nexport default class NewSide extends Component {\n    render() {\n        return (\n            <div>\n                <Navbar bg=\"light\" expand=\"lg\">\n                    <Navbar.Brand href=\"#home\">TindR</Navbar.Brand>\n                    <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n                    <Navbar.Collapse id=\"basic-navbar-nav\">\n                        <Nav className=\"mr-auto\">\n                        <Nav.Link href=\"#home\">Home</Nav.Link>\n                        <Nav.Link href=\"#link\">Link</Nav.Link>\n                        <NavDropdown title=\"Dropdown\" id=\"basic-nav-dropdown\">\n                            <NavDropdown.Item href=\"#action/3.1\">Action</NavDropdown.Item>\n                            <NavDropdown.Item href=\"#action/3.2\">Another action</NavDropdown.Item>\n                            <NavDropdown.Item href=\"#action/3.3\">Something</NavDropdown.Item>\n                            <NavDropdown.Divider />\n                            <NavDropdown.Item href=\"#action/3.4\">Separated link</NavDropdown.Item>\n                        </NavDropdown>\n                        </Nav>\n                        {/* Search field */}\n                        {/* <Form inline>\n                            <FormControl type=\"text\" placeholder=\"Search\" className=\"mr-sm-2\" />\n                            <Button variant=\"outline-success\">Search</Button>\n                        </Form> */}\n                    </Navbar.Collapse>\n                </Navbar>\n            </div>\n        )\n    }\n}\n","/home/lara/TindR/tindr-react/src/components/ItemLoading.js",[],"/home/lara/TindR/tindr-react/src/components/Test.js",["175"],"import React, { Component } from 'react'\nimport axios from 'axios';\n//import hash from \"./hash\";\nimport { encoded,authEndpoint } from \"./spotify_config\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faPlay, faPause } from '@fortawesome/free-solid-svg-icons'\n\nexport default class Test extends Component {\n    constructor(props){\n        super(props);\n        \n        this.state={\n            baseAPI:\"https://api.spotify.com/v1/tracks/\",\n            token:'',\n            isLoading:true,\n            externalWindow:'',\n            song:'',\n            isPlaying:false\n        }\n        this.player = React.createRef();\n        \n    }\n    audio=null;\n\n    async getToken(){\n        await axios.post(authEndpoint,\"grant_type=client_credentials\",{\n            headers:{\n                \"Authorization\": \"Basic \"+encoded\n            }\n        })\n        .then(resp=>{\n            this.setState({token:resp.data.access_token});\n        })\n        await this.getSong();\n    }\n\n    async getSong(){\n        if (this.props.songID === null){\n            return console.log('%c -------ERROR-------\\n SongID was null! \\n Refusing to send request. \\nAsk the user to set an anthem \\n---------------------', 'background: #222; color: red');\n        }\n        await axios.get(this.state.baseAPI+this.props.songID,{\n            headers: {\n                'Authorization':'Bearer '+this.state.token\n            }\n        })\n        .then(resp=>{\n            this.setState({song:resp.data,isLoading:false});\n        })\n        this.audio = new Audio(this.state.song.preview_url);\n    }\n\n    playClicked(){\n        this.setState({ isPlaying: !this.state.isPlaying }, () => {\n            this.state.isPlaying ? this.audio.play() : this.audio.pause();\n        });\n    }\n\n    componentDidMount(){\n        this.getToken();\n    }\n\n    render() {\n        if (this.props.songID === null) {\n            return null;\n        }\n        if(this.state.isLoading){\n            return(\"haggyámátőteni\");\n        }\n        \n        return (\n            <>\n                <div className=\"card bg-secondary text-white\" style={{width:\"100%\"}}>\n                    <div className=\"row\">\n                        <div className=\"col-sm-2\" style={{position:\"relative\"}}>\n                            <img height=\"80\" src={this.state.song.album.images[0].url}></img>\n                        </div>\n                        <div className=\"col-sm-2\" style={{position:\"absolute\",top:\"30%\",left:\"3%\"}}>\n                            {this.state.isPlaying ? <FontAwesomeIcon onClick={this.playClicked.bind(this)} icon={faPause} size=\"2x\" /> : <FontAwesomeIcon onClick={this.playClicked.bind(this)} icon={faPlay} size=\"2x\" />}\n                        </div>\n                        <div style={{zIndex:\"-100\"}} className=\"col-sm-1\"></div>\n                        <div className=\"col-sm-8\">\n                            <div className=\"row\">\n                                <div className=\"col\">{this.state.song.artists[0].name} - {this.state.song.name}</div>\n                            </div>\n                            <div className=\"row\">\n                                <div className=\"col\"></div>\n                            </div>\n                            <div className=\"row\">\n                                <div className=\"col\"></div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </>\n        )\n    }\n}","/home/lara/TindR/tindr-react/src/components/Picture_upload.js",["176","177"],"import React, { Component } from 'react'\nimport Swal from 'sweetalert2'\nimport axios from 'axios';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faTimesCircle } from '@fortawesome/free-solid-svg-icons'\nimport { faCheck } from '@fortawesome/free-solid-svg-icons'\n\nexport default class Picture_upload extends Component {\n    constructor(props){\n        super(props);\n\n        this.state = {\n            images: this.props.images,\n            isLoading:false,\n            image_raw:'',\n            checked:true,\n            checkedid:this.props.images[0].id,\n            saved:this.props.saved\n        }\n        this.uploadFile=this.uploadFile.bind(this);\n    }\n\n    getFile = async (event) => {\n        const file = event.target.files[0];\n       \n        const base64 = await this.convertBase64(file);\n        this.setState({image_raw:base64});\n        this.showFile();\n    }\n\n    getCheckedid(){\n        return this.state.checkedid;\n    }\n\n    convertBase64 = (file) => {\n        return new Promise((resolve, reject) => {\n          const fileReader = new FileReader();\n          fileReader.readAsDataURL(file)\n          fileReader.onload = () => {\n            resolve(fileReader.result);\n          }\n          fileReader.onerror = (error) => {\n            reject(error);\n          }\n        })\n    }\n\n    showFile(){\n        const swalWithBootstrapButtons = Swal.mixin({\n            customClass: {\n              confirmButton: 'btn btn-success',\n              cancelButton: 'btn btn-danger'\n            },\n            buttonsStyling: false\n          })\n          \n          swalWithBootstrapButtons.fire({\n            title: 'Do you want to upload this?',\n            text: \"Click upload to upload you image.\",\n            imageUrl: this.state.image_raw,\n            showCancelButton: true,\n            confirmButtonText: 'Yes, upload it!',\n            cancelButtonText: 'No, cancel!',\n            reverseButtons: true\n          }).then((result) => {\n            if (result.isConfirmed) {\n                this.uploadFile();\n                swalWithBootstrapButtons.fire( \n                    'Uploaded!',\n                    'Your file has been uploaded.',\n                    'success'\n                )\n            } else if (\n              result.dismiss === Swal.DismissReason.cancel\n            ) {\n              swalWithBootstrapButtons.fire(\n                'Cancelled',\n                'No uploado happenedo 🤠',\n                'error'\n              )\n            }\n        })\n    }\n\n    uploadFile(){\n        axios.post(process.env.REACT_APP_IP+\"/api/pictures/upload/\"+this.props.user.id,{\n           img_raw:this.state.image_raw\n        });\n    }\n\n    deletePic(data){\n        if (this.state.images.length === 1){\n            Swal.fire('You must have at least 1 image uploaded!')\n        }\n        else {\n            Swal.fire({\n                title: 'Are you sure?',\n                text: \"You won't be able to revert this!\",\n                icon: 'warning',\n                showCancelButton: true,\n                confirmButtonColor: '#3085d6',\n                cancelButtonColor: '#d33',\n                confirmButtonText: 'Yes, delete it!'\n            }).then((result) => {\n                if (result.isConfirmed) {\n                    axios.post(process.env.REACT_APP_IP+\"/api/pictures/delete/\"+this.props.user.id,{\n                        del_data: data\n                    });\n                    Swal.fire(\n                    'Deleted!',\n                    'Your file has been deleted.',\n                    'success'\n                    );\n                }\n            })\n        }\n    }\n\n    chooseAsMainPic(userid,picid){\n        this.setState({ checkedid:picid});\n\n    }\n\n    sendd(){\n        axios.post(process.env.REACT_APP_IP+\"/api/pictures/setmain/\"+this.props.user.id,{\n                pic_id:this.state.checkedid\n        })\n    }\n\n    render() {\n        const {isLoading, images} = this.state;\n        if (isLoading){\n            return(\n                <div className=\"container\">\n                    <div className=\"text-center\">\n                        <img src=\"/img/Loading_svg.svg\"></img>\n                    </div>\n                </div>\n            );\n        }\n    \n        return (\n           \n            <div className=\"container-fluid\">\n                <div className=\"\">\n                {images.map((image,i) => \n                    <div key={image.id} className=\"card\" style={{width:\"8rem\", display:\"inline-block\",margin:\"1em\", border:\"none\"}}>\n                        <img className=\"card-img-top\" onClick={()=>this.chooseAsMainPic(this.props.user.id,image.id)} src={image.route} alt=\"Card image cap\"></img>\n                        <a href=\"/#\" onClick={() => this.deletePic(image.route)}><FontAwesomeIcon style={{position: \"absolute\",bottom:\"85%\",left:\"5%\"}} icon={faTimesCircle} color=\"grey\" size=\"lg\" /></a>\n                        <FontAwesomeIcon style={{display:(this.state.checked && this.state.checkedid===image.id) ? 'inline-block':'none',position: \"absolute\",bottom:\"85%\",right:\"5%\"}} icon={faCheck} color=\"green\" size=\"lg\" />\n                    </div>\n                )}\n                </div>\n                \n                <div className=\"custom-file\">\n                    <input onChange={this.getFile} id=\"customFile\" name=\"file\" type=\"file\" accept=\"image/*\" className=\"custom-file-input\" ></input>\n                    <label className=\"custom-file-label\" htmlFor=\"customFile\">Choose file</label>\n                </div>\n            </div>\n        )\n    }\n}\n","/home/lara/TindR/tindr-react/src/components/Card.js",["178","179"],"import React, { useState, useEffect } from \"react\";\nimport { string, number, array } from \"prop-types\";\nimport { animated, interpolate } from \"react-spring\";\nimport Carousel from \"nuka-carousel\";\nimport Test from './Test';\nimport { InputTags } from 'react-bootstrap-tagsinput';\nimport { useGesture } from \"react-with-gesture\";\n\nconst ageCalculation = (date) => {\n  const now = new Date();\n  const birthdate = new Date(date);\n\n  let diff = now.getTime() - birthdate.getTime();\n  return Math.floor(diff / (1000 * 60 * 60 * 24 * 365.25));\n}\n\nconst formatText = (text) => {\n  if(text !== null) {\n    let temp = \"\";\n    const charText = text.split('');\n\n    for(let i = 0; i < charText.length; i++) {\n      if(i < 86)\n        temp += charText[i];\n      else {\n        temp += \"...\";\n        break;\n      }\n    }\n    return temp;\n  }\n  else\n    return text;\n}\n\nconst Card = ({ i, x, y, rot, scale, trans, bind, data }) => {\n  const { name, age, distance, text, pics, anthem, activity } = data[i];\n\n  const [userMeta, setData] = useState([]);\n\n  const handleClick = () => {\n    userMeta.length === 0 ? setData(data[i].user) : setData([]);\n  }\n\n  const showMeta = (user) => {\n    if(user.length !== 0) {\n      return (\n        <>\n          <div>\n            {user.description !== null &&\n              <p>{user.description}</p>\n            }\n            {user.gender !== null &&\n              <p>Gender: {user.gender}</p>\n            }\n            {user.job_title !== null &&\n              <p>Current job: {user.job_title}</p>\n            }\n            {user.company !== null &&\n              <p>Company: {user.company}</p>\n            }\n            {user.school !== null &&\n              <p>School: {user.school}</p>\n            }\n            {user.sexual_orientation !== null &&\n              <p>Sexual orientation: {user.sexual_orientation}</p>\n            }\n            {anthem !== null &&\n              <div>\n                <label>Anthem:</label>\n                <Test songID={anthem}></Test>\n            </div>\n            }\n            <InputTags values={user.passion.split(\",\")} onTags={(value) => console.log(value)} />\n          </div>\n        </>\n      );\n    }\n  }\n\n  return (\n    <>\n      <animated.div\n        key={i}\n        style={{\n          transform: interpolate([x, y], (x, y) => `translate3d(${x}px,${y}px,0)`)\n        }}\n      >\n        <animated.div\n          {...bind(i)}\n          style={{\n            transform: interpolate([rot, scale], trans)\n          }}\n        >\n          <div id=\"dc\" >\n            <Carousel>\n              {pics.map((pic, index) => (\n                <img id=\"di\" src={pic} key={index} alt=\"profilePicture\" />\n              ))}\n            </Carousel>\n            <h2 onClick={handleClick}>{name},</h2>\n            <h2>{ageCalculation(age)}</h2>\n            <h6>{distance}</h6>\n            {activity === true &&\n              <h6>Recently active</h6>\n              /*\n                <svg xmlns=\"http://www.w3.org/2000/svg\" style={{height:'5%'}}>\n                    <circle cx=\"14\" cy=\"5\" r=\"5\" fill=\"green\" />\n                  </svg>\n              */\n            }\n            <br />\n            <h6>{formatText(text)}</h6>\n          </div>\n        </animated.div>\n        {showMeta(userMeta)}\n      </animated.div>\n    </>\n  );\n};\n\nCard.propTypes = {\n  name: string,\n  age: number,\n  distance: string,\n  text: string,\n  pics: array\n};\n\nexport default Card;\n","/home/lara/TindR/tindr-react/src/components/spotify_config.js",[],"/home/lara/TindR/tindr-react/src/components/chat/MessagesPanel.js",["180"],"/home/lara/TindR/tindr-react/src/components/chat/ChannelList.js",[],"/home/lara/TindR/tindr-react/src/components/chat/Message.js",[],"/home/lara/TindR/tindr-react/src/components/chat/Channel.js",[],{"ruleId":"181","replacedBy":"182"},{"ruleId":"183","replacedBy":"184"},{"ruleId":"185","severity":1,"message":"186","line":60,"column":37,"nodeType":"187","messageId":"188","endLine":60,"endColumn":39},{"ruleId":"189","severity":1,"message":"190","line":8,"column":17,"nodeType":"191","endLine":8,"endColumn":63},{"ruleId":"185","severity":1,"message":"186","line":35,"column":23,"nodeType":"187","messageId":"188","endLine":35,"endColumn":25},{"ruleId":"185","severity":1,"message":"186","line":80,"column":21,"nodeType":"187","messageId":"188","endLine":80,"endColumn":23},{"ruleId":"189","severity":1,"message":"190","line":18,"column":21,"nodeType":"191","endLine":18,"endColumn":55},{"ruleId":"192","severity":1,"message":"193","line":68,"column":27,"nodeType":"194","messageId":"195","endLine":68,"endColumn":29},{"ruleId":"192","severity":1,"message":"193","line":68,"column":50,"nodeType":"194","messageId":"195","endLine":68,"endColumn":52},{"ruleId":"192","severity":1,"message":"193","line":110,"column":25,"nodeType":"194","messageId":"195","endLine":110,"endColumn":27},{"ruleId":"192","severity":1,"message":"193","line":138,"column":22,"nodeType":"194","messageId":"195","endLine":138,"endColumn":24},{"ruleId":"192","severity":1,"message":"193","line":140,"column":41,"nodeType":"194","messageId":"195","endLine":140,"endColumn":43},{"ruleId":"192","severity":1,"message":"193","line":140,"column":76,"nodeType":"194","messageId":"195","endLine":140,"endColumn":78},{"ruleId":"192","severity":1,"message":"193","line":158,"column":39,"nodeType":"194","messageId":"195","endLine":158,"endColumn":41},{"ruleId":"192","severity":1,"message":"193","line":191,"column":22,"nodeType":"194","messageId":"195","endLine":191,"endColumn":24},{"ruleId":"192","severity":1,"message":"193","line":258,"column":15,"nodeType":"194","messageId":"195","endLine":258,"endColumn":17},{"ruleId":"192","severity":1,"message":"196","line":259,"column":24,"nodeType":"194","messageId":"195","endLine":259,"endColumn":26},{"ruleId":"192","severity":1,"message":"193","line":262,"column":20,"nodeType":"194","messageId":"195","endLine":262,"endColumn":22},{"ruleId":"192","severity":1,"message":"196","line":263,"column":24,"nodeType":"194","messageId":"195","endLine":263,"endColumn":26},{"ruleId":"192","severity":1,"message":"193","line":292,"column":27,"nodeType":"194","messageId":"195","endLine":292,"endColumn":29},{"ruleId":"192","severity":1,"message":"193","line":292,"column":50,"nodeType":"194","messageId":"195","endLine":292,"endColumn":52},{"ruleId":"192","severity":1,"message":"193","line":324,"column":26,"nodeType":"194","messageId":"195","endLine":324,"endColumn":28},{"ruleId":"197","severity":1,"message":"198","line":389,"column":24,"nodeType":"199","messageId":"200","endLine":389,"endColumn":30},{"ruleId":"192","severity":1,"message":"196","line":423,"column":34,"nodeType":"194","messageId":"195","endLine":423,"endColumn":36},{"ruleId":"201","severity":1,"message":"202","line":445,"column":21,"nodeType":"203","endLine":445,"endColumn":53},{"ruleId":"204","severity":1,"message":"205","line":450,"column":17,"nodeType":"203","endLine":452,"endColumn":18},{"ruleId":"204","severity":1,"message":"205","line":463,"column":17,"nodeType":"203","endLine":465,"endColumn":18},{"ruleId":"197","severity":1,"message":"206","line":4,"column":9,"nodeType":"199","messageId":"200","endLine":4,"endColumn":14},{"ruleId":"197","severity":1,"message":"207","line":14,"column":8,"nodeType":"199","messageId":"200","endLine":14,"endColumn":16},{"ruleId":"197","severity":1,"message":"208","line":16,"column":8,"nodeType":"199","messageId":"200","endLine":16,"endColumn":15},{"ruleId":"185","severity":1,"message":"186","line":190,"column":39,"nodeType":"187","messageId":"188","endLine":190,"endColumn":41},{"ruleId":"204","severity":1,"message":"209","line":260,"column":11,"nodeType":"203","endLine":260,"endColumn":60},{"ruleId":"210","severity":1,"message":"211","line":395,"column":21,"nodeType":"203","endLine":395,"endColumn":132},{"ruleId":"185","severity":1,"message":"186","line":22,"column":45,"nodeType":"187","messageId":"188","endLine":22,"endColumn":47},{"ruleId":"201","severity":1,"message":"202","line":42,"column":25,"nodeType":"203","endLine":42,"endColumn":87},{"ruleId":"212","severity":1,"message":"213","line":52,"column":6,"nodeType":"214","endLine":52,"endColumn":15,"suggestions":"215"},{"ruleId":"192","severity":1,"message":"196","line":98,"column":22,"nodeType":"194","messageId":"195","endLine":98,"endColumn":24},{"ruleId":"192","severity":1,"message":"196","line":117,"column":30,"nodeType":"194","messageId":"195","endLine":117,"endColumn":32},{"ruleId":"197","severity":1,"message":"216","line":45,"column":14,"nodeType":"199","messageId":"200","endLine":45,"endColumn":22},{"ruleId":"185","severity":1,"message":"186","line":127,"column":21,"nodeType":"187","messageId":"188","endLine":127,"endColumn":23},{"ruleId":"212","severity":1,"message":"217","line":148,"column":5,"nodeType":"214","endLine":148,"endColumn":7,"suggestions":"218"},{"ruleId":"197","severity":1,"message":"219","line":90,"column":10,"nodeType":"199","messageId":"200","endLine":90,"endColumn":28},{"ruleId":"197","severity":1,"message":"220","line":182,"column":10,"nodeType":"199","messageId":"200","endLine":182,"endColumn":17},{"ruleId":"197","severity":1,"message":"221","line":209,"column":5,"nodeType":"199","messageId":"200","endLine":209,"endColumn":19},{"ruleId":"197","severity":1,"message":"216","line":210,"column":14,"nodeType":"199","messageId":"200","endLine":210,"endColumn":22},{"ruleId":"212","severity":1,"message":"222","line":405,"column":5,"nodeType":"214","endLine":405,"endColumn":7,"suggestions":"223"},{"ruleId":"197","severity":1,"message":"224","line":2,"column":35,"nodeType":"199","messageId":"200","endLine":2,"endColumn":39},{"ruleId":"197","severity":1,"message":"225","line":2,"column":41,"nodeType":"199","messageId":"200","endLine":2,"endColumn":52},{"ruleId":"197","severity":1,"message":"226","line":2,"column":54,"nodeType":"199","messageId":"200","endLine":2,"endColumn":60},{"ruleId":"201","severity":1,"message":"202","line":75,"column":29,"nodeType":"203","endLine":75,"endColumn":88},{"ruleId":"201","severity":1,"message":"202","line":136,"column":25,"nodeType":"203","endLine":136,"endColumn":57},{"ruleId":"227","severity":1,"message":"228","line":148,"column":25,"nodeType":"203","endLine":148,"endColumn":158},{"ruleId":"197","severity":1,"message":"229","line":1,"column":27,"nodeType":"199","messageId":"200","endLine":1,"endColumn":36},{"ruleId":"197","severity":1,"message":"230","line":7,"column":10,"nodeType":"199","messageId":"200","endLine":7,"endColumn":20},{"ruleId":"192","severity":1,"message":"196","line":16,"column":62,"nodeType":"194","messageId":"195","endLine":16,"endColumn":64},"no-native-reassign",["231"],"no-negated-in-lhs",["232"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Expected '!==' and instead saw '!='.","no-unused-vars","'accept' is assigned a value but never used.","Identifier","unusedVar","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","'Badge' is defined but never used.","'Checkbox' is defined but never used.","'NewSide' is defined but never used.","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","react/jsx-pascal-case","Imported JSX component Picture_upload must be in PascalCase or SCREAMING_SNAKE_CASE","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'userID'. Either include it or remove the dependency array.","ArrayExpression",["233"],"'expanded' is assigned a value but never used.","React Hook React.useCallback has a missing dependency: 'data'. Either include it or remove the dependency array.",["234"],"'SliderColumnFilter' is defined but never used.","'shuffle' is defined but never used.","'setColumnOrder' is assigned a value but never used.","React Hook React.useCallback has missing dependencies: 'data' and 'updateTicket'. Either include them or remove the dependency array. If 'updateTicket' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["235"],"'Form' is defined but never used.","'FormControl' is defined but never used.","'Button' is defined but never used.","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","'useEffect' is defined but never used.","'useGesture' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"236","fix":"237"},{"desc":"238","fix":"239"},{"desc":"240","fix":"241"},"Update the dependencies array to be: [doFetch, userID]",{"range":"242","text":"243"},"Update the dependencies array to be: [data]",{"range":"244","text":"245"},"Update the dependencies array to be: [data, updateTicket]",{"range":"246","text":"247"},[1251,1260],"[doFetch, userID]",[3898,3900],"[data]",[10778,10780],"[data, updateTicket]"]