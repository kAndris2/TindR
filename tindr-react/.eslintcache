[{"D:\\Gyakran hasznalt\\Projects\\Codecool\\PHP\\TindR\\tindr-react\\src\\App.js":"1","D:\\Gyakran hasznalt\\Projects\\Codecool\\PHP\\TindR\\tindr-react\\src\\components\\SideBar.js":"2","D:\\Gyakran hasznalt\\Projects\\Codecool\\PHP\\TindR\\tindr-react\\src\\index.js":"3","D:\\Gyakran hasznalt\\Projects\\Codecool\\PHP\\TindR\\tindr-react\\src\\components\\Recommendations.js":"4","D:\\Gyakran hasznalt\\Projects\\Codecool\\PHP\\TindR\\tindr-react\\src\\components\\Asd.js":"5","D:\\Gyakran hasznalt\\Projects\\Codecool\\PHP\\TindR\\tindr-react\\src\\components\\Deck.js":"6","D:\\Gyakran hasznalt\\Projects\\Codecool\\PHP\\TindR\\tindr-react\\src\\components\\spotify_config.js":"7","D:\\Gyakran hasznalt\\Projects\\Codecool\\PHP\\TindR\\tindr-react\\src\\components\\WelcomePage.js":"8","D:\\Gyakran hasznalt\\Projects\\Codecool\\PHP\\TindR\\tindr-react\\src\\components\\ItemLoading.js":"9","D:\\Gyakran hasznalt\\Projects\\Codecool\\PHP\\TindR\\tindr-react\\src\\components\\Pulse.js":"10","D:\\Gyakran hasznalt\\Projects\\Codecool\\PHP\\TindR\\tindr-react\\src\\components\\Loading.js":"11","D:\\Gyakran hasznalt\\Projects\\Codecool\\PHP\\TindR\\tindr-react\\src\\components\\Picture_upload.js":"12","D:\\Gyakran hasznalt\\Projects\\Codecool\\PHP\\TindR\\tindr-react\\src\\components\\Card.js":"13","D:\\Gyakran hasznalt\\Projects\\Codecool\\PHP\\TindR\\tindr-react\\src\\components\\CreateTickets.js":"14","D:\\Gyakran hasznalt\\Projects\\Codecool\\PHP\\TindR\\tindr-react\\src\\components\\Test.js":"15","D:\\Gyakran hasznalt\\Projects\\Codecool\\PHP\\TindR\\tindr-react\\src\\components\\Table.js":"16","D:\\Gyakran hasznalt\\Projects\\Codecool\\PHP\\TindR\\tindr-react\\src\\components\\AdminTicketTable.js":"17","D:\\Gyakran hasznalt\\Projects\\Codecool\\PHP\\TindR\\tindr-react\\src\\components\\ShowTickets.js":"18","D:\\Gyakran hasznalt\\Projects\\Codecool\\PHP\\TindR\\tindr-react\\src\\components\\DeckLoading.js":"19","D:\\Gyakran hasznalt\\Projects\\Codecool\\PHP\\TindR\\tindr-react\\src\\reportWebVitals.js":"20"},{"size":4100,"mtime":1611747176413,"results":"21","hashOfConfig":"22"},{"size":16364,"mtime":1611313092017,"results":"23","hashOfConfig":"22"},{"size":618,"mtime":1607676433648,"results":"24","hashOfConfig":"22"},{"size":9584,"mtime":1607941601080,"results":"25","hashOfConfig":"22"},{"size":2389,"mtime":1611666264804,"results":"26","hashOfConfig":"22"},{"size":3328,"mtime":1610719218441,"results":"27","hashOfConfig":"22"},{"size":434,"mtime":1609841141150,"results":"28","hashOfConfig":"22"},{"size":16114,"mtime":1610709664633,"results":"29","hashOfConfig":"22"},{"size":235,"mtime":1611137184625,"results":"30","hashOfConfig":"22"},{"size":1445,"mtime":1610539762437,"results":"31","hashOfConfig":"22"},{"size":1409,"mtime":1610452928155,"results":"32","hashOfConfig":"22"},{"size":5714,"mtime":1610539747854,"results":"33","hashOfConfig":"22"},{"size":3533,"mtime":1611744756541,"results":"34","hashOfConfig":"22"},{"size":5244,"mtime":1611574833001,"results":"35","hashOfConfig":"22"},{"size":3576,"mtime":1609841141117,"results":"36","hashOfConfig":"22"},{"size":4461,"mtime":1611573375378,"results":"37","hashOfConfig":"22"},{"size":11108,"mtime":1611660188952,"results":"38","hashOfConfig":"22"},{"size":2485,"mtime":1611746217125,"results":"39","hashOfConfig":"22"},{"size":1022,"mtime":1610712321504,"results":"40","hashOfConfig":"22"},{"size":362,"mtime":1606466984298,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1msjh8u",{"filePath":"44","messages":"45","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"47"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"54"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"47"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","errorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"65"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"47"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"74"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"47"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"80","messages":"81","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"47"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"47"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"91","messages":"92","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\Gyakran hasznalt\\Projects\\Codecool\\PHP\\TindR\\tindr-react\\src\\App.js",[],"D:\\Gyakran hasznalt\\Projects\\Codecool\\PHP\\TindR\\tindr-react\\src\\components\\SideBar.js",["97","98","99","100","101"],"import { slide as Menu } from 'react-burger-menu';\r\nimport React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport {Badge} from 'react-bootstrap';\r\nimport {SettingsPane, SettingsPage, SettingsContent, SettingsMenu} from 'react-settings-pane';\r\nimport { InputTags } from 'react-bootstrap-tagsinput';\r\nimport 'react-bootstrap-tagsinput/dist/index.css';\r\nimport InputRange from 'react-input-range';\r\nimport 'react-input-range/lib/css/index.css';\r\nimport Select from 'react-select';\r\nimport Picture_upload from './Picture_upload';\r\nimport Test from './Test';\r\nimport NotifyMe from 'react-notification-timeline';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport Loading from './Loading'\r\nimport ItemLoading from './ItemLoading'\r\n\r\nconst options = [\r\n  { value: 'Men', label: 'Men' },\r\n  { value: 'Women', label: 'Women' },\r\n  { value: 'Everyone', label: 'Everyone' },\r\n];\r\n\r\nexport default class SideBar extends Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.picupload = React.createRef();\r\n    this.state={\r\n      profilePath:'',\r\n      isLoading: true,\r\n      settingsLoading: true,\r\n      notiLoading: true,\r\n      details:'',\r\n      formData: '',\r\n      tags:this.props.user.passion.split(\",\"),\r\n      finalTags:[],\r\n      tocompsave:false,\r\n      distanceValue: undefined,\r\n      ageValue: { \r\n        min: undefined, \r\n        max: undefined\r\n      },\r\n      lookingFor: undefined,\r\n      searchData: [],\r\n      notifications: []\r\n    }\r\n\r\n     // Save settings after close\r\n    \r\n     this._leavePaneHandler = (wasSaved, newSettings, oldSettings) => {\r\n    // \"wasSaved\" indicates wheather the pane was just closed or the save button was clicked.\r\n      if (wasSaved){\r\n        try {\r\n          this.setState({tocompsave:true});\r\n          this.saveToPic();\r\n        } catch (error) {\r\n          \r\n        }\r\n      }\r\n      if (wasSaved && (newSettings !== oldSettings)) {\r\n        // do something with the settings, e.g. save via ajax.\r\n        \r\n        //this.setState({formData:newSettings});\r\n        //https://open.spotify.com/track/0vWUhCPxpJOJR5urYbZypB\r\n\r\n        let songID='';\r\n        if ((newSettings.anthem) && newSettings.anthem.length > 22){\r\n          songID = newSettings.anthem.split(\"track/\")[1];\r\n        }\r\n        else songID = oldSettings.anthem;\r\n\r\n        axios.put(process.env.REACT_APP_IP+\"/api/update_user/\"+this.props.user.id,{\r\n          name:newSettings.name,\r\n          description:newSettings.description,\r\n          anthem:songID\r\n        });\r\n        axios.put(process.env.REACT_APP_IP+\"/api/update_account/\"+this.props.user.id,{\r\n          email:newSettings.email,\r\n          phone_number:newSettings.phone_number\r\n        });\r\n        axios.put(process.env.REACT_APP_IP+\"/api/update_search/\"+this.props.user.id,{\r\n          max_distance: newSettings.distanceValue,\r\n          looking_for: newSettings.lookingFor.value,\r\n          min_age: newSettings.ageValue.min,\r\n          max_age: newSettings.ageValue.max,\r\n          status: newSettings.status,\r\n          global: newSettings.global\r\n        }).then(() => {\r\n          this.props.forceRender();\r\n        });\r\n        if (this.state.finalTags.length >= 1){\r\n          axios.put(process.env.REACT_APP_IP+\"/api/update_user/\"+this.props.user.id,{\r\n            passion:newSettings.finalTags.join()\r\n          });\r\n        }\r\n      }\r\n\r\n      this.hidePrefs();\r\n    };\r\n\r\n    // React if a single setting changed\r\n    this._settingsChanged = ev => {\r\n      \r\n    };\r\n\r\n    // Settings menu definition\r\n    this._menu = [\r\n      {\r\n        title: \"General\", // Title that is displayed as text in the menu\r\n        url: \"/settings/general\" // Identifier (url-slug)\r\n      },\r\n      {\r\n        title: \"Profile\",\r\n        url: \"/settings/profile\"\r\n      },\r\n      {\r\n        title: \"Pictures\",\r\n        url: \"/settings/pictures\"\r\n      },\r\n      {\r\n        title: \"Search\",\r\n        url: \"/settings/search\"\r\n      }\r\n    ];\r\n\r\n  }\r\n\r\n  saveToPic(){\r\n    this.picupload.current.sendd();\r\n  }\r\n\r\n  hidePrefs() {\r\n    this.prefs.className = \"md-modal\";\r\n    this.overlay.style.visibility = \"\";\r\n  }\r\n\r\n  showPrefs() {\r\n    this.prefs.className = \"md-modal show\";\r\n    this.overlay.style.visibility = \"visible\";\r\n  }\r\n\r\n  async getProfilePictures(user) {\r\n    await axios.get(`${process.env.REACT_APP_IP}/api/pictures/${user.id}`)\r\n    .then(response => {\r\n      /*\r\n      Promise.all(response.data.map(p => {\r\n        this.setState({\r\n          profilePath: p,\r\n          isLoading: false\r\n      });\r\n      }))\r\n      */\r\n        this.setState({\r\n            profilePath: response.data,\r\n            isLoading: false\r\n        });\r\n    })\r\n  }\r\n\r\n  async getDetails(userid){\r\n    await axios.get(process.env.REACT_APP_IP+\"/api/details/\"+userid)\r\n    .then(resp => {\r\n      this.setState({details:resp.data})\r\n    })\r\n  }\r\n\r\n  async getSearchData() {\r\n    await axios.get(`${process.env.REACT_APP_IP}/api/profile_data/${this.props.user.id}`)\r\n    .then(response => {\r\n      const tempAge = {\r\n        min: response.data.min_age,\r\n        max: response.data.max_age\r\n      }\r\n  \r\n      this.setState({\r\n        searchData: response.data,\r\n        distanceValue: response.data.max_distance,\r\n        ageValue: tempAge,\r\n        lookingFor: response.data.looking_for,\r\n        settingsLoading : false\r\n      });\r\n    })\r\n  }\r\n  \r\n  async getNotifications() {\r\n    const temp = [];\r\n    await axios.get(`${process.env.REACT_APP_IP}/api/get_notifications/${this.props.user.id}`)\r\n    .then(response => {\r\n      Promise.all(response.data.map(p => {\r\n        temp.push({\r\n          \"update\" : p.content,\r\n          \"timestamp\" : p.date\r\n        });\r\n      }))\r\n    });\r\n\r\n    this.setState({\r\n      notifications : temp,\r\n      notiLoading : false\r\n    });\r\n  }\r\n\r\n  async componentDidMount(){\r\n    await this.getProfilePictures(this.props.user);\r\n    await this.getDetails(this.props.user.id);\r\n    await this.getSearchData();\r\n    await this.getNotifications();\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      isLoading, profilePath, details, tags, lookingFor, ageValue, distanceValue, searchData, notifications,\r\n      settingsLoading, notiLoading\r\n    } = this.state;\r\n\r\n    let settings = this.state;\r\n    if(isLoading){\r\n      return(<Loading />)\r\n    }\r\n    \r\n    return (\r\n      <>\r\n        <Menu>\r\n          <div className=\"menu-item\" href=\"/\">\r\n            {this.props.user.name}\r\n            {notiLoading === false ?\r\n              <span className=\"btn pull-right\">\r\n                <NotifyMe\r\n                  data={notifications}\r\n                  storageKey='notific_key'\r\n                  notific_key='timestamp'\r\n                  notific_value='update'\r\n                  heading='Notification Alerts'\r\n                  sortedByKey={false}\r\n                  showDate={true}\r\n                  size={36}\r\n                  color=\"yellow\"\r\n                  markAsReadFn={(e) => console.log(e)}\r\n                />\r\n            </span>\r\n            :\r\n            <ItemLoading />\r\n            }\r\n          </div>\r\n          <a className=\"navbar-brand text-center\" href=\"#\">\r\n            <img src={profilePath[0].route} height=\"80\" alt=\"\"/>\r\n          </a>\r\n          <a className=\"menu-item\" href=\"/\">\r\n            Home\r\n          </a>\r\n          {settingsLoading === false ? \r\n            <p className=\"menu-item\" style={{cursor:\"pointer\"}} onClick={this.showPrefs.bind(this)}>\r\n              Settings\r\n            </p>\r\n            :\r\n            <ItemLoading />\r\n          }\r\n          <a className=\"menu-item\" href={`/tickets/${this.props.user.id}`}>\r\n            Error report\r\n          </a>\r\n          <a className=\"menu-item\" href=\"/\" onClick={this.props.removeCookie} >\r\n            Logout\r\n          </a>\r\n        </Menu>\r\n        <div ref={ref => (this.overlay = ref)} className=\"overlay\" />\r\n            <div ref={ref => (this.prefs = ref)} className=\"md-modal\">\r\n              <SettingsPane\r\n                items={this._menu}\r\n                index=\"/settings/general\"\r\n                settings={settings}\r\n                onChange={this._settingsChanged}\r\n                onPaneLeave={this._leavePaneHandler}\r\n              >\r\n                <SettingsMenu headline=\"General Settings\" />\r\n                <SettingsContent header>\r\n                  <SettingsPage \r\n                    handler=\"/settings/general\"\r\n                  >\r\n                    \r\n                    <fieldset className=\"form-group\">\r\n                      <label htmlFor=\"generalUsername\">Username: </label>\r\n                      <div className=\"input-group\">\r\n                        <input\r\n                          type=\"text\"\r\n                          name=\"name\"\r\n                          className=\"form-control\"\r\n                          placeholder=\"Username\"\r\n                          aria-describedby=\"basic-addon1\"\r\n                          onChange={this._settingsChanged}\r\n                          defaultValue={this.props.user.name}\r\n                        />\r\n                      </div>\r\n                    </fieldset>\r\n                    <fieldset className=\"form-group\">\r\n                      <label htmlFor=\"generalMail\">E-Mail address: </label>\r\n                      <input\r\n                        type=\"text\"\r\n                        className=\"form-control\"\r\n                        name=\"email\"\r\n                        placeholder=\"E-Mail Address\"\r\n                        id=\"generalMail\"\r\n                        onChange={this._settingsChanged}\r\n                        defaultValue={details.email}\r\n                      />\r\n                    </fieldset>\r\n                    <fieldset className=\"form-group\">\r\n                      <label htmlFor=\"generalPic\">Mobile number: </label>\r\n                      <input\r\n                        type=\"text\"\r\n                        className=\"form-control\"\r\n                        name=\"phone_number\"\r\n                        placeholder=\"Mobile number\"\r\n                        id=\"generalPic\"\r\n                        onChange={this._settingsChanged}\r\n                        defaultValue={details.phone_number}\r\n                      />\r\n                    </fieldset>\r\n                  </SettingsPage>\r\n                  <SettingsPage \r\n                    handler=\"/settings/profile\"\r\n                  >\r\n                  <fieldset className=\"form-group\">\r\n                      <label htmlFor=\"profileFirstname\">Company: </label>\r\n                      <input\r\n                        type=\"text\"\r\n                        className=\"form-control\"\r\n                        name=\"mysettings.profile.firstname\"\r\n                        placeholder=\"Add a company\"\r\n                        id=\"profileFirstname\"\r\n                        onChange={this._settingsChanged}\r\n                        defaultValue={this.props.user.copmany}\r\n                      />\r\n                    </fieldset>\r\n                    <fieldset className=\"form-group\">\r\n                      <label htmlFor=\"profileFirstname\">Job Title: </label>\r\n                      <input\r\n                        type=\"text\"\r\n                        className=\"form-control\"\r\n                        name=\"mysettings.profile.firstname\"\r\n                        placeholder=\"Job title\"\r\n                        id=\"profileFirstname\"\r\n                        onChange={this._settingsChanged}\r\n                        defaultValue={settings[\"mysettings.profile.firstname\"]}\r\n                      />\r\n                    </fieldset>\r\n                    <fieldset className=\"form-group\">\r\n                      <label htmlFor=\"profileLastname\">Your passions: </label>\r\n                      <InputTags values={tags} onTags={(value) => this.setState({finalTags:value.values})} />\r\n                    </fieldset>\r\n                    <fieldset className=\"form-group\">\r\n                      <label htmlFor=\"profileBiography\">Details: </label>\r\n                      <textarea\r\n                        className=\"form-control\"\r\n                        name=\"description\"\r\n                        placeholder=\"Tell us something about yourself\"\r\n                        id=\"profileBiography\"\r\n                        onChange={this._settingsChanged}\r\n                        defaultValue={this.props.user.description}\r\n                      />\r\n                    </fieldset>\r\n                    <fieldset className=\"form-group\">\r\n                      <label htmlFor=\"profileLastname\">Anthem: </label>\r\n                      <input\r\n                        type=\"text\"\r\n                        className=\"form-control\"\r\n                        name=\"anthem\"\r\n                        placeholder=\"ex.: https://open.spotify.com/track/0vWUhCPxpJOJR5urYbZypB\"\r\n                        onChange={this._settingsChanged}\r\n                        \r\n                      />\r\n                    </fieldset>\r\n                    {this.props.user.anthem !== null &&\r\n                      <fieldset className=\"form-group\">\r\n                        <label>Current:</label>\r\n                        <div><Test songID={this.props.user.anthem}></Test></div>\r\n                      </fieldset>\r\n                    }\r\n                  </SettingsPage>\r\n                  <SettingsPage handler=\"/settings/pictures\">\r\n                    <Picture_upload ref={this.picupload} saved={this.state.tocompsave} images={profilePath} user={this.props.user}></Picture_upload>\r\n                  </SettingsPage>\r\n\r\n                  <SettingsPage \r\n                    handler=\"/settings/search\"\r\n                  >\r\n                  <fieldset className=\"form-group\">\r\n                    <label>Looking for:</label>\r\n                      <Select\r\n                        value={lookingFor}\r\n                        placeholder={lookingFor}\r\n                        options={options}\r\n                        onChange={value => {\r\n                          this.setState({ lookingFor : value });\r\n                          //this._settingsChanged();\r\n                        }} \r\n                      />\r\n                    </fieldset>\r\n                    <fieldset className=\"form-group\">\r\n                      <label>Max distance:</label><br /><br />\r\n                      <InputRange\r\n                        maxValue={150}\r\n                        minValue={0}\r\n                        formatLabel={value => `${value} km`}\r\n                        value={distanceValue}\r\n                        onChange={value => {\r\n                          this.setState({ distanceValue : value });\r\n                          //this._settingsChanged();\r\n                        }} \r\n                      />\r\n                    </fieldset><br />\r\n                    <fieldset className=\"form-group\">\r\n                      <label>Age range:</label><br /><br />\r\n                      <InputRange\r\n                        maxValue={100}\r\n                        minValue={18}\r\n                        value={ageValue}\r\n                        onChange={value => {\r\n                          this.setState({ ageValue : value });\r\n                          //this._settingsChanged();\r\n                        }} \r\n                      />\r\n                    </fieldset><br />\r\n                    <fieldset className=\"form-group\">\r\n                      <input \r\n                        type=\"checkbox\" \r\n                        id=\"status\" \r\n                        name=\"status\" \r\n                        value=\"true\"\r\n                        defaultChecked={searchData.status}\r\n                        onChange={this._settingsChanged} \r\n                      />\r\n                      <label for=\"status\">Show me on TindR</label><br />\r\n                    </fieldset>\r\n                    <fieldset className=\"form-group\">\r\n                      <input \r\n                        type=\"checkbox\" \r\n                        id=\"global\" \r\n                        name=\"global\" \r\n                        value=\"true\"\r\n                        defaultChecked={searchData.global}\r\n                        onChange={this._settingsChanged}\r\n                      />\r\n                      <label for=\"global\">Global mode</label><br />\r\n                    </fieldset>\r\n                  </SettingsPage>\r\n\r\n                </SettingsContent>\r\n              </SettingsPane>\r\n            </div>\r\n      </>\r\n    )\r\n  }\r\n}",["102","103"],"D:\\Gyakran hasznalt\\Projects\\Codecool\\PHP\\TindR\\tindr-react\\src\\index.js",[],["104","105"],"D:\\Gyakran hasznalt\\Projects\\Codecool\\PHP\\TindR\\tindr-react\\src\\components\\Recommendations.js",["106","107","108","109"],"import React, {Component} from 'react';\r\nimport { Helmet } from 'react-helmet';\r\nimport axios from 'axios';\r\nimport moment from \"moment\";\r\nimport TinderCard from 'react-tinder-card';\r\n\r\nclass Recommendations extends Component {\r\n    constructor() {\r\n      super();\r\n\r\n      this.state = {\r\n          recommendations: [],\r\n          pictures: [],\r\n          currentPictureIndex: 0,\r\n          isLoading: true,\r\n          showProfile: false,\r\n          current: {\r\n              index: undefined,\r\n              user: undefined\r\n          }\r\n      }\r\n\r\n      this.getRecommendations = this.getRecommendations.bind(this);\r\n      this.getNextProfile = this.getNextProfile.bind(this);\r\n      this.getCurrentData = this.getCurrentData.bind(this);\r\n      this.handleLike = this.handleLike.bind(this);\r\n      this.handleDislike = this.handleDislike.bind(this);\r\n      this.handleKeyDown = this.handleKeyDown.bind(this);\r\n      this.setNextPicture = this.setNextPicture.bind(this);\r\n      this.setPreviousPicture = this.setPreviousPicture.bind(this);\r\n      this.showProfile = this.showProfile.bind(this);\r\n      this.ageCalculation = this.ageCalculation.bind(this);\r\n      this.getCurrentPictures = this.getCurrentPictures.bind(this);\r\n\r\n      this.onCardLeftScreen = this.onCardLeftScreen.bind(this);\r\n      this.onSwipe = this.onSwipe.bind(this);\r\n    }\r\n\r\n    async componentDidMount() {\r\n        await this.getRecommendations();\r\n        await this.getCurrentPictures();\r\n    }\r\n\r\n    async getRecommendations() {\r\n        await axios.get(`http://${process.env.REACT_APP_IP}:8000/api/recommendations/${this.props.userID}`)\r\n        .then(response => {\r\n            let updCurrent = {\r\n                index: 0,\r\n                user: response.data.length === undefined ? response.data : response.data[0]\r\n            }\r\n\r\n            this.setState({\r\n                recommendations : response.data,\r\n                current : updCurrent\r\n            });\r\n        })\r\n    }\r\n\r\n   async getCurrentPictures() {\r\n       const { current } = this.state;\r\n\r\n        await axios.get(`http://${process.env.REACT_APP_IP}:8000/api/pictures/${current.user.id}`)\r\n            .then(response => {\r\n                Promise.all(response.data.map(p => {\r\n                    this.setState({\r\n                        pictures: p,\r\n                        isLoading: false\r\n                    });\r\n                }))\r\n            });\r\n   }\r\n\r\n    async getNextProfile() {\r\n        const { recommendations, current } = this.state;\r\n        console.log(recommendations[current.index + 1])\r\n\r\n        if (recommendations[current.index + 1] !== undefined) {\r\n            let updCurrent = {\r\n                index: current.index + 1,\r\n                user: recommendations[current.index + 1]\r\n            }\r\n            await this.setState({\r\n                current : updCurrent,\r\n                isLoading : true\r\n            })\r\n            this.getCurrentPictures();\r\n        }\r\n        else {\r\n            this.setState({\r\n                current : {\r\n                    index: 0,\r\n                    user: undefined\r\n                },\r\n                isLoading : false\r\n            })\r\n        }\r\n    }\r\n\r\n    setNextPicture() {\r\n        const { currentPictureIndex, pictures } = this.state;\r\n\r\n        const max = pictures.length -1;\r\n        const next = currentPictureIndex + 1;\r\n        \r\n        if (next <= max)\r\n            this.setState({currentPictureIndex: next})\r\n        else\r\n            this.setState({currentPictureIndex: 0});\r\n    }\r\n\r\n    setPreviousPicture() {\r\n        const { currentPictureIndex, pictures } = this.state;\r\n\r\n        const max = pictures.length -1;\r\n        const previous = currentPictureIndex - 1;\r\n\r\n        if (previous < 0) \r\n            this.setState({currentPictureIndex : max});\r\n        else\r\n            this.setState({currentPictureIndex : previous});\r\n    }\r\n\r\n    showProfile() {\r\n        const { current, showProfile } = this.state;\r\n        const user = current.user;\r\n\r\n        if(showProfile) {\r\n            return (\r\n                <>\r\n                    <link rel=\"stylesheet\" href=\"https://use.fontawesome.com/releases/v5.15.1/css/all.css\" integrity=\"sha384-vp86vTRFVJgpjF9jiIGPEEqYqlDwgyBgEF109VFjmqGmIY/Y4HV4d3Gp2irVfcrp\" crossorigin=\"anonymous\"></link>\r\n                    \r\n                    <p>\r\n                        <span className=\"fa fa-info-circle\" /> \r\n                        Description: {user.description !== null ? user.description : \"N/A\"}\r\n                    </p>\r\n                    <p>Birthdate: {user.birthdate !== null ? moment(user.birthdate).format('MMMM Do YYYY') : \"N/A\"}</p>\r\n                    <p>School: {user.school !== null ? user.school : \"N/A\"}</p>\r\n                    <p>Works at: {user.company !== null ? user.company : \"N/A\"}</p>\r\n                    <p>Position: {user.job_title !== null ? user.job_title : \"N/A\"}</p>\r\n                    <p>Gender: {user.gender !== null ? user.gender : \"N/A\"}</p>\r\n                    <p>Passions: {user.passion !== null ? user.passion : \"N/A\"}</p>\r\n                    <p>Sexual Orientation: {user.sexual_orientation !== null ? user.sexual_orientation : \"N/A\"}</p>\r\n\r\n                    {user.anthem !== null &&\r\n                        <iframe width=\"560\" height=\"315\" \r\n                                src={`https://www.youtube.com/embed/${user.anthem}`}\r\n                                frameborder=\"0\" \r\n                                allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" \r\n                                allowfullscreen\r\n                            >\r\n                        </iframe>\r\n                    }\r\n                </>\r\n            );\r\n        }\r\n    }\r\n\r\n    ageCalculation(date) {\r\n        const now = new Date();\r\n        const birthdate = new Date(date);\r\n\r\n        let diff = now.getTime() - birthdate.getTime();\r\n        return Math.floor(diff / (1000 * 60 * 60 * 24 * 365.25));\r\n    }\r\n\r\n    getCurrentData() {\r\n        const { current, pictures, currentPictureIndex } = this.state;\r\n\r\n        if (current.user !== undefined) {\r\n            const route = pictures.length === undefined ? pictures.route : pictures[currentPictureIndex].route;\r\n            return(\r\n                <>\r\n                    <img src={route} />\r\n\r\n                    <div className=\"mx-auto my-0 text-red\">\r\n                        <button onClick={this.handleDislike}>Dislike</button>\r\n                        <button onClick={this.handleLike}>Like</button>\r\n\r\n                        <h1>{current.user.name} {this.ageCalculation(current.user.birthdate)}</h1>\r\n                    </div>\r\n                    \r\n                    {this.showProfile()}\r\n                </>\r\n            );\r\n        }\r\n        else {\r\n            return(\r\n                <>\r\n                    No more!\r\n                </>\r\n            );\r\n        }\r\n    }\r\n\r\n    async handleLike() {\r\n        const { current } = this.state;\r\n\r\n        await axios.post(`http://${process.env.REACT_APP_IP}:8000/api/add_like`, {\r\n            giverid: this.props.userID,\r\n            receiverid: current.user.id\r\n        });\r\n        this.getNextProfile();\r\n    }\r\n\r\n    async handleDislike() {\r\n        const { current } = this.state;\r\n\r\n        await axios.post(`http://${process.env.REACT_APP_IP}:8000/api/add_dislike`, {\r\n            giverid: this.props.userID,\r\n            receiverid: current.user.id\r\n        });\r\n        this.getNextProfile();\r\n    }\r\n\r\n    handleKeyDown(event) {\r\n        switch(event.key) {\r\n            case \"ArrowRight\": {\r\n                this.handleLike();\r\n                break;\r\n            }\r\n            case \"ArrowLeft\": {\r\n                this.handleDislike();\r\n                break;\r\n            }\r\n            case \" \": { //Space\r\n                this.setNextPicture();\r\n                break;\r\n            }\r\n            case \"Backspace\": {\r\n                this.setPreviousPicture();\r\n                break;\r\n            }\r\n            case \"ArrowUp\": {\r\n                this.setState({showProfile : true});\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                this.setState({showProfile : false});\r\n                break;\r\n            }\r\n            default:\r\n        }\r\n    }\r\n\r\n    onSwipe(direction) {\r\n        console.log(direction)\r\n    }\r\n\r\n    onCardLeftScreen(id) {\r\n        console.log(id)\r\n    }\r\n\r\n    render() {\r\n        const { isLoading } = this.state;\r\n\r\n        if (!isLoading) {\r\n            /*\r\n            <div onKeyDown={this.handleKeyDown} tabIndex=\"0\" className=\"container d-flex h-100 align-items-center\">\r\n                        <div className=\"mx-auto text-center\">\r\n                            {this.getCurrentData()}\r\n                        </div>\r\n                    </div>\r\n            */\r\n            return (\r\n                <>\r\n                    <div onKeyDown={this.handleKeyDown} tabIndex=\"0\" className=\"container d-flex h-100 align-items-center\">\r\n                        <div className=\"mx-auto text-center\">\r\n                            <TinderCard onSwipe={this.onSwipe} onCardLeftScreen={() => this.onCardLeftScreen('fooBar')} preventSwipe={['right', 'left']}>\r\n                                {this.getCurrentData()}\r\n                            </TinderCard>\r\n                        </div>\r\n                    </div>\r\n                </>\r\n            );\r\n        }\r\n        else\r\n            return (\r\n                <h1>Loading...</h1>\r\n            );\r\n    }\r\n}\r\n\r\nexport default Recommendations;",["110","111"],"D:\\Gyakran hasznalt\\Projects\\Codecool\\PHP\\TindR\\tindr-react\\src\\components\\Asd.js",[],"D:\\Gyakran hasznalt\\Projects\\Codecool\\PHP\\TindR\\tindr-react\\src\\components\\Deck.js",["112","113","114"],"import React, { useState, useEffect } from \"react\";\r\nimport { useSprings } from \"react-spring\";\r\nimport { useGesture } from \"react-with-gesture\";\r\n\r\nimport Card from \"./Card\";\r\nimport Pulse from \"./Pulse\";\r\n\r\nimport \"./css/deck.css\";\r\nimport './css/loading_heart.css';\r\n\r\nconst to = i => ({\r\n  x: 0,\r\n  y: i * -10,\r\n  scale: 1,\r\n  rot: 0,\r\n  //rot: -10 + Math.random() * 20,\r\n  delay: i * 100\r\n});\r\nconst from = i => ({ rot: 0, scale: 1.5, y: -1000 });\r\n\r\nconst trans = (r, s) =>\r\n  `perspective(1500px) rotateX(30deg) rotateY(${r /\r\n  10}deg) rotateZ(${r}deg) scale(${s})`;\r\n\r\nfunction Deck({userID, data}) {\r\n\r\n  const [doFetch, setFetch] = useState(\"\");\r\n  const [isLoading, setLoading] = useState(false);\r\n\r\n  useEffect(() => {\r\n    async function giveVote(receiverID, direction) {\r\n      const send = {\r\n        \"receiverid\": receiverID,\r\n        \"giverid\": userID,\r\n        \"direction\": direction\r\n      }\r\n\r\n      await fetch(`${process.env.REACT_APP_IP}/api/give_vote`, {\r\n        method: 'post',\r\n        headers: {'Content-Type':'application/json'},\r\n        body: JSON.stringify(send)\r\n        })\r\n        .then(() => {\r\n          setLoading(false);\r\n        });\r\n    }\r\n    \r\n    if (doFetch !== \"\") {\r\n      const temp = doFetch.split(',');\r\n      giveVote(temp[0], temp[1]);\r\n    }\r\n  }, [doFetch])\r\n\r\n  const [gone] = useState(() => new Set());\r\n  const [cardState, set] = useSprings(data.length, i => ({\r\n    ...to(i),\r\n    from: from(i)\r\n  }));\r\n\r\n  const bind = useGesture(\r\n    ({\r\n      args: [index],\r\n      down,\r\n      delta: [xDelta],\r\n      distance,\r\n      direction: [xDir],\r\n      velocity\r\n    }) => {\r\n      const trigger = velocity > 0.2;\r\n\r\n      const dir = xDir < 0 ? -1 : 1;\r\n\r\n      let temp = \"\";\r\n\r\n      if (!down && trigger) {\r\n        gone.add(index);\r\n        temp = `${data[index].id},${dir}`;\r\n      }\r\n\r\n      set(i => {\r\n        if (index !== i) return;\r\n        const isGone = gone.has(index);\r\n\r\n        const x = isGone ? (200 + window.innerWidth) * dir : down ? xDelta : 0;\r\n\r\n        const rot = xDelta / 100 + (isGone ? dir * 10 * velocity : 0);\r\n\r\n        const scale = down ? 1.1 : 1;\r\n        return {\r\n          x,\r\n          rot,\r\n          scale,\r\n          delay: undefined,\r\n          config: { friction: 50, tension: down ? 800 : isGone ? 200 : 500 }\r\n        };\r\n      });\r\n\r\n      if(temp.length != 0) {\r\n        setLoading(true);\r\n        setFetch(temp);\r\n      }\r\n\r\n      /*\r\n      if (!down && gone.size === data.length) {\r\n        setTimeout(() => gone.clear() || set(i => to(i)), 600);\r\n      }\r\n      */\r\n    }\r\n  );\r\n\r\n  /*\r\n  if(isLoading) {\r\n    return (\r\n      <h1>fetch loading...</h1>\r\n    );\r\n  }\r\n  else */if(cardState.length != gone.size) {\r\n    return (\r\n      <>\r\n      <div className=\"background-image\"></div>\r\n      <div id='recommendations'>\r\n        {cardState.map(({ x, y, rot, scale }, i) => (\r\n          <Card\r\n            key={i}\r\n            i={i}\r\n            x={x}\r\n            y={y}\r\n            rot={rot}\r\n            scale={scale}\r\n            trans={trans}\r\n            data={data}\r\n            bind={bind}\r\n          />\r\n        ))}\r\n        {isLoading === true &&\r\n          <h1>fetch loading...</h1>\r\n        }\r\n      </div>\r\n      </>\r\n    );\r\n  }\r\n  else {\r\n    return(<Pulse userID={userID} />);\r\n  }\r\n}\r\n\r\nexport default Deck;","D:\\Gyakran hasznalt\\Projects\\Codecool\\PHP\\TindR\\tindr-react\\src\\components\\spotify_config.js",[],"D:\\Gyakran hasznalt\\Projects\\Codecool\\PHP\\TindR\\tindr-react\\src\\components\\WelcomePage.js",["115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134"],"import React, {Component} from 'react';\r\nimport { Helmet } from 'react-helmet';\r\nimport Swal from \"sweetalert2\";\r\nimport axios from 'axios';\r\nimport moment from \"moment\";\r\nimport ReactCodeInput from 'react-code-input';\r\nimport withReactContent from 'sweetalert2-react-content'\r\n\r\nclass WelcomePage extends Component {\r\n    constructor() {\r\n      super();\r\n\r\n      this.state = {\r\n        apikey:'6259e30396ee22afa1b50ed0d8468bd7be1204de',\r\n        appkey:'a1yqe5e4o6a6eborahy7',\r\n        userName: undefined,\r\n        email: undefined,\r\n        phoneNumber: undefined,\r\n        password: undefined,\r\n        confirmPass: undefined,\r\n        birthDate: undefined,\r\n        passions: undefined,\r\n      }\r\n\r\n      this.startLogin = this.startLogin.bind(this);\r\n      this.handleLogin = this.handleLogin.bind(this);\r\n      this.doLogin = this.doLogin.bind(this);\r\n      this.startRegister = this.startRegister.bind(this);\r\n      this.regEnterUsername = this.regEnterUsername.bind(this);\r\n      this.regEnterEmail = this.regEnterEmail.bind(this);\r\n      this.isValidEmail = this.isValidEmail.bind(this);\r\n      this.regEnterPhoneNumber = this.regEnterPhoneNumber.bind(this);\r\n      this.isValidPhoneNumber = this.isValidPhoneNumber.bind(this);\r\n      this.regEnterPassword = this.regEnterPassword.bind(this);\r\n      this.regEnterBirthdate = this.regEnterBirthdate.bind(this);\r\n      this.regEnterPassions = this.regEnterPassions.bind(this);\r\n      this.regUploadImage = this.regUploadImage.bind(this);\r\n      this.showDetails = this.showDetails.bind(this);\r\n      this.doRegistration = this.doRegistration.bind(this);\r\n      this.requestPin = this.requestPin.bind(this);\r\n      this.validatePin = this.validatePin.bind(this);\r\n    }\r\n\r\n    async startLogin() {\r\n      await this.handleLogin();\r\n    }\r\n\r\n    async handleLogin(error = \"\") {\r\n      const { value: formValues } = await Swal.fire({\r\n        title: 'Sign in',\r\n        html:\r\n          `${error !== \"\" ? `<p style=\"color:red\">${error}</p>\\n\\n` : \"\"}` +\r\n          '<p>Enter your email address</p>' +\r\n          '<input id=\"swal-input1\" class=\"swal2-input\" type=\"email\">' +\r\n          '<p>Enter your password</p>' +\r\n          '<input id=\"swal-input2\" class=\"swal2-input\" type=\"password\">',\r\n        focusConfirm: false,\r\n        confirmButtonText: `Sign in`,\r\n        preConfirm: () => {\r\n          return [\r\n            document.getElementById('swal-input1').value,\r\n            document.getElementById('swal-input2').value\r\n          ]\r\n        }\r\n      })\r\n\r\n      if (formValues !== undefined) {\r\n        if (formValues[0] == \"\" || formValues[1] == \"\") {\r\n          this.handleLogin(\"You must enter your username and your password!\");\r\n        }\r\n        else\r\n          this.doLogin(formValues[0], formValues[1]);\r\n      }\r\n    }\r\n\r\n    doLogin(email, password) {\r\n      axios.post(process.env.REACT_APP_IP+\"/api/login\", {\r\n        email: email,\r\n        password: password\r\n      }).then(response => {\r\n        if (response.data.length !== 0) {\r\n          this.props.setUser(response.data);\r\n        }\r\n        else\r\n          this.handleLogin(\"Incorrect e-mail or password!\")\r\n      })\r\n    }\r\n\r\n    async startRegister() {\r\n      await this.regEnterUsername();\r\n    }\r\n\r\n    async regEnterUsername(error = \"\") {\r\n      const { value: username } = await Swal.fire({\r\n        title: 'Registration step 1/7',\r\n        html:\r\n          '<p>Enter your username</p>' +\r\n          `${error !== \"\" ? `\\n\\n<p style=\"color:red\">${error}</p>` : \"\"}` +\r\n          '<input id=\"swal-input1\" class=\"swal2-input\" type=\"text\">',\r\n        focusConfirm: false,\r\n        confirmButtonText: `Next`,\r\n        preConfirm: () => {\r\n          return [\r\n            document.getElementById('swal-input1').value\r\n          ]\r\n        }\r\n      })\r\n\r\n      if (username !== undefined) {\r\n        if (username[0] == \"\")\r\n          this.regEnterUsername(\"You must enter your username!\");\r\n        else if (username[0].length <= 3)\r\n          this.regEnterUsername(\"Username must have at least 4 characters!\");\r\n        else {\r\n            this.setState({userName : username[0]});\r\n            this.regEnterEmail();\r\n        }\r\n      }\r\n    }\r\n\r\n    async regEnterEmail(error = \"\") {\r\n      const { value: email } = await Swal.fire({\r\n        title: 'Registration step 2/7',\r\n        html:\r\n          '<p>Enter your e-mail address</p>' +\r\n          `${error !== \"\" ? `\\n\\n<p style=\"color:red\">${error}</p>` : \"\"}` +\r\n          '<input id=\"swal-input1\" class=\"swal2-input\" type=\"email\" placeholder=\"(eg.: somebody@example.com)\">',\r\n        focusConfirm: false,\r\n        confirmButtonText: `Next`,\r\n        preConfirm: () => {\r\n          return [\r\n            document.getElementById('swal-input1').value\r\n          ]\r\n        }\r\n      })\r\n\r\n      if (email !== undefined) {\r\n        if (email[0] == \"\")\r\n          return this.regEnterEmail(\"You must enter your e-mail address!\")\r\n        else if (email[0].includes(\"@\") == false || email[0].includes(\".\") == false)\r\n          return this.regEnterEmail(\"Invalid e-mail address!\")\r\n      \r\n        const check = await this.isValidEmail(email[0])\r\n\r\n        if (check) {\r\n          this.setState({email : email[0]});\r\n          this.regEnterPhoneNumber();\r\n        } \r\n        else\r\n          this.regEnterEmail(\"This e-mail is already in use!\")\r\n      }\r\n    }\r\n\r\n    async isValidEmail(email) {\r\n      let temp = undefined;\r\n      await axios.get(process.env.REACT_APP_IP+\"/api/valid_email/\" + email)\r\n      .then(response => {\r\n          temp = response.data.length == 0\r\n      })\r\n      return temp;\r\n    }\r\n\r\n    async requestPin(number){\r\n      await axios.post(process.env.REACT_APP_IP+\"/api/getpin\",{\r\n        appkey:this.state.appkey,\r\n        apikey:this.state.apikey,\r\n        phone:number\r\n      })\r\n      .then(resp =>{\r\n        console.log(resp.data);\r\n      })\r\n    }\r\n\r\n    async regEnterPhoneNumber(error = \"\") {\r\n      const { value: phone } = await Swal.fire({\r\n        title: 'Registration step 3/7',\r\n        html:\r\n          '<p>Enter your phone number</p>' +\r\n          `${error !== \"\" ? `\\n\\n<p style=\"color:red\">${error}</p>` : \"\"}` +\r\n          '<input id=\"swal-input1\" class=\"swal2-input\" type=\"tel\" placeholder=\"(eg.: 30/123-4567)\">',\r\n        focusConfirm: false,\r\n        confirmButtonText: `Next`,\r\n        preConfirm: () => {\r\n          return [\r\n            document.getElementById('swal-input1').value\r\n          ]\r\n        }\r\n      })\r\n\r\n      if (phone !== undefined) {\r\n        if (phone[0] == \"\")\r\n          this.regEnterPhoneNumber(\"You must enter your phone number\");\r\n        else if (this.isValidPhoneNumber(phone[0])) {\r\n          let pinnumber = \"+36\" + phone[0].replace(\"/\",\"\").replace(\"-\",\"\");\r\n          this.requestPin(pinnumber);\r\n          this.validatePin(pinnumber);\r\n          this.setState({phoneNumber : phone[0]});\r\n          \r\n        } \r\n        else \r\n          this.regEnterPhoneNumber(`Invalid phone number!\\n'${phone}'`);\r\n      }\r\n    }\r\n    \r\n    async validatePin(pinnumber){\r\n      const mySwal = withReactContent(Swal);\r\n      let pin = 0;\r\n      let pinHtml = <ReactCodeInput type=\"number\" onChange={(e) => pin = e} fields={4}/>;\r\n      await mySwal.fire({\r\n        title: 'Enter the verification code',\r\n        html:pinHtml,\r\n        //input: 'text',\r\n        inputAttributes: {\r\n          autocapitalize: 'off'\r\n        },\r\n        showCancelButton: true,\r\n        confirmButtonText: 'Validate',\r\n        showLoaderOnConfirm: true,\r\n        preConfirm: (usuallytrue) => {\r\n          return axios.post(process.env.REACT_APP_IP+\"/api/validatecode\",{\r\n            appkey:this.state.appkey,\r\n            apikey:this.state.apikey,\r\n            phone:pinnumber,\r\n            code:pin\r\n          })\r\n          .then(response => {\r\n            if (response.data.status !== \"SUCCESS\") {\r\n              throw new Error(response.statusText)\r\n            }\r\n            return response.data;\r\n          })\r\n          .catch(error => {\r\n            Swal.showValidationMessage(\r\n              `Request failed: ${error}`\r\n            )\r\n          })\r\n        },\r\n        allowOutsideClick: () => !Swal.isLoading()\r\n      }).then((result) => {\r\n        console.log(result);\r\n        if (result.isConfirmed) {\r\n          Swal.fire({\r\n            confirmButtonText:'OK',\r\n            title: `${result.value.status}`,\r\n            preConfirm: (ok) =>{\r\n              this.regEnterPassword();\r\n            }\r\n          })\r\n        }\r\n      })\r\n    }\r\n\r\n    isValidPhoneNumber(phone) {\r\n      if (phone.length < 11 || phone.length > 11)\r\n        return false;\r\n\r\n      for (let i = 0; i < phone.length; i++) {\r\n        if (i == 2) {\r\n          if (phone[i] != '/')\r\n            return false;\r\n        }\r\n        else if (i == 6) {\r\n          if (phone[i] != \"-\")\r\n            return false;\r\n        }\r\n        else if (isNaN(phone[i]))\r\n            return false;\r\n      }\r\n      return true;\r\n    }\r\n\r\n    async regEnterPassword(error = \"\", pw = \"\") {\r\n      const { value: formValues } = await Swal.fire({\r\n        title: 'Registration step 4/7',\r\n        html:\r\n          '<p>Enter your password</p>' +\r\n          `${error !== \"\" ? `<p style=\"color:red\">${error}</p>` : \"\"}` +\r\n          `<input id=\"swal-input1\" class=\"swal2-input\" type=\"password\" value=\"${pw}\">` +\r\n          '<p>Confirm your password</p>' +\r\n          '<input id=\"swal-input2\" class=\"swal2-input\" type=\"password\">',\r\n        focusConfirm: false,\r\n        confirmButtonText: `Next`,\r\n        preConfirm: () => {\r\n          return [\r\n            document.getElementById('swal-input1').value,\r\n            document.getElementById('swal-input2').value\r\n          ]\r\n        }\r\n      })\r\n      \r\n      if (formValues !== undefined) {\r\n        if (formValues[0] == \"\" || formValues[1] == \"\")\r\n          this.regEnterPassword(\"You must enter your password and confirm it!\");\r\n        else if (formValues[0] === formValues[1]) {\r\n            this.setState({password : formValues[0]});\r\n            this.regEnterBirthdate();\r\n        }\r\n        else\r\n          this.regEnterPassword(\"Passwords do not match!\", formValues[0]);\r\n      }\r\n    }\r\n\r\n    async regEnterBirthdate(error = \"\") {\r\n      const { value: birthdate } = await Swal.fire({\r\n        title: 'Registration step 5/7',\r\n        html: \r\n          '<p>Enter your birthdate</p>' +\r\n          `${error !== \"\" ? `<p style=\"color:red\">${error}</p>` : \"\"}` +\r\n          '<input id=\"swal-input1\" class=\"swal2-input\" type=\"date\">',\r\n        focusConfirm: false,\r\n        confirmButtonText: `Next`,\r\n        preConfirm: () => {\r\n          return [\r\n            document.getElementById('swal-input1').value\r\n          ]\r\n        }\r\n      })\r\n\r\n      const bDate = moment(birthdate[0]).valueOf(),\r\n            now = moment().valueOf(),\r\n            minValue = 31556952000 * 18; //age 18\r\n\r\n      if (birthdate !== undefined) {\r\n        if (birthdate[0] == \"\")\r\n          this.regEnterBirthdate(\"You didn't enter your birthdate!\");\r\n        else if(now - bDate < minValue)\r\n          this.regEnterBirthdate(\"You cannot register under the age of 18!\");\r\n        else {\r\n          this.setState({birthDate : bDate});\r\n          this.regEnterPassions();\r\n        }\r\n      }\r\n    }\r\n\r\n    async regEnterPassions(error = \"\") {\r\n      const { value: passions } = await Swal.fire({\r\n        title: 'Registration step 6/7',\r\n        html: \r\n          '<p>Enter minimum 3 passions comma separated</p>' +\r\n          `${error !== \"\" ? `<p style=\"color:red\">${error}</p>` : \"\"}` +\r\n          '<input id=\"swal-input1\" class=\"swal2-input\" type=\"text\" placeholder=\"(eg.: reading,coding,walking)\">',\r\n        focusConfirm: false,\r\n        confirmButtonText: `Next`,\r\n        preConfirm: () => {\r\n          return [\r\n            document.getElementById('swal-input1').value\r\n          ]\r\n        }\r\n      })\r\n\r\n      if (passions !== undefined) {\r\n        if (passions[0].split(',').length >= 3) {\r\n          this.setState({passions : passions[0]});\r\n          this.regUploadImage();\r\n        }\r\n        else\r\n          this.regEnterPassions(\"You have to enter at least 3 passions!\")\r\n      }\r\n    }\r\n\r\n    async regUploadImage(error = \"\") {\r\n      const { value: file } = await Swal.fire({\r\n        title: 'Registration step 7/7',\r\n        html:\r\n          '<p>Upload an image of yourself</p>' +\r\n          `${error !== \"\" ? `<p style=\"color:red\">${error}</p>` : \"\"}`,\r\n        input: 'file',\r\n        confirmButtonText: `Upload`,\r\n        inputAttributes: {\r\n          'accept': 'image/*',\r\n          'aria-label': 'Upload your profile picture'\r\n        }\r\n      })\r\n      \r\n      if (file !== undefined) {\r\n        if (file) {\r\n          this.showDetails(file);\r\n        }\r\n        else\r\n          this.regUploadImage(\"You must upload an image!\");\r\n      }\r\n    }\r\n\r\n    showDetails(file) {\r\n      const reader = new FileReader()\r\n      const {userName, email, phoneNumber, birthDate, passions} = this.state\r\n\r\n      reader.onload = (e) => {\r\n        const { value: accept } = Swal.fire({\r\n          title: 'Your details',\r\n          input: 'checkbox',\r\n          inputValue: 0,\r\n          inputPlaceholder: 'I agree with the terms and conditions',\r\n          imageUrl: e.target.result,\r\n          html:\r\n            `<p>Name: ${userName}</p>` +\r\n            `<p>E-mail: ${email}</p>` +\r\n            `<p>Phone: ${phoneNumber}</p>` +\r\n            `<p>Birthdate: ${moment(birthDate).format(\"MMMM Do YYYY\")}</p>` +\r\n            `<p>Passions: ${passions}</p>`,\r\n          imageAlt: 'The uploaded picture',\r\n          confirmButtonText: `Register`,\r\n          inputValidator: (result) => {\r\n            return !result ? 'You need to agree with T&C' : this.doRegistration(e.target.result);\r\n          }\r\n        })\r\n      }\r\n      reader.readAsDataURL(file)\r\n    }\r\n\r\n    async doRegistration(file) {\r\n      const {userName, email, phoneNumber, password, birthDate, passions} = this.state;\r\n\r\n      await axios.post(process.env.REACT_APP_IP+\"/api/register\", {\r\n        name: userName,\r\n        email: email,\r\n        phone_number: phoneNumber,\r\n        password: password,\r\n        birthdate: birthDate,\r\n        passion: passions,\r\n        rawImage: file\r\n      }).then(response => {\r\n        if (response.data.length != 0) {\r\n          this.props.setUser(response.data);\r\n        }\r\n      })\r\n    }\r\n  \r\n    render() {\r\n      return (\r\n        <>\r\n          <Helmet>\r\n              <title>Tinder | Dating, Make Friends & Meet New People</title>\r\n          </Helmet>\r\n  \r\n          <section style={{ height:\"100vh\",\r\n                            background: 'linear-gradient(rgba(0,0,0,.4), rgba(0,0,0,.4)), url(\"https://tinder.com/static/build/m/b07fe760ab4714aa3e932a15657494e5.webp\")',\r\n                            backgroundRepeat:\"no-repeat\",\r\n                            backgroundSize:\"cover\"}}\r\n          >\r\n            <nav className=\"navbar navbar-light bg-transparent justify-content-between\">\r\n              <div className=\"flex justify-start lg:w-0 lg:flex-1\">\r\n                <a href=\"/\">\r\n                    <span className=\"sr-only\">TindR</span>\r\n                    <img src=\"logo.svg\" width=\"55%\"></img>\r\n                </a>\r\n              </div>   \r\n  \r\n              <div className=\"hidden md:flex items-center justify-end md:flex-1 lg:w-0\">\r\n                <a className=\"btn btn-success rounded-pill\"\r\n                    onClick={this.startLogin}\r\n                >\r\n                    LOG IN\r\n                </a>\r\n              </div>\r\n            </nav>\r\n  \r\n            <div className=\"container d-flex h-100 align-items-center\">\r\n              <div className=\"mx-auto text-center\">\r\n                <h1 className=\"mx-auto my-0 text-white\" style={{fontSize:\"800%\"}}>\r\n                  Swipe Right®\r\n                </h1>\r\n                <a  className=\"btn btn-danger js-scroll-trigger rounded-pill\"\r\n                    onClick={this.startRegister}\r\n                >\r\n                  CREATE ACCOUNT \r\n                </a>\r\n              </div>\r\n            </div>\r\n          </section>\r\n        </>\r\n      );\r\n    }\r\n  }\r\n  \r\n  export default WelcomePage;",["135","136"],"D:\\Gyakran hasznalt\\Projects\\Codecool\\PHP\\TindR\\tindr-react\\src\\components\\ItemLoading.js",[],"D:\\Gyakran hasznalt\\Projects\\Codecool\\PHP\\TindR\\tindr-react\\src\\components\\Pulse.js",["137","138"],"import React, { Component } from 'react'\r\nimport \"./css/pulse.css\";\r\nimport axios from 'axios';\r\n\r\nimport Loading from './Loading'\r\n\r\nexport default class Pulse extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            isLoading: true,\r\n            userImg: ''\r\n        }\r\n\r\n        this.getProfilePicture = this.getProfilePicture.bind(this);\r\n    }\r\n\r\n    async getProfilePicture() {\r\n        await axios.get(`${process.env.REACT_APP_IP}/api/pictures/${this.props.userID}`)\r\n        .then(response => {\r\n            Promise.all(response.data.map(p => {\r\n                this.setState({\r\n                    isLoading : false,\r\n                    userImg : p.route\r\n                });\r\n              }))\r\n        });\r\n    }\r\n\r\n    async componentDidMount() {\r\n        await this.getProfilePicture();\r\n    }\r\n\r\n    render() {\r\n        const { isLoading, userImg } = this.state;\r\n\r\n        if(!isLoading) {\r\n            return(\r\n                <>\r\n                    <div class=\"load\">\r\n                        <img src={userImg} style={{borderRadius:\"50%\", width:\"100%\"}}></img>\r\n                    </div>\r\n                    <p>We are unable to find any potential matches right now. Try changing your preferences to see who is nearby.</p>\r\n                </>\r\n            );\r\n        }\r\n        else {\r\n            return(\r\n                <Loading />\r\n            );\r\n        }\r\n    }\r\n}","D:\\Gyakran hasznalt\\Projects\\Codecool\\PHP\\TindR\\tindr-react\\src\\components\\Loading.js",["139"],"import React, { Component } from 'react'\r\n\r\nexport default class Loading extends Component {\r\n    render() {\r\n        return (\r\n            <svg \r\n                xmlns=\"http://www.w3.org/2000/svg\" \r\n                xmlns={{xlink:\"http://www.w3.org/1999/xlink\"}} \r\n                style={{margin:'auto', background:'#fff', display:'block', float:'left'}} \r\n                width=\"100px\" \r\n                height=\"100px\" \r\n                viewBox=\"0 0 100 100\" \r\n                preserveAspectRatio=\"xMidYMid\"\r\n            >\r\n                <path \r\n                    fill=\"none\" \r\n                    stroke=\"#e90c59\" \r\n                    stroke-width=\"8\" \r\n                    stroke-dasharray=\"42.76482137044271 42.76482137044271\" \r\n                    d=\"M24.3 30C11.4 30 5 43.3 5 50s6.4 20 19.3 20c19.3 0 32.1-40 51.4-40 C88.6 30 95 43.3 95 50s-6.4 20-19.3 20C56.4 70 43.6 30 24.3 30z\" \r\n                    stroke-linecap=\"round\" \r\n                    style={{transform:'scale(0.8)', transformOrigin:'50px 50px'}}\r\n                >\r\n                    <animate \r\n                        attributeName=\"stroke-dashoffset\" \r\n                        repeatCount=\"indefinite\" \r\n                        dur=\"1s\" \r\n                        keyTimes=\"0;1\" \r\n                        values=\"0;256.58892822265625\"\r\n                    ></animate>\r\n                </path>\r\n        </svg>\r\n        );\r\n    }\r\n}",["140","141"],"D:\\Gyakran hasznalt\\Projects\\Codecool\\PHP\\TindR\\tindr-react\\src\\components\\Picture_upload.js",["142","143"],"import React, { Component } from 'react'\r\nimport Swal from 'sweetalert2'\r\nimport axios from 'axios';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faTimesCircle } from '@fortawesome/free-solid-svg-icons'\r\nimport { faCheck } from '@fortawesome/free-solid-svg-icons'\r\n\r\nexport default class Picture_upload extends Component {\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            images: this.props.images,\r\n            isLoading:false,\r\n            image_raw:'',\r\n            checked:true,\r\n            checkedid:this.props.images[0].id,\r\n            saved:this.props.saved\r\n        }\r\n        this.uploadFile=this.uploadFile.bind(this);\r\n    }\r\n\r\n    getFile = async (event) => {\r\n        const file = event.target.files[0];\r\n       \r\n        const base64 = await this.convertBase64(file);\r\n        this.setState({image_raw:base64});\r\n        this.showFile();\r\n    }\r\n\r\n    getCheckedid(){\r\n        return this.state.checkedid;\r\n    }\r\n\r\n    convertBase64 = (file) => {\r\n        return new Promise((resolve, reject) => {\r\n          const fileReader = new FileReader();\r\n          fileReader.readAsDataURL(file)\r\n          fileReader.onload = () => {\r\n            resolve(fileReader.result);\r\n          }\r\n          fileReader.onerror = (error) => {\r\n            reject(error);\r\n          }\r\n        })\r\n    }\r\n\r\n    showFile(){\r\n        const swalWithBootstrapButtons = Swal.mixin({\r\n            customClass: {\r\n              confirmButton: 'btn btn-success',\r\n              cancelButton: 'btn btn-danger'\r\n            },\r\n            buttonsStyling: false\r\n          })\r\n          \r\n          swalWithBootstrapButtons.fire({\r\n            title: 'Do you want to upload this?',\r\n            text: \"Click upload to upload you image.\",\r\n            imageUrl: this.state.image_raw,\r\n            showCancelButton: true,\r\n            confirmButtonText: 'Yes, upload it!',\r\n            cancelButtonText: 'No, cancel!',\r\n            reverseButtons: true\r\n          }).then((result) => {\r\n            if (result.isConfirmed) {\r\n                this.uploadFile();\r\n                swalWithBootstrapButtons.fire( \r\n                    'Uploaded!',\r\n                    'Your file has been uploaded.',\r\n                    'success'\r\n                )\r\n            } else if (\r\n              result.dismiss === Swal.DismissReason.cancel\r\n            ) {\r\n              swalWithBootstrapButtons.fire(\r\n                'Cancelled',\r\n                'No uploado happenedo 🤠',\r\n                'error'\r\n              )\r\n            }\r\n        })\r\n    }\r\n\r\n    uploadFile(){\r\n        axios.post(process.env.REACT_APP_IP+\"/api/pictures/upload/\"+this.props.user.id,{\r\n           img_raw:this.state.image_raw\r\n        });\r\n    }\r\n\r\n    deletePic(data){\r\n        if (this.state.images.length === 1){\r\n            Swal.fire('You must have at least 1 image uploaded!')\r\n        }\r\n        else {\r\n            Swal.fire({\r\n                title: 'Are you sure?',\r\n                text: \"You won't be able to revert this!\",\r\n                icon: 'warning',\r\n                showCancelButton: true,\r\n                confirmButtonColor: '#3085d6',\r\n                cancelButtonColor: '#d33',\r\n                confirmButtonText: 'Yes, delete it!'\r\n            }).then((result) => {\r\n                if (result.isConfirmed) {\r\n                    axios.post(process.env.REACT_APP_IP+\"/api/pictures/delete/\"+this.props.user.id,{\r\n                        del_data: data\r\n                    });\r\n                    Swal.fire(\r\n                    'Deleted!',\r\n                    'Your file has been deleted.',\r\n                    'success'\r\n                    );\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    chooseAsMainPic(userid,picid){\r\n        this.setState({ checkedid:picid});\r\n\r\n    }\r\n\r\n    sendd(){\r\n        axios.post(process.env.REACT_APP_IP+\"/api/pictures/setmain/\"+this.props.user.id,{\r\n                pic_id:this.state.checkedid\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const {isLoading, images} = this.state;\r\n        if (isLoading){\r\n            return(\r\n                <div className=\"container\">\r\n                    <div className=\"text-center\">\r\n                        <img src=\"/img/Loading_svg.svg\"></img>\r\n                    </div>\r\n                </div>\r\n            );\r\n        }\r\n    \r\n        return (\r\n           \r\n            <div className=\"container-fluid\">\r\n                <div className=\"\">\r\n                {images.map((image,i) => \r\n                    <div key={image.id} className=\"card\" style={{width:\"8rem\", display:\"inline-block\",margin:\"1em\", border:\"none\"}}>\r\n                        <img className=\"card-img-top\" onClick={()=>this.chooseAsMainPic(this.props.user.id,image.id)} src={image.route} alt=\"Card image cap\"></img>\r\n                        <a href=\"/#\" onClick={() => this.deletePic(image.route)}><FontAwesomeIcon style={{position: \"absolute\",bottom:\"85%\",left:\"5%\"}} icon={faTimesCircle} color=\"grey\" size=\"lg\" /></a>\r\n                        <FontAwesomeIcon style={{display:(this.state.checked && this.state.checkedid===image.id) ? 'inline-block':'none',position: \"absolute\",bottom:\"85%\",right:\"5%\"}} icon={faCheck} color=\"green\" size=\"lg\" />\r\n                    </div>\r\n                )}\r\n                </div>\r\n                \r\n                <div className=\"custom-file\">\r\n                    <input onChange={this.getFile} id=\"customFile\" name=\"file\" type=\"file\" accept=\"image/*\" className=\"custom-file-input\" ></input>\r\n                    <label className=\"custom-file-label\" htmlFor=\"customFile\">Choose file</label>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","D:\\Gyakran hasznalt\\Projects\\Codecool\\PHP\\TindR\\tindr-react\\src\\components\\Card.js",["144","145"],"D:\\Gyakran hasznalt\\Projects\\Codecool\\PHP\\TindR\\tindr-react\\src\\components\\CreateTickets.js",["146"],"import React, { Component } from 'react'\r\nimport axios from 'axios';\r\nimport moment from \"moment\";\r\n\r\nimport Table from './Table';\r\nimport Loading from './Loading'\r\n\r\nexport default class CreateTickets extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      subject: \"\",\r\n      section: \"\",\r\n      steps: \"\",\r\n      isLoading: true,\r\n      tickets: [],\r\n      columns: [\r\n          {\r\n              Header: \"#\",\r\n              accessor: \"index\",\r\n          },\r\n          {\r\n            Header: \"Date\",\r\n            accessor: \"date\",\r\n          },\r\n          {\r\n              Header: \"Subject\",\r\n              accessor: \"subject\",\r\n          },\r\n          {\r\n              Header: \"Section\",\r\n              accessor: \"section\",\r\n          },\r\n          {\r\n              Header: \"Status\",\r\n              accessor: \"solved\",\r\n          },\r\n      ]\r\n    }\r\n\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleClick = this.handleClick.bind(this);\r\n  }\r\n\r\n  handleChange(event) {\r\n    this.setState({\r\n        [event.target.name] : event.target.value\r\n    });\r\n  }\r\n\r\n  handleClick() {\r\n    const { subject, section, steps, tickets } = this.state;\r\n\r\n    this.setState({isLoading : true});\r\n\r\n    const newTicket = {\r\n        \"notifier_id\": this.props.userID,\r\n        \"subject\": subject,\r\n        \"section\": section,\r\n        \"steps\": steps\r\n    };\r\n\r\n    axios.post(`${process.env.REACT_APP_IP}/api/create_ticket`, newTicket)\r\n    .then(() => {\r\n        const temp = tickets;\r\n        temp.push(newTicket);\r\n\r\n        this.setState({\r\n            tickets, temp,\r\n            isLoading : false\r\n        });\r\n    })\r\n  }\r\n\r\n  getFormattedTickets(tickets) {\r\n    const data = [];\r\n    let i = 0;\r\n\r\n      tickets.map(t => {\r\n          i++;\r\n        data.push({\r\n            index: `${i}.`,\r\n            date: moment(t.date).format(\"YYYY. MMM. D.\"),\r\n            subject: t.subject,\r\n            section: t.section,\r\n            solved: t.solved === false ? \"Open\" : \"Closed\",\r\n            steps: t.steps, \r\n        })\r\n      })\r\n      return data;\r\n  }\r\n\r\n  getTickets() {\r\n    axios.get(`${process.env.REACT_APP_IP}/api/get_tickets/${this.props.userID}`)\r\n    .then(response => {\r\n        console.log(response)\r\n      this.setState({\r\n          isLoading : false,\r\n          tickets : response.data\r\n      });\r\n    });\r\n}\r\n\r\n  componentDidMount() {\r\n    this.getTickets();\r\n  }\r\n\r\n  render() {\r\n    const { isLoading, tickets, columns } = this.state;\r\n\r\n      return(\r\n          <>\r\n            <div style={{position:\"fixed\", top:\"5%\", left:\"45%\"}}>\r\n                <h1>Report us a bug:</h1>\r\n\r\n                <fieldset className=\"form-group\">\r\n                    <label>Subject:</label>\r\n                    <div className=\"input-group\">\r\n                        <input\r\n                            type=\"text\"\r\n                            name=\"subject\"\r\n                            className=\"form-control\"\r\n                            placeholder=\"(eg.: I couldn't save my preferences.)\"\r\n                            onChange={this.handleChange}\r\n                            required\r\n                        />\r\n                    </div>\r\n                </fieldset>\r\n\r\n                <fieldset className=\"form-group\">\r\n                    <label>Section:</label>\r\n                    <div className=\"input-group\">\r\n                        <input\r\n                            type=\"text\"\r\n                            name=\"section\"\r\n                            className=\"form-control\"\r\n                            placeholder=\"(eg.: Settings)\"\r\n                            onChange={this.handleChange}\r\n                            required\r\n                        />\r\n                    </div>\r\n                </fieldset>\r\n\r\n                <fieldset className=\"form-group\">\r\n                    <label>Steps:</label>\r\n                    <div className=\"input-group\">\r\n                        <textarea\r\n                            className=\"form-control\"\r\n                            name=\"steps\"\r\n                            placeholder=\"Describe the steps leading to the error separated by commas\"\r\n                            maxLength=\"500\"\r\n                            style={{width:\"400px\", height:\"200px\", resize:\"none\"}}\r\n                            onChange={this.handleChange}\r\n                            required\r\n                        />\r\n                    </div>\r\n                </fieldset>\r\n\r\n                <button \r\n                    type=\"button\" \r\n                    class=\"btn btn-warning\"\r\n                    onClick={this.handleClick}\r\n                >Send</button>\r\n\r\n                {isLoading !== true ? \r\n                    <>\r\n                        <br /><br />\r\n                        <h1>My tickets:</h1>\r\n                        <Table \r\n                            data={this.getFormattedTickets(tickets)}\r\n                            columnsData={columns}\r\n                        />\r\n                    </>\r\n                :\r\n                    <div style={{margin:\"auto\", width:\"30%\"}}>\r\n                        <Loading />\r\n                    </div>\r\n                }\r\n\r\n            </div>\r\n          </>\r\n      );\r\n  }\r\n}","D:\\Gyakran hasznalt\\Projects\\Codecool\\PHP\\TindR\\tindr-react\\src\\components\\Test.js",["147"],"import React, { Component } from 'react'\r\nimport axios from 'axios';\r\n//import hash from \"./hash\";\r\nimport { encoded,authEndpoint } from \"./spotify_config\";\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faPlay, faPause } from '@fortawesome/free-solid-svg-icons'\r\n\r\nexport default class Test extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        \r\n        this.state={\r\n            baseAPI:\"https://api.spotify.com/v1/tracks/\",\r\n            token:'',\r\n            isLoading:true,\r\n            externalWindow:'',\r\n            song:'',\r\n            isPlaying:false\r\n        }\r\n        this.player = React.createRef();\r\n        \r\n    }\r\n    audio=null;\r\n\r\n    async getToken(){\r\n        await axios.post(authEndpoint,\"grant_type=client_credentials\",{\r\n            headers:{\r\n                \"Authorization\": \"Basic \"+encoded\r\n            }\r\n        })\r\n        .then(resp=>{\r\n            this.setState({token:resp.data.access_token});\r\n        })\r\n        await this.getSong();\r\n    }\r\n\r\n    async getSong(){\r\n        if (this.props.songID === null){\r\n            return console.log('%c -------ERROR-------\\n SongID was null! \\n Refusing to send request. \\nAsk the user to set an anthem \\n---------------------', 'background: #222; color: red');\r\n        }\r\n        await axios.get(this.state.baseAPI+this.props.songID,{\r\n            headers: {\r\n                'Authorization':'Bearer '+this.state.token\r\n            }\r\n        })\r\n        .then(resp=>{\r\n            this.setState({song:resp.data,isLoading:false});\r\n        })\r\n        this.audio = new Audio(this.state.song.preview_url);\r\n    }\r\n\r\n    playClicked(){\r\n        this.setState({ isPlaying: !this.state.isPlaying }, () => {\r\n            this.state.isPlaying ? this.audio.play() : this.audio.pause();\r\n        });\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.getToken();\r\n    }\r\n\r\n    render() {\r\n        if (this.props.songID === null) {\r\n            return null;\r\n        }\r\n        if(this.state.isLoading){\r\n            return(\"haggyámátőteni\");\r\n        }\r\n        \r\n        return (\r\n            <>\r\n                <div className=\"card bg-secondary text-white\" style={{width:\"100%\"}}>\r\n                    <div className=\"row\">\r\n                        <div className=\"col-sm-2\" style={{position:\"relative\"}}>\r\n                            <img height=\"80\" src={this.state.song.album.images[0].url}></img>\r\n                        </div>\r\n                        <div className=\"col-sm-2\" style={{position:\"absolute\",top:\"30%\",left:\"3%\"}}>\r\n                            {this.state.isPlaying ? <FontAwesomeIcon onClick={this.playClicked.bind(this)} icon={faPause} size=\"2x\" /> : <FontAwesomeIcon onClick={this.playClicked.bind(this)} icon={faPlay} size=\"2x\" />}\r\n                        </div>\r\n                        <div style={{zIndex:\"-100\"}} className=\"col-sm-1\"></div>\r\n                        <div className=\"col-sm-8\">\r\n                            <div className=\"row\">\r\n                                <div className=\"col\">{this.state.song.artists[0].name} - {this.state.song.name}</div>\r\n                            </div>\r\n                            <div className=\"row\">\r\n                                <div className=\"col\"></div>\r\n                            </div>\r\n                            <div className=\"row\">\r\n                                <div className=\"col\"></div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </>\r\n        )\r\n    }\r\n}","D:\\Gyakran hasznalt\\Projects\\Codecool\\PHP\\TindR\\tindr-react\\src\\components\\Table.js",["148","149","150"],"import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { useTable, useExpanded } from 'react-table'\r\n\r\nconst Styles = styled.div`\r\n  padding: 1rem;\r\n\r\n  table {\r\n    border-spacing: 0;\r\n    border: 1px solid black;\r\n\r\n    tr {\r\n      :last-child {\r\n        td {\r\n          border-bottom: 0;\r\n        }\r\n      }\r\n    }\r\n\r\n    th,\r\n    td {\r\n      margin: 0;\r\n      padding: 0.5rem;\r\n      border-bottom: 1px solid black;\r\n      border-right: 1px solid black;\r\n\r\n      :last-child {\r\n        border-right: 0;\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\n// A simple way to support a renderRowSubComponent is to make a render prop\r\n// This is NOT part of the React Table API, it's merely a rendering\r\n// option we are creating for ourselves in our table renderer\r\nfunction Table({ columns: userColumns, data, renderRowSubComponent }) {\r\n  const {\r\n    getTableProps,\r\n    getTableBodyProps,\r\n    headerGroups,\r\n    rows,\r\n    prepareRow,\r\n    visibleColumns,\r\n    state: { expanded },\r\n  } = useTable(\r\n    {\r\n      columns: userColumns,\r\n      data,\r\n    },\r\n    useExpanded // We can useExpanded to track the expanded state\r\n    // for sub components too!\r\n  )\r\n\r\n  return (\r\n    <>\r\n      <table {...getTableProps()}>\r\n        <thead>\r\n          {headerGroups.map(headerGroup => (\r\n            <tr {...headerGroup.getHeaderGroupProps()}>\r\n              {headerGroup.headers.map(column => (\r\n                <th {...column.getHeaderProps()}>{column.render('Header')}</th>\r\n              ))}\r\n            </tr>\r\n          ))}\r\n        </thead>\r\n        <tbody {...getTableBodyProps()}>\r\n          {rows.map((row, i) => {\r\n            prepareRow(row)\r\n            return (\r\n              // Use a React.Fragment here so the table markup is still valid\r\n              <React.Fragment {...row.getRowProps()}>\r\n                <tr>\r\n                  {row.cells.map(cell => {\r\n                    return (\r\n                      <td {...cell.getCellProps()}>{cell.render('Cell')}</td>\r\n                    )\r\n                  })}\r\n                </tr>\r\n                {/*\r\n                    If the row is in an expanded state, render a row with a\r\n                    column that fills the entire length of the table.\r\n                  */}\r\n                {row.isExpanded ? (\r\n                  <tr>\r\n                    <td colSpan={visibleColumns.length}>\r\n                      {/*\r\n                          Inside it, call our renderRowSubComponent function. In reality,\r\n                          you could pass whatever you want as props to\r\n                          a component like this, including the entire\r\n                          table instance. But for this example, we'll just\r\n                          pass the row\r\n                        */}\r\n                      {renderRowSubComponent({ row })}\r\n                    </td>\r\n                  </tr>\r\n                ) : null}\r\n              </React.Fragment>\r\n            )\r\n          })}\r\n        </tbody>\r\n      </table>\r\n    </>\r\n  )\r\n}\r\n\r\nfunction App({data, columnsData}) {\r\n  const columns = React.useMemo(\r\n    () => [\r\n      {\r\n        // Make an expander cell\r\n        Header: () => null, // No header\r\n        id: 'expander', // It needs an ID\r\n        Cell: ({ row }) => (\r\n          // Use Cell to render an expander for each row.\r\n          // We can use the getToggleRowExpandedProps prop-getter\r\n          // to build the expander.\r\n          <span {...row.getToggleRowExpandedProps()}>\r\n            {row.isExpanded ? '👇' : '👉'}\r\n          </span>\r\n        ),\r\n      },\r\n    ],\r\n    []\r\n  )\r\n  \r\n  columnsData.map(c => {\r\n      columns.push(c)\r\n  })\r\n\r\n  // Create a function that will render our row sub components\r\n  const renderRowSubComponent = React.useCallback(\r\n    ({ row }) => (\r\n      <pre\r\n        style={{\r\n          fontSize: '10px',\r\n        }}\r\n      >\r\n          <p>Steps:</p>\r\n        {data[row.index].steps.split(\",\").map(s =>\r\n            <ul>\r\n                <li>{s}</li>\r\n            </ul>\r\n        )}\r\n\r\n      </pre>\r\n    ),\r\n    []\r\n  )\r\n\r\n  return (\r\n    <Styles>\r\n      <Table\r\n        columns={columns}\r\n        data={data}\r\n        // We added this as a prop for our table component\r\n        // Remember, this is not part of the React Table API,\r\n        // it's merely a rendering option we created for\r\n        // ourselves\r\n        renderRowSubComponent={renderRowSubComponent}\r\n      />\r\n    </Styles>\r\n  )\r\n}\r\n\r\nexport default App\r\n","D:\\Gyakran hasznalt\\Projects\\Codecool\\PHP\\TindR\\tindr-react\\src\\components\\AdminTicketTable.js",["151","152","153","154","155"],"D:\\Gyakran hasznalt\\Projects\\Codecool\\PHP\\TindR\\tindr-react\\src\\components\\ShowTickets.js",["156"],"D:\\Gyakran hasznalt\\Projects\\Codecool\\PHP\\TindR\\tindr-react\\src\\components\\DeckLoading.js",[],"D:\\Gyakran hasznalt\\Projects\\Codecool\\PHP\\TindR\\tindr-react\\src\\reportWebVitals.js",[],{"ruleId":"157","severity":1,"message":"158","line":4,"column":9,"nodeType":"159","messageId":"160","endLine":4,"endColumn":14},{"ruleId":"157","severity":1,"message":"161","line":14,"column":8,"nodeType":"159","messageId":"160","endLine":14,"endColumn":16},{"ruleId":"162","severity":1,"message":"163","line":189,"column":39,"nodeType":"164","messageId":"165","endLine":189,"endColumn":41},{"ruleId":"166","severity":1,"message":"167","line":245,"column":11,"nodeType":"168","endLine":245,"endColumn":60},{"ruleId":"169","severity":1,"message":"170","line":380,"column":21,"nodeType":"168","endLine":380,"endColumn":132},{"ruleId":"171","replacedBy":"172"},{"ruleId":"173","replacedBy":"174"},{"ruleId":"171","replacedBy":"175"},{"ruleId":"173","replacedBy":"176"},{"ruleId":"157","severity":1,"message":"177","line":2,"column":10,"nodeType":"159","messageId":"160","endLine":2,"endColumn":16},{"ruleId":"162","severity":1,"message":"163","line":64,"column":49,"nodeType":"164","messageId":"165","endLine":64,"endColumn":51},{"ruleId":"178","severity":1,"message":"179","line":145,"column":25,"nodeType":"168","endLine":150,"endColumn":30},{"ruleId":"180","severity":1,"message":"181","line":173,"column":21,"nodeType":"168","endLine":173,"endColumn":40},{"ruleId":"171","replacedBy":"182"},{"ruleId":"173","replacedBy":"183"},{"ruleId":"184","severity":1,"message":"185","line":52,"column":6,"nodeType":"186","endLine":52,"endColumn":15,"suggestions":"187"},{"ruleId":"188","severity":1,"message":"189","line":98,"column":22,"nodeType":"190","messageId":"191","endLine":98,"endColumn":24},{"ruleId":"188","severity":1,"message":"189","line":117,"column":30,"nodeType":"190","messageId":"191","endLine":117,"endColumn":32},{"ruleId":"188","severity":1,"message":"192","line":68,"column":27,"nodeType":"190","messageId":"191","endLine":68,"endColumn":29},{"ruleId":"188","severity":1,"message":"192","line":68,"column":50,"nodeType":"190","messageId":"191","endLine":68,"endColumn":52},{"ruleId":"188","severity":1,"message":"192","line":110,"column":25,"nodeType":"190","messageId":"191","endLine":110,"endColumn":27},{"ruleId":"188","severity":1,"message":"192","line":138,"column":22,"nodeType":"190","messageId":"191","endLine":138,"endColumn":24},{"ruleId":"188","severity":1,"message":"192","line":140,"column":41,"nodeType":"190","messageId":"191","endLine":140,"endColumn":43},{"ruleId":"188","severity":1,"message":"192","line":140,"column":76,"nodeType":"190","messageId":"191","endLine":140,"endColumn":78},{"ruleId":"188","severity":1,"message":"192","line":158,"column":39,"nodeType":"190","messageId":"191","endLine":158,"endColumn":41},{"ruleId":"188","severity":1,"message":"192","line":191,"column":22,"nodeType":"190","messageId":"191","endLine":191,"endColumn":24},{"ruleId":"188","severity":1,"message":"192","line":258,"column":15,"nodeType":"190","messageId":"191","endLine":258,"endColumn":17},{"ruleId":"188","severity":1,"message":"189","line":259,"column":24,"nodeType":"190","messageId":"191","endLine":259,"endColumn":26},{"ruleId":"188","severity":1,"message":"192","line":262,"column":20,"nodeType":"190","messageId":"191","endLine":262,"endColumn":22},{"ruleId":"188","severity":1,"message":"189","line":263,"column":24,"nodeType":"190","messageId":"191","endLine":263,"endColumn":26},{"ruleId":"188","severity":1,"message":"192","line":292,"column":27,"nodeType":"190","messageId":"191","endLine":292,"endColumn":29},{"ruleId":"188","severity":1,"message":"192","line":292,"column":50,"nodeType":"190","messageId":"191","endLine":292,"endColumn":52},{"ruleId":"188","severity":1,"message":"192","line":324,"column":26,"nodeType":"190","messageId":"191","endLine":324,"endColumn":28},{"ruleId":"157","severity":1,"message":"193","line":389,"column":24,"nodeType":"159","messageId":"160","endLine":389,"endColumn":30},{"ruleId":"188","severity":1,"message":"189","line":423,"column":34,"nodeType":"190","messageId":"191","endLine":423,"endColumn":36},{"ruleId":"180","severity":1,"message":"181","line":445,"column":21,"nodeType":"168","endLine":445,"endColumn":53},{"ruleId":"166","severity":1,"message":"194","line":450,"column":17,"nodeType":"168","endLine":452,"endColumn":18},{"ruleId":"166","severity":1,"message":"194","line":463,"column":17,"nodeType":"168","endLine":465,"endColumn":18},{"ruleId":"171","replacedBy":"195"},{"ruleId":"173","replacedBy":"196"},{"ruleId":"162","severity":1,"message":"163","line":22,"column":45,"nodeType":"164","messageId":"165","endLine":22,"endColumn":47},{"ruleId":"180","severity":1,"message":"181","line":42,"column":25,"nodeType":"168","endLine":42,"endColumn":87},{"ruleId":"197","severity":1,"message":"198","line":8,"column":17,"nodeType":"199","endLine":8,"endColumn":63},{"ruleId":"171","replacedBy":"200"},{"ruleId":"173","replacedBy":"201"},{"ruleId":"180","severity":1,"message":"181","line":136,"column":25,"nodeType":"168","endLine":136,"endColumn":57},{"ruleId":"202","severity":1,"message":"203","line":148,"column":25,"nodeType":"168","endLine":148,"endColumn":158},{"ruleId":"157","severity":1,"message":"204","line":1,"column":27,"nodeType":"159","messageId":"160","endLine":1,"endColumn":36},{"ruleId":"157","severity":1,"message":"205","line":7,"column":10,"nodeType":"159","messageId":"160","endLine":7,"endColumn":20},{"ruleId":"162","severity":1,"message":"163","line":80,"column":21,"nodeType":"164","messageId":"165","endLine":80,"endColumn":23},{"ruleId":"180","severity":1,"message":"181","line":75,"column":29,"nodeType":"168","endLine":75,"endColumn":88},{"ruleId":"157","severity":1,"message":"206","line":45,"column":14,"nodeType":"159","messageId":"160","endLine":45,"endColumn":22},{"ruleId":"162","severity":1,"message":"163","line":127,"column":21,"nodeType":"164","messageId":"165","endLine":127,"endColumn":23},{"ruleId":"184","severity":1,"message":"207","line":148,"column":5,"nodeType":"186","endLine":148,"endColumn":7,"suggestions":"208"},{"ruleId":"157","severity":1,"message":"209","line":90,"column":10,"nodeType":"159","messageId":"160","endLine":90,"endColumn":28},{"ruleId":"157","severity":1,"message":"210","line":182,"column":10,"nodeType":"159","messageId":"160","endLine":182,"endColumn":17},{"ruleId":"157","severity":1,"message":"211","line":209,"column":5,"nodeType":"159","messageId":"160","endLine":209,"endColumn":19},{"ruleId":"157","severity":1,"message":"206","line":210,"column":14,"nodeType":"159","messageId":"160","endLine":210,"endColumn":22},{"ruleId":"184","severity":1,"message":"212","line":395,"column":5,"nodeType":"186","endLine":395,"endColumn":7,"suggestions":"213"},{"ruleId":"162","severity":1,"message":"163","line":35,"column":23,"nodeType":"164","messageId":"165","endLine":35,"endColumn":25},"no-unused-vars","'Badge' is defined but never used.","Identifier","unusedVar","'Checkbox' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","react/jsx-pascal-case","Imported JSX component Picture_upload must be in PascalCase or SCREAMING_SNAKE_CASE","no-native-reassign",["214"],"no-negated-in-lhs",["215"],["214"],["215"],"'Helmet' is defined but never used.","jsx-a11y/iframe-has-title","<iframe> elements must have a unique title property.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.",["214"],["215"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'userID'. Either include it or remove the dependency array.","ArrayExpression",["216"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","Expected '===' and instead saw '=='.","'accept' is assigned a value but never used.","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md",["214"],["215"],"react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute",["214"],["215"],"jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","'useEffect' is defined but never used.","'useGesture' is defined but never used.","'expanded' is assigned a value but never used.","React Hook React.useCallback has a missing dependency: 'data'. Either include it or remove the dependency array.",["217"],"'SliderColumnFilter' is defined but never used.","'shuffle' is defined but never used.","'setColumnOrder' is assigned a value but never used.","React Hook React.useCallback has missing dependencies: 'data' and 'updateTicket'. Either include them or remove the dependency array. If 'updateTicket' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["218"],"no-global-assign","no-unsafe-negation",{"desc":"219","fix":"220"},{"desc":"221","fix":"222"},{"desc":"223","fix":"224"},"Update the dependencies array to be: [doFetch, userID]",{"range":"225","text":"226"},"Update the dependencies array to be: [data]",{"range":"227","text":"228"},"Update the dependencies array to be: [data, updateTicket]",{"range":"229","text":"230"},[1302,1311],"[doFetch, userID]",[4045,4047],"[data]",[10889,10891],"[data, updateTicket]"]