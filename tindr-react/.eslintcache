[{"D:\\Gyakran hasznalt\\Projects\\Codecool\\PHP\\TindR\\tindr-react\\src\\components\\Loading.js":"1","D:\\Gyakran hasznalt\\Projects\\Codecool\\PHP\\TindR\\tindr-react\\src\\components\\Asd.js":"2","D:\\Gyakran hasznalt\\Projects\\Codecool\\PHP\\TindR\\tindr-react\\src\\components\\Test.js":"3","D:\\Gyakran hasznalt\\Projects\\Codecool\\PHP\\TindR\\tindr-react\\src\\components\\ShowTickets.js":"4","D:\\Gyakran hasznalt\\Projects\\Codecool\\PHP\\TindR\\tindr-react\\src\\components\\AdminTicketTable.js":"5","D:\\Gyakran hasznalt\\Projects\\Codecool\\PHP\\TindR\\tindr-react\\src\\index.js":"6","D:\\Gyakran hasznalt\\Projects\\Codecool\\PHP\\TindR\\tindr-react\\src\\components\\chat\\ChannelList.js":"7","D:\\Gyakran hasznalt\\Projects\\Codecool\\PHP\\TindR\\tindr-react\\src\\App.js":"8","D:\\Gyakran hasznalt\\Projects\\Codecool\\PHP\\TindR\\tindr-react\\src\\components\\InvalidPage.js":"9"},{"size":1409,"mtime":1610452928155,"results":"10","hashOfConfig":"11"},{"size":2389,"mtime":1611666264804,"results":"12","hashOfConfig":"11"},{"size":3576,"mtime":1609841141117,"results":"13","hashOfConfig":"11"},{"size":2570,"mtime":1611825502029,"results":"14","hashOfConfig":"11"},{"size":11401,"mtime":1611824599690,"results":"15","hashOfConfig":"11"},{"size":618,"mtime":1607676433648,"results":"16","hashOfConfig":"11"},{"size":656,"mtime":1612265460967,"results":"17","hashOfConfig":"11"},{"size":4935,"mtime":1612784974474,"results":"18","hashOfConfig":"11"},{"size":8522,"mtime":1612785099150,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22","usedDeprecatedRules":"23"},"1msjh8u",{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"28","messages":"29","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"30","messages":"31","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"23"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"D:\\Gyakran hasznalt\\Projects\\Codecool\\PHP\\TindR\\tindr-react\\src\\components\\Loading.js",["41"],"import React, { Component } from 'react'\r\n\r\nexport default class Loading extends Component {\r\n    render() {\r\n        return (\r\n            <svg \r\n                xmlns=\"http://www.w3.org/2000/svg\" \r\n                xmlns={{xlink:\"http://www.w3.org/1999/xlink\"}} \r\n                style={{margin:'auto', background:'#fff', display:'block', float:'left'}} \r\n                width=\"100px\" \r\n                height=\"100px\" \r\n                viewBox=\"0 0 100 100\" \r\n                preserveAspectRatio=\"xMidYMid\"\r\n            >\r\n                <path \r\n                    fill=\"none\" \r\n                    stroke=\"#e90c59\" \r\n                    stroke-width=\"8\" \r\n                    stroke-dasharray=\"42.76482137044271 42.76482137044271\" \r\n                    d=\"M24.3 30C11.4 30 5 43.3 5 50s6.4 20 19.3 20c19.3 0 32.1-40 51.4-40 C88.6 30 95 43.3 95 50s-6.4 20-19.3 20C56.4 70 43.6 30 24.3 30z\" \r\n                    stroke-linecap=\"round\" \r\n                    style={{transform:'scale(0.8)', transformOrigin:'50px 50px'}}\r\n                >\r\n                    <animate \r\n                        attributeName=\"stroke-dashoffset\" \r\n                        repeatCount=\"indefinite\" \r\n                        dur=\"1s\" \r\n                        keyTimes=\"0;1\" \r\n                        values=\"0;256.58892822265625\"\r\n                    ></animate>\r\n                </path>\r\n        </svg>\r\n        );\r\n    }\r\n}",["42","43"],"D:\\Gyakran hasznalt\\Projects\\Codecool\\PHP\\TindR\\tindr-react\\src\\components\\Asd.js",[],"D:\\Gyakran hasznalt\\Projects\\Codecool\\PHP\\TindR\\tindr-react\\src\\components\\Test.js",["44"],"D:\\Gyakran hasznalt\\Projects\\Codecool\\PHP\\TindR\\tindr-react\\src\\components\\ShowTickets.js",["45"],"D:\\Gyakran hasznalt\\Projects\\Codecool\\PHP\\TindR\\tindr-react\\src\\components\\AdminTicketTable.js",["46","47","48","49","50"],"import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { useTable, useSortBy, useFilters, useColumnOrder, useExpanded } from 'react-table'\r\nimport { motion, AnimatePresence } from 'framer-motion'\r\nimport {matchSorter} from 'match-sorter'\r\n\r\nconst Styles = styled.div`\r\n  padding: 1rem;\r\n\r\n  table {\r\n    border-spacing: 0;\r\n    border: 1px solid black;\r\n\r\n    tr {\r\n      :last-child {\r\n        td {\r\n          border-bottom: 0;\r\n        }\r\n      }\r\n    }\r\n\r\n    th,\r\n    td {\r\n      margin: 0;\r\n      padding: 0.5rem;\r\n      border-bottom: 1px solid black;\r\n      border-right: 1px solid black;\r\n      background: white;\r\n\r\n      :last-child {\r\n        border-right: 0; \r\n      }\r\n    }\r\n  }\r\n`\r\n\r\n// Define a default UI for filtering\r\nfunction DefaultColumnFilter({\r\n  column: { filterValue, preFilteredRows, setFilter },\r\n}) {\r\n  const count = preFilteredRows.length\r\n\r\n  return (\r\n    <input\r\n      value={filterValue || ''}\r\n      onChange={e => {\r\n        setFilter(e.target.value || undefined) // Set undefined to remove the filter entirely\r\n      }}\r\n      placeholder={`Search ${count} records...`}\r\n    />\r\n  )\r\n}\r\n\r\n// This is a custom filter UI for selecting\r\n// a unique option from a list\r\nfunction SelectColumnFilter({\r\n  column: { filterValue, setFilter, preFilteredRows, id },\r\n}) {\r\n  // Calculate the options for filtering\r\n  // using the preFilteredRows\r\n  const options = React.useMemo(() => {\r\n    const options = new Set()\r\n    preFilteredRows.forEach(row => {\r\n      options.add(row.values[id])\r\n    })\r\n    return [...options.values()]\r\n  }, [id, preFilteredRows])\r\n\r\n  // Render a multi-select box\r\n  return (\r\n    <select\r\n      value={filterValue}\r\n      onChange={e => {\r\n        setFilter(e.target.value || undefined)\r\n      }}\r\n    >\r\n      <option value=\"\">All</option>\r\n      {options.map((option, i) => (\r\n        <option key={i} value={option}>\r\n          {option}\r\n        </option>\r\n      ))}\r\n    </select>\r\n  )\r\n}\r\n\r\n// This is a custom filter UI that uses a\r\n// slider to set the filter value between a column's\r\n// min and max values\r\nfunction SliderColumnFilter({\r\n  column: { filterValue, setFilter, preFilteredRows, id },\r\n}) {\r\n  // Calculate the min and max\r\n  // using the preFilteredRows\r\n\r\n  const [min, max] = React.useMemo(() => {\r\n    let min = preFilteredRows.length ? preFilteredRows[0].values[id] : 0\r\n    let max = preFilteredRows.length ? preFilteredRows[0].values[id] : 0\r\n    preFilteredRows.forEach(row => {\r\n      min = Math.min(row.values[id], min)\r\n      max = Math.max(row.values[id], max)\r\n    })\r\n    return [min, max]\r\n  }, [id, preFilteredRows])\r\n\r\n  return (\r\n    <>\r\n      <input\r\n        type=\"range\"\r\n        min={min}\r\n        max={max}\r\n        value={filterValue || min}\r\n        onChange={e => {\r\n          setFilter(parseInt(e.target.value, 10))\r\n        }}\r\n      />\r\n      <button onClick={() => setFilter(undefined)}>Off</button>\r\n    </>\r\n  )\r\n}\r\n\r\n// This is a custom UI for our 'between' or number range\r\n// filter. It uses two number boxes and filters rows to\r\n// ones that have values between the two\r\nfunction NumberRangeColumnFilter({\r\n  column: { filterValue = [], preFilteredRows, setFilter, id },\r\n}) {\r\n  const [min, max] = React.useMemo(() => {\r\n    let min = preFilteredRows.length ? preFilteredRows[0].values[id] : 0\r\n    let max = preFilteredRows.length ? preFilteredRows[0].values[id] : 0\r\n    preFilteredRows.forEach(row => {\r\n      min = Math.min(row.values[id], min)\r\n      max = Math.max(row.values[id], max)\r\n    })\r\n    return [min, max]\r\n  }, [id, preFilteredRows])\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        display: 'flex',\r\n      }}\r\n    >\r\n      <input\r\n        value={filterValue[0] || ''}\r\n        type=\"number\"\r\n        onChange={e => {\r\n          const val = e.target.value\r\n          setFilter((old = []) => [val ? parseInt(val, 10) : undefined, old[1]])\r\n        }}\r\n        placeholder={`Min (${min})`}\r\n        style={{\r\n          width: '70px',\r\n          marginRight: '0.5rem',\r\n        }}\r\n      />\r\n      to\r\n      <input\r\n        value={filterValue[1] || ''}\r\n        type=\"number\"\r\n        onChange={e => {\r\n          const val = e.target.value\r\n          setFilter((old = []) => [old[0], val ? parseInt(val, 10) : undefined])\r\n        }}\r\n        placeholder={`Max (${max})`}\r\n        style={{\r\n          width: '70px',\r\n          marginLeft: '0.5rem',\r\n        }}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nfunction fuzzyTextFilterFn(rows, id, filterValue) {\r\n  return matchSorter(rows, filterValue, { keys: [row => row.values[id]] })\r\n}\r\n\r\n// Let the table remove the filter if the string is empty\r\nfuzzyTextFilterFn.autoRemove = val => !val\r\n\r\nfunction shuffle(arr) {\r\n  arr = [...arr]\r\n  const shuffled = []\r\n  while (arr.length) {\r\n    const rand = Math.floor(Math.random() * arr.length)\r\n    shuffled.push(arr.splice(rand, 1)[0])\r\n  }\r\n  return shuffled\r\n}\r\n\r\nfunction Table({ columns, data, renderRowSubComponent }) {\r\n  console.log(columns)\r\n  const defaultColumn = React.useMemo(\r\n    () => ({\r\n      // Let's set up our default Filter UI\r\n      Filter: DefaultColumnFilter,\r\n    }),\r\n    []\r\n  )\r\n\r\n  const {\r\n    getTableProps,\r\n    getTableBodyProps,\r\n    headerGroups,\r\n    rows,\r\n    visibleColumns,\r\n    prepareRow,\r\n    setColumnOrder,\r\n    state: { expanded },\r\n  } = useTable(\r\n    {\r\n      columns,\r\n      data,\r\n      defaultColumn,\r\n    },\r\n    useColumnOrder,\r\n    useFilters,\r\n    useSortBy,\r\n    useExpanded\r\n  )\r\n\r\n  const spring = React.useMemo(\r\n    () => ({\r\n      type: 'spring',\r\n      damping: 50,\r\n      stiffness: 100,\r\n    }),\r\n    []\r\n  )\r\n\r\n  return (\r\n    <>\r\n      <table {...getTableProps()}>\r\n        <thead>\r\n          {headerGroups.map((headerGroup, i) => (\r\n            <tr {...headerGroup.getHeaderGroupProps()}>\r\n              {headerGroup.headers.map(column => (\r\n                <motion.th\r\n                  {...column.getHeaderProps({\r\n                    layoutTransition: spring,\r\n                    style: {\r\n                      minWidth: column.minWidth,\r\n                    },\r\n                  })}\r\n                >\r\n                  <div {...column.getSortByToggleProps()}>\r\n                    {column.render('Header')}\r\n                    <span>\r\n                      {column.isSorted\r\n                        ? column.isSortedDesc\r\n                          ? ' 🔽'\r\n                          : ' 🔼'\r\n                        : ''}\r\n                    </span>\r\n                  </div>\r\n                  <div>{column.canFilter ? column.render('Filter') : null}</div>\r\n                </motion.th>\r\n              ))}\r\n            </tr>\r\n          ))}\r\n        </thead>\r\n        <tbody {...getTableBodyProps()}>\r\n          <AnimatePresence>\r\n            {rows.slice(0, 10).map((row, i) => {\r\n              prepareRow(row)\r\n              return (\r\n                <>\r\n                <motion.tr\r\n                  {...row.getRowProps({\r\n                    layoutTransition: spring,\r\n                    exit: { opacity: 0, maxHeight: 0 },\r\n                  })}\r\n                >\r\n                  {row.cells.map((cell, i) => {\r\n                    return (\r\n                      <motion.td\r\n                        {...cell.getCellProps({\r\n                          layoutTransition: spring,\r\n                        })}\r\n                      >\r\n                        {cell.render('Cell')}\r\n                      </motion.td>\r\n                    )\r\n                  })}\r\n                </motion.tr>\r\n                {row.isExpanded ? (\r\n                  <tr>\r\n                    <td colSpan={visibleColumns.length}>\r\n                      {/*\r\n                          Inside it, call our renderRowSubComponent function. In reality,\r\n                          you could pass whatever you want as props to\r\n                          a component like this, including the entire\r\n                          table instance. But for this example, we'll just\r\n                          pass the row\r\n                        */}\r\n                      {renderRowSubComponent({ row })}\r\n                    </td>\r\n                  </tr>\r\n                ) : null}\r\n                </>\r\n              )\r\n            })}\r\n          </AnimatePresence>\r\n        </tbody>\r\n      </table>\r\n    </>\r\n  )\r\n}\r\n\r\n// Define a custom filter filter function!\r\nfunction filterGreaterThan(rows, id, filterValue) {\r\n  return rows.filter(row => {\r\n    const rowValue = row.values[id]\r\n    return rowValue >= filterValue\r\n  })\r\n}\r\n\r\n// This is an autoRemove method on the filter function that\r\n// when given the new filter value and returns true, the filter\r\n// will be automatically removed. Normally this is just an undefined\r\n// check, but here, we want to remove the filter if it's not a number\r\nfilterGreaterThan.autoRemove = val => typeof val !== 'number'\r\n\r\nfunction App({data, updateTicket}) {\r\n  const columns = React.useMemo(\r\n    () => [\r\n      {\r\n        // Make an expander cell\r\n        Header: () => null, // No header\r\n        id: 'expander', // It needs an ID\r\n        Cell: ({ row }) => (\r\n          // Use Cell to render an expander for each row.\r\n          // We can use the getToggleRowExpandedProps prop-getter\r\n          // to build the expander.\r\n          <span {...row.getToggleRowExpandedProps()}>\r\n            {row.isExpanded ? '👇' : '👉'}\r\n          </span>\r\n        ),\r\n      },\r\n        {\r\n          Header: 'ID',\r\n          accessor: 'id',\r\n          Filter: NumberRangeColumnFilter,\r\n          filter: \"between\"\r\n        },\r\n        {\r\n          Header: 'Date',\r\n          accessor: 'date',\r\n        },\r\n        {\r\n          Header: 'Subject',\r\n          accessor: 'subject',\r\n        },\r\n        {\r\n          Header: 'Section',\r\n          accessor: 'section',\r\n        },\r\n        {\r\n          Header: 'Status',\r\n          accessor: 'solved',\r\n          Filter: SelectColumnFilter,\r\n          filter: 'includes'\r\n        },\r\n    ],\r\n    []\r\n  )\r\n\r\n  // Create a function that will render our row sub components\r\n  const renderRowSubComponent = React.useCallback(\r\n    ({ row }) => (\r\n      <>\r\n        <pre style={{fontSize: '10px', position: 'relative'}}>\r\n\r\n          <p style={{textAlign:'center'}}><b>Notifier ID: {data[row.index].notifier_id}</b></p>\r\n          \r\n          <p>Steps:</p>\r\n          {data[row.index].steps.split(\",\").map(s =>\r\n            <ul>\r\n                <li>{s}</li>\r\n            </ul>\r\n          )}\r\n\r\n          <div style={{position: \"absolute\", right:\"2%\", bottom:'0%'}}>\r\n            <button\r\n              type=\"button\" \r\n              className={data[row.index].solved === \"Closed\" ? \"btn btn-warning\" : \"btn btn-success\"} \r\n              onClick={() => {\r\n                updateTicket(\r\n                  data[row.index].id, \r\n                  data[row.index].solved === \"Closed\" ? false : true\r\n                )}}\r\n            >\r\n              {data[row.index].solved === \"Closed\" ? \"Re-open\" : \"Close\"}\r\n            </button>\r\n\r\n            {data[row.index].solver_id !== null &&\r\n              <p>Solver ID: {data[row.index].solver_id}</p>\r\n            }\r\n          </div>\r\n\r\n        </pre>\r\n      </>\r\n    ),\r\n    []\r\n  )\r\n\r\n  return (\r\n    <Styles>\r\n      <Table \r\n        columns={columns} \r\n        data={data}\r\n        renderRowSubComponent={renderRowSubComponent}\r\n      />\r\n    </Styles>\r\n  )\r\n}\r\n\r\nexport default App\r\n","D:\\Gyakran hasznalt\\Projects\\Codecool\\PHP\\TindR\\tindr-react\\src\\index.js",[],"D:\\Gyakran hasznalt\\Projects\\Codecool\\PHP\\TindR\\tindr-react\\src\\components\\chat\\ChannelList.js",[],"D:\\Gyakran hasznalt\\Projects\\Codecool\\PHP\\TindR\\tindr-react\\src\\App.js",[],"D:\\Gyakran hasznalt\\Projects\\Codecool\\PHP\\TindR\\tindr-react\\src\\components\\InvalidPage.js",["51"],{"ruleId":"52","severity":1,"message":"53","line":8,"column":17,"nodeType":"54","endLine":8,"endColumn":63},{"ruleId":"55","replacedBy":"56"},{"ruleId":"57","replacedBy":"58"},{"ruleId":"59","severity":1,"message":"60","line":75,"column":29,"nodeType":"61","endLine":75,"endColumn":88},{"ruleId":"62","severity":1,"message":"63","line":35,"column":23,"nodeType":"64","messageId":"65","endLine":35,"endColumn":25},{"ruleId":"66","severity":1,"message":"67","line":90,"column":10,"nodeType":"68","messageId":"69","endLine":90,"endColumn":28},{"ruleId":"66","severity":1,"message":"70","line":182,"column":10,"nodeType":"68","messageId":"69","endLine":182,"endColumn":17},{"ruleId":"66","severity":1,"message":"71","line":209,"column":5,"nodeType":"68","messageId":"69","endLine":209,"endColumn":19},{"ruleId":"66","severity":1,"message":"72","line":210,"column":14,"nodeType":"68","messageId":"69","endLine":210,"endColumn":22},{"ruleId":"73","severity":1,"message":"74","line":405,"column":5,"nodeType":"75","endLine":405,"endColumn":7,"suggestions":"76"},{"ruleId":"52","severity":1,"message":"53","line":18,"column":21,"nodeType":"54","endLine":18,"endColumn":55},"react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","no-native-reassign",["77"],"no-negated-in-lhs",["78"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","no-unused-vars","'SliderColumnFilter' is defined but never used.","Identifier","unusedVar","'shuffle' is defined but never used.","'setColumnOrder' is assigned a value but never used.","'expanded' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook React.useCallback has missing dependencies: 'data' and 'updateTicket'. Either include them or remove the dependency array. If 'updateTicket' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["79"],"no-global-assign","no-unsafe-negation",{"desc":"80","fix":"81"},"Update the dependencies array to be: [data, updateTicket]",{"range":"82","text":"83"},[11182,11184],"[data, updateTicket]"]