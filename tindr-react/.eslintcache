[{"D:\\Gyakran hasznalt\\Projects\\Codecool\\PHP\\TindR\\tindr-react\\src\\components\\SideBar.js":"1","D:\\Gyakran hasznalt\\Projects\\Codecool\\PHP\\TindR\\tindr-react\\src\\index.js":"2","D:\\Gyakran hasznalt\\Projects\\Codecool\\PHP\\TindR\\tindr-react\\src\\components\\Deck.js":"3","D:\\Gyakran hasznalt\\Projects\\Codecool\\PHP\\TindR\\tindr-react\\src\\components\\WelcomePage.js":"4","D:\\Gyakran hasznalt\\Projects\\Codecool\\PHP\\TindR\\tindr-react\\src\\components\\Card.js":"5","D:\\Gyakran hasznalt\\Projects\\Codecool\\PHP\\TindR\\tindr-react\\src\\components\\Settings.js":"6","D:\\Gyakran hasznalt\\Projects\\Codecool\\PHP\\TindR\\tindr-react\\src\\App.js":"7","D:\\Gyakran hasznalt\\Projects\\Codecool\\PHP\\TindR\\tindr-react\\src\\components\\Asd.js":"8","D:\\Gyakran hasznalt\\Projects\\Codecool\\PHP\\TindR\\tindr-react\\src\\reportWebVitals.js":"9","D:\\Gyakran hasznalt\\Projects\\Codecool\\PHP\\TindR\\tindr-react\\src\\components\\Test.js":"10","D:\\Gyakran hasznalt\\Projects\\Codecool\\PHP\\TindR\\tindr-react\\src\\components\\Picture_upload.js":"11","D:\\Gyakran hasznalt\\Projects\\Codecool\\PHP\\TindR\\tindr-react\\src\\components\\Recommendations.js":"12","D:\\Gyakran hasznalt\\Projects\\Codecool\\PHP\\TindR\\tindr-react\\src\\components\\Loading.js":"13","D:\\Gyakran hasznalt\\Projects\\Codecool\\PHP\\TindR\\tindr-react\\src\\components\\Pulse.js":"14","D:\\Gyakran hasznalt\\Projects\\Codecool\\PHP\\TindR\\tindr-react\\src\\components\\spotify_config.js":"15"},{"size":15152,"mtime":1610539830518,"results":"16","hashOfConfig":"17"},{"size":618,"mtime":1607676433648,"results":"18","hashOfConfig":"17"},{"size":3294,"mtime":1610621710546,"results":"19","hashOfConfig":"17"},{"size":16234,"mtime":1610539917431,"results":"20","hashOfConfig":"17"},{"size":2715,"mtime":1610528391868,"results":"21","hashOfConfig":"17"},{"size":4352,"mtime":1607945078492,"results":"22","hashOfConfig":"17"},{"size":3601,"mtime":1610618965326,"results":"23","hashOfConfig":"17"},{"size":3412,"mtime":1610622746684,"results":"24","hashOfConfig":"17"},{"size":362,"mtime":1606466984298,"results":"25","hashOfConfig":"17"},{"size":3576,"mtime":1609841141117,"results":"26","hashOfConfig":"17"},{"size":5714,"mtime":1610539747854,"results":"27","hashOfConfig":"17"},{"size":9584,"mtime":1607941601080,"results":"28","hashOfConfig":"17"},{"size":1409,"mtime":1610452928155,"results":"29","hashOfConfig":"17"},{"size":1445,"mtime":1610539762437,"results":"30","hashOfConfig":"17"},{"size":434,"mtime":1609841141150,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"35"},"1msjh8u",{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"38"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"46","messages":"47","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"38"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"59"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"38"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"35"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\Gyakran hasznalt\\Projects\\Codecool\\PHP\\TindR\\tindr-react\\src\\components\\SideBar.js",["74","75","76","77","78","79","80"],"import { slide as Menu } from 'react-burger-menu';\r\nimport React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport {Badge} from 'react-bootstrap';\r\nimport {SettingsPane, SettingsPage, SettingsContent, SettingsMenu} from 'react-settings-pane';\r\nimport { InputTags } from 'react-bootstrap-tagsinput';\r\nimport 'react-bootstrap-tagsinput/dist/index.css';\r\nimport InputRange from 'react-input-range';\r\nimport 'react-input-range/lib/css/index.css';\r\nimport Select from 'react-select';\r\nimport Picture_upload from './Picture_upload';\r\nimport Test from './Test';\r\nimport NotifyMe from 'react-notification-timeline';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport Loading from './Loading'\r\n\r\nconst options = [\r\n  { value: 'Men', label: 'Men' },\r\n  { value: 'Women', label: 'Women' },\r\n  { value: 'Everyone', label: 'Everyone' },\r\n];\r\n\r\nexport default class SideBar extends Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.picupload = React.createRef();\r\n    this.state={\r\n      profilePath:'',\r\n      isLoading:true,\r\n      details:'',\r\n      formData: '',\r\n      tags:this.props.user.passion.split(\",\"),\r\n      finalTags:[],\r\n      tocompsave:false,\r\n      distanceValue: this.props.searchData.max_distance,\r\n      ageValue: { \r\n        min: this.props.searchData.min_age, \r\n        max: this.props.searchData.max_age \r\n      },\r\n      lookingFor: this.props.searchData.looking_for\r\n    }\r\n\r\n     // Save settings after close\r\n    \r\n     this._leavePaneHandler = (wasSaved, newSettings, oldSettings) => {\r\n    // \"wasSaved\" indicates wheather the pane was just closed or the save button was clicked.\r\n      if (wasSaved){\r\n        try {\r\n          this.setState({tocompsave:true});\r\n          this.saveToPic();\r\n        } catch (error) {\r\n          \r\n        }\r\n      }\r\n      if (wasSaved && (newSettings !== oldSettings)) {\r\n        // do something with the settings, e.g. save via ajax.\r\n        \r\n        //this.setState({formData:newSettings});\r\n        //https://open.spotify.com/track/0vWUhCPxpJOJR5urYbZypB\r\n\r\n        let songID='';\r\n        if ((newSettings.anthem) && newSettings.anthem.length > 22){\r\n          songID = newSettings.anthem.split(\"track/\")[1];\r\n        }\r\n        else songID = oldSettings.anthem;\r\n\r\n        axios.put(process.env.REACT_APP_IP+\"/api/update_user/\"+this.props.user.id,{\r\n          name:newSettings.name,\r\n          description:newSettings.description,\r\n          anthem:songID\r\n        });\r\n        axios.put(process.env.REACT_APP_IP+\"/api/update_account/\"+this.props.user.id,{\r\n          email:newSettings.email,\r\n          phone_number:newSettings.phone_number\r\n        });\r\n        axios.put(process.env.REACT_APP_IP+\"/api/update_search/\"+this.props.user.id,{\r\n          max_distance: newSettings.distanceValue,\r\n          looking_for: newSettings.lookingFor.value,\r\n          min_age: newSettings.ageValue.min,\r\n          max_age: newSettings.ageValue.max,\r\n          status: newSettings.status,\r\n          global: newSettings.global\r\n        });\r\n        if (this.state.finalTags.length >= 1){\r\n          axios.put(process.env.REACT_APP_IP+\"/api/update_user/\"+this.props.user.id,{\r\n            passion:newSettings.finalTags.join()\r\n          });\r\n        }\r\n        this.props.forceRender();\r\n      }\r\n\r\n      this.hidePrefs();\r\n    };\r\n\r\n    // React if a single setting changed\r\n    this._settingsChanged = ev => {\r\n      \r\n    };\r\n\r\n    // Settings menu definition\r\n    this._menu = [\r\n      {\r\n        title: \"General\", // Title that is displayed as text in the menu\r\n        url: \"/settings/general\" // Identifier (url-slug)\r\n      },\r\n      {\r\n        title: \"Profile\",\r\n        url: \"/settings/profile\"\r\n      },\r\n      {\r\n        title: \"Pictures\",\r\n        url: \"/settings/pictures\"\r\n      },\r\n      {\r\n        title: \"Search\",\r\n        url: \"/settings/search\"\r\n      }\r\n    ];\r\n\r\n  }\r\n\r\n  saveToPic(){\r\n    this.picupload.current.sendd();\r\n  }\r\n\r\n  hidePrefs() {\r\n    this.prefs.className = \"md-modal\";\r\n    this.overlay.style.visibility = \"\";\r\n  }\r\n\r\n  showPrefs() {\r\n    this.prefs.className = \"md-modal show\";\r\n    this.overlay.style.visibility = \"visible\";\r\n  }\r\n\r\n  async getProfilePictures(user) {\r\n    await axios.get(`${process.env.REACT_APP_IP}/api/pictures/${user.id}`)\r\n    .then(response => {\r\n      /*\r\n      Promise.all(response.data.map(p => {\r\n        this.setState({\r\n          profilePath: p,\r\n          isLoading: false\r\n      });\r\n      }))\r\n      */\r\n        this.setState({\r\n            profilePath: response.data,\r\n            isLoading: false\r\n        });\r\n    })\r\n  }\r\n\r\n  async getDetails(userid){\r\n    await axios.get(process.env.REACT_APP_IP+\"/api/details/\"+userid)\r\n    .then(resp => {\r\n      this.setState({details:resp.data})\r\n    })\r\n  }\r\n\r\n  async componentDidMount(){\r\n    await this.getProfilePictures(this.props.user);\r\n    await this.getDetails(this.props.user.id);\r\n  }\r\n\r\n  render() {\r\n    const {isLoading, profilePath, details, tags, lookingFor} = this.state;\r\n    const { searchData } = this.props;\r\n\r\n    let settings = this.state;\r\n    if(isLoading){\r\n      return(<Loading />)\r\n    }\r\n    \r\n    return (\r\n      <>\r\n        <Menu>\r\n          <div className=\"menu-item\" href=\"/\">\r\n            {this.props.user.name}\r\n            {/* <span className=\"btn pull-right\">\r\n              <NotifyMe\r\n                data={[\r\n                  {\r\n                    \"update\":\"70 new employees are shifted\",\r\n                    \"timestamp\":Date()\r\n                  },\r\n                ]}\r\n                storageKey='notific_key'\r\n                notific_key='timestamp'\r\n                notific_value='update'\r\n                heading='Notification Alerts'\r\n                sortedByKey={false}\r\n                showDate={true}\r\n                size={36}\r\n                color=\"yellow\"\r\n                markAsReadFn={(e) => console.log(e)}\r\n              />\r\n            </span> */}\r\n          </div>\r\n          <a className=\"navbar-brand text-center\" href=\"#\">\r\n            <img src={profilePath[0].route} height=\"80\" alt=\"\"/>\r\n          </a>\r\n          <a className=\"menu-item\" href=\"/\">\r\n            Home\r\n          </a>\r\n          <p className=\"menu-item\" style={{cursor:\"pointer\"}} onClick={this.showPrefs.bind(this)}>\r\n            Settings\r\n          </p>\r\n          <a className=\"menu-item\" href=\"#\">\r\n            Asd\r\n          </a>\r\n          <a className=\"menu-item\" href=\"/\" onClick={this.props.removeCookie} >\r\n            Logout\r\n          </a>\r\n        </Menu>\r\n        <div ref={ref => (this.overlay = ref)} className=\"overlay\" />\r\n            <div ref={ref => (this.prefs = ref)} className=\"md-modal\">\r\n              <SettingsPane\r\n                items={this._menu}\r\n                index=\"/settings/general\"\r\n                settings={settings}\r\n                onChange={this._settingsChanged}\r\n                onPaneLeave={this._leavePaneHandler}\r\n              >\r\n                <SettingsMenu headline=\"General Settings\" />\r\n                <SettingsContent header>\r\n                  <SettingsPage \r\n                    handler=\"/settings/general\"\r\n                  >\r\n                    \r\n                    <fieldset className=\"form-group\">\r\n                      <label htmlFor=\"generalUsername\">Username: </label>\r\n                      <div className=\"input-group\">\r\n                        <input\r\n                          type=\"text\"\r\n                          name=\"name\"\r\n                          className=\"form-control\"\r\n                          placeholder=\"Username\"\r\n                          aria-describedby=\"basic-addon1\"\r\n                          onChange={this._settingsChanged}\r\n                          defaultValue={this.props.user.name}\r\n                        />\r\n                      </div>\r\n                    </fieldset>\r\n                    <fieldset className=\"form-group\">\r\n                      <label htmlFor=\"generalMail\">E-Mail address: </label>\r\n                      <input\r\n                        type=\"text\"\r\n                        className=\"form-control\"\r\n                        name=\"email\"\r\n                        placeholder=\"E-Mail Address\"\r\n                        id=\"generalMail\"\r\n                        onChange={this._settingsChanged}\r\n                        defaultValue={details.email}\r\n                      />\r\n                    </fieldset>\r\n                    <fieldset className=\"form-group\">\r\n                      <label htmlFor=\"generalPic\">Mobile number: </label>\r\n                      <input\r\n                        type=\"text\"\r\n                        className=\"form-control\"\r\n                        name=\"phone_number\"\r\n                        placeholder=\"Mobile number\"\r\n                        id=\"generalPic\"\r\n                        onChange={this._settingsChanged}\r\n                        defaultValue={details.phone_number}\r\n                      />\r\n                    </fieldset>\r\n                  </SettingsPage>\r\n                  <SettingsPage \r\n                    handler=\"/settings/profile\"\r\n                  >\r\n                  <fieldset className=\"form-group\">\r\n                      <label htmlFor=\"profileFirstname\">Company: </label>\r\n                      <input\r\n                        type=\"text\"\r\n                        className=\"form-control\"\r\n                        name=\"mysettings.profile.firstname\"\r\n                        placeholder=\"Add a company\"\r\n                        id=\"profileFirstname\"\r\n                        onChange={this._settingsChanged}\r\n                        defaultValue={this.props.user.copmany}\r\n                      />\r\n                    </fieldset>\r\n                    <fieldset className=\"form-group\">\r\n                      <label htmlFor=\"profileFirstname\">Job Title: </label>\r\n                      <input\r\n                        type=\"text\"\r\n                        className=\"form-control\"\r\n                        name=\"mysettings.profile.firstname\"\r\n                        placeholder=\"Job title\"\r\n                        id=\"profileFirstname\"\r\n                        onChange={this._settingsChanged}\r\n                        defaultValue={settings[\"mysettings.profile.firstname\"]}\r\n                      />\r\n                    </fieldset>\r\n                    <fieldset className=\"form-group\">\r\n                      <label htmlFor=\"profileLastname\">Your passions: </label>\r\n                      <InputTags values={tags} onTags={(value) => this.setState({finalTags:value.values})} />\r\n                    </fieldset>\r\n                    <fieldset className=\"form-group\">\r\n                      <label htmlFor=\"profileBiography\">Details: </label>\r\n                      <textarea\r\n                        className=\"form-control\"\r\n                        name=\"description\"\r\n                        placeholder=\"Tell us something about yourself\"\r\n                        id=\"profileBiography\"\r\n                        onChange={this._settingsChanged}\r\n                        defaultValue={this.props.user.description}\r\n                      />\r\n                    </fieldset>\r\n                    <fieldset className=\"form-group\">\r\n                      <label htmlFor=\"profileLastname\">Anthem: </label>\r\n                      <input\r\n                        type=\"text\"\r\n                        className=\"form-control\"\r\n                        name=\"anthem\"\r\n                        placeholder=\"ex.: https://open.spotify.com/track/0vWUhCPxpJOJR5urYbZypB\"\r\n                        onChange={this._settingsChanged}\r\n                        \r\n                      />\r\n                    </fieldset>\r\n                    {this.props.user.anthem !== null &&\r\n                      <fieldset className=\"form-group\">\r\n                        <label>Current:</label>\r\n                        <div><Test songID={this.props.user.anthem}></Test></div>\r\n                      </fieldset>\r\n                    }\r\n                  </SettingsPage>\r\n                  <SettingsPage handler=\"/settings/pictures\">\r\n                    <Picture_upload ref={this.picupload} saved={this.state.tocompsave} images={profilePath} user={this.props.user}></Picture_upload>\r\n                  </SettingsPage>\r\n\r\n                  <SettingsPage \r\n                    handler=\"/settings/search\"\r\n                  >\r\n                  <fieldset className=\"form-group\">\r\n                    <label>Looking for:</label>\r\n                      <Select\r\n                        value={lookingFor}\r\n                        placeholder={lookingFor}\r\n                        options={options}\r\n                        onChange={value => {\r\n                          this.setState({ lookingFor : value });\r\n                          //this._settingsChanged();\r\n                        }} \r\n                      />\r\n                    </fieldset>\r\n                    <fieldset className=\"form-group\">\r\n                      <label>Max distance:</label><br /><br />\r\n                      <InputRange\r\n                        maxValue={150}\r\n                        minValue={0}\r\n                        formatLabel={value => `${value} km`}\r\n                        value={this.state.distanceValue}\r\n                        onChange={value => {\r\n                          this.setState({ distanceValue : value });\r\n                          //this._settingsChanged();\r\n                        }} \r\n                      />\r\n                    </fieldset><br />\r\n                    <fieldset className=\"form-group\">\r\n                      <label>Age range:</label><br /><br />\r\n                      <InputRange\r\n                        maxValue={100}\r\n                        minValue={18}\r\n                        value={this.state.ageValue}\r\n                        onChange={value => {\r\n                          this.setState({ ageValue : value });\r\n                          //this._settingsChanged();\r\n                        }} \r\n                      />\r\n                    </fieldset><br />\r\n                    <fieldset className=\"form-group\">\r\n                      <input \r\n                        type=\"checkbox\" \r\n                        id=\"status\" \r\n                        name=\"status\" \r\n                        value=\"true\"\r\n                        defaultChecked={this.props.searchData.status}\r\n                        onChange={this._settingsChanged} \r\n                      />\r\n                      <label for=\"status\">Show me on TindR</label><br />\r\n                    </fieldset>\r\n                    <fieldset className=\"form-group\">\r\n                      <input \r\n                        type=\"checkbox\" \r\n                        id=\"global\" \r\n                        name=\"global\" \r\n                        value=\"true\"\r\n                        defaultChecked={this.props.searchData.global}\r\n                        onChange={this._settingsChanged}\r\n                      />\r\n                      <label for=\"global\">Global mode</label><br />\r\n                    </fieldset>\r\n                  </SettingsPage>\r\n\r\n                </SettingsContent>\r\n              </SettingsPane>\r\n            </div>\r\n      </>\r\n    )\r\n  }\r\n}",["81","82"],"D:\\Gyakran hasznalt\\Projects\\Codecool\\PHP\\TindR\\tindr-react\\src\\index.js",[],["83","84"],"D:\\Gyakran hasznalt\\Projects\\Codecool\\PHP\\TindR\\tindr-react\\src\\components\\Deck.js",["85","86","87","88"],"import React, { useState, useEffect } from \"react\";\r\nimport { useSprings } from \"react-spring\";\r\nimport { useGesture } from \"react-with-gesture\";\r\nimport axios from 'axios';\r\n\r\nimport Card from \"./Card\";\r\nimport Pulse from \"./Pulse\";\r\n\r\nimport \"./css/deck.css\";\r\nimport './css/loading_heart.css';\r\n\r\nconst to = i => ({\r\n  x: 0,\r\n  y: i * -10,\r\n  scale: 1,\r\n  rot: 0,\r\n  //rot: -10 + Math.random() * 20,\r\n  delay: i * 100\r\n});\r\nconst from = i => ({ rot: 0, scale: 1.5, y: -1000 });\r\n\r\nconst trans = (r, s) =>\r\n  `perspective(1500px) rotateX(30deg) rotateY(${r /\r\n  10}deg) rotateZ(${r}deg) scale(${s})`;\r\n\r\nfunction Deck({userID, data}) {\r\n\r\n  const [doFetch, setFetch] = useState(\"\");\r\n  const [isLoading, setLoading] = useState(false);\r\n\r\n  useEffect(() => {\r\n    async function giveVote(index, direction) {\r\n      const send = {\r\n        \"index\": index,\r\n        \"giverid\": userID,\r\n        \"direction\": direction\r\n      }\r\n\r\n      await fetch(`${process.env.REACT_APP_IP}/api/give_vote`, {\r\n        method: 'post',\r\n        headers: {'Content-Type':'application/json'},\r\n        body: JSON.stringify(send)\r\n        })\r\n        .then(() => {\r\n          console.log(\"fetch done\");\r\n          setLoading(false);\r\n        });\r\n    }\r\n    \r\n    if (doFetch !== \"\") {\r\n      const temp = doFetch.split(',');\r\n      giveVote(temp[0], temp[1]);\r\n    }\r\n  }, [doFetch])\r\n\r\n  const [gone] = useState(() => new Set());\r\n  const [cardState, set] = useSprings(data.length, i => ({\r\n    ...to(i),\r\n    from: from(i)\r\n  }));\r\n\r\n  const bind = useGesture(\r\n    ({\r\n      args: [index],\r\n      down,\r\n      delta: [xDelta],\r\n      distance,\r\n      direction: [xDir],\r\n      velocity\r\n    }) => {\r\n      const trigger = velocity > 0.2;\r\n\r\n      const dir = xDir < 0 ? -1 : 1;\r\n\r\n      let temp = \"\";\r\n\r\n      if (!down && trigger) {\r\n        gone.add(index);\r\n        temp = `${index},${dir}`;\r\n      }\r\n\r\n      set(i => {\r\n        if (index !== i) return;\r\n        const isGone = gone.has(index);\r\n\r\n        const x = isGone ? (200 + window.innerWidth) * dir : down ? xDelta : 0;\r\n\r\n        const rot = xDelta / 100 + (isGone ? dir * 10 * velocity : 0);\r\n\r\n        const scale = down ? 1.1 : 1;\r\n        return {\r\n          x,\r\n          rot,\r\n          scale,\r\n          delay: undefined,\r\n          config: { friction: 50, tension: down ? 800 : isGone ? 200 : 500 }\r\n        };\r\n      });\r\n\r\n      if(temp.length != 0) {\r\n        setLoading(true);\r\n        setFetch(temp);\r\n      }\r\n\r\n      /*\r\n      if (!down && gone.size === data.length) {\r\n        console.log('yeyp')\r\n        setTimeout(() => gone.clear() || set(i => to(i)), 600);\r\n      }\r\n      */\r\n    }\r\n  );\r\n\r\n  if(isLoading) {\r\n    return (\r\n      <h1>fetch loading...</h1>\r\n    );\r\n  }\r\n  else if(cardState.length != gone.size) {\r\n    return (\r\n      <>\r\n      {console.log(\"render\")}\r\n      <div id='recommendations'>\r\n        {cardState.map(({ x, y, rot, scale }, i) => (\r\n          <Card\r\n            key={i}\r\n            i={i}\r\n            x={x}\r\n            y={y}\r\n            rot={rot}\r\n            scale={scale}\r\n            trans={trans}\r\n            data={data}\r\n            bind={bind}\r\n          />\r\n        ))}\r\n      </div>\r\n      </>\r\n    );\r\n  }\r\n  else {\r\n    return(<Pulse userID={userID} />);\r\n  }\r\n}\r\n\r\nexport default Deck;","D:\\Gyakran hasznalt\\Projects\\Codecool\\PHP\\TindR\\tindr-react\\src\\components\\WelcomePage.js",["89","90","91","92","93","94","95","96","97","98","99","100","101","102","103","104","105","106","107","108"],"D:\\Gyakran hasznalt\\Projects\\Codecool\\PHP\\TindR\\tindr-react\\src\\components\\Card.js",["109"],"D:\\Gyakran hasznalt\\Projects\\Codecool\\PHP\\TindR\\tindr-react\\src\\components\\Settings.js",["110","111","112","113","114"],"import React, { Component } from 'react';\r\nimport {SettingsPane, SettingsPage, SettingsContent, SettingsMenu} from 'react-settings-pane';\r\n\r\nexport default class Settings extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n    \r\n        // You will maybe receive your settings from this.props or do a fetch request in your componentWillMount\r\n        // but here is an example of how it should look like:\r\n        this.state = {\r\n          \"mysettings.general.name\": \"Dennis Stücken\",\r\n          \"mysettings.general.username\": \"dstuecken\",\r\n          \"mysettings.general.color-theme\": \"purple\",\r\n          \"mysettings.general.email\": \"dstuecken@react-settings-pane.com\",\r\n          \"mysettings.general.picture\": \"earth\",\r\n          \"mysettings.profile.firstname\": \"Dennis\",\r\n          \"mysettings.profile.lastname\": \"Stücken\"\r\n        };\r\n    \r\n        // Save settings after close\r\n        this._leavePaneHandler = (wasSaved, newSettings, oldSettings) => {\r\n          // \"wasSaved\" indicates wheather the pane was just closed or the save button was clicked.\r\n    \r\n          if (wasSaved && newSettings !== oldSettings) {\r\n            // do something with the settings, e.g. save via ajax.\r\n            this.setState(newSettings);\r\n          }\r\n    \r\n          this.hidePrefs();\r\n        };\r\n    \r\n        // React if a single setting changed\r\n        this._settingsChanged = ev => {};\r\n    \r\n        // Define your menu\r\n        this._menu = [\r\n          {\r\n            title: \"General\", // Title that is displayed as text in the menu\r\n            url: \"/settings/general\" // Identifier (url-slug)\r\n          },\r\n          {\r\n            title: \"Profile\",\r\n            url: \"/settings/profile\"\r\n          },\r\n          {\r\n            title: \"Notifications\",\r\n            url: \"/settings/notifications\"\r\n          },\r\n          {\r\n            title: \"Language\",\r\n            url: \"/settings/language\"\r\n          },\r\n          {\r\n            title: \"Appearance\",\r\n            url: \"/settings/appearance\"\r\n          },\r\n          {\r\n            title: \"Plugins\",\r\n            url: \"/settings/plugins\"\r\n          },\r\n          {\r\n            title: \"About\",\r\n            url: \"/settings/about\"\r\n          }\r\n        ];\r\n    }\r\n    \r\n      hidePrefs() {\r\n        this.prefs.className = \"md-modal\";\r\n        this.overlay.style.visibility = \"\";\r\n      }\r\n    \r\n      showPrefs() {\r\n        this.prefs.className = \"md-modal show\";\r\n        this.overlay.style.visibility = \"visible\";\r\n      }\r\n    \r\n      render() {\r\n        // Get settings\r\n        let settings = this.state;\r\n    \r\n        // Define one of your Settings pages\r\n        /*\r\n         const dynamicOptionsForGeneralPage = [\r\n           {\r\n             key: null\r\n             label: 'Account',\r\n             type: 'headline',\r\n           },\r\n           {\r\n             key: 'mysettings.general.email',\r\n             label: 'E-Mail address',\r\n             type: 'text',\r\n           },\r\n           {\r\n             key: 'mysettings.general.password',\r\n             label: 'Password',\r\n             type: 'password',\r\n           },\r\n           {\r\n             key: 'mysettings.general.password-repeat',\r\n             label: 'Password repeat',\r\n             type: 'password',\r\n           },\r\n           {\r\n             key: null,\r\n             label: 'Appearance',\r\n             type: 'headline',\r\n           },\r\n           {\r\n             key: 'mysettings.general.color-theme',\r\n             label: 'Color Theme',\r\n             type: 'custom',\r\n             component: <select><option value=\"blue\">Blue</option><option value=\"red\">Red</option></select>,\r\n           }\r\n         ];\r\n         // Then use with:\r\n         // <SettingsPage handler=\"/settings/general\" options={dynamicOptionsForGeneralPage} />\r\n         */\r\n    \r\n        // Return your Settings Pane\r\n        return (\r\n          <div className=\"container\">\r\n            <div className=\"page-header\">\r\n              <h1>\r\n                Settings\r\n              </h1>\r\n            </div>\r\n            <div style={{ margin: \"30px 0 90px 0\" }}>\r\n              <button\r\n                onClick={this.showPrefs.bind(this)}\r\n                className=\"btn btn-info\"\r\n              >\r\n                Show Preferences\r\n              </button>\r\n            </div>\r\n            \r\n          </div>\r\n        );\r\n      }\r\n}\r\n","D:\\Gyakran hasznalt\\Projects\\Codecool\\PHP\\TindR\\tindr-react\\src\\App.js",["115","116"],"D:\\Gyakran hasznalt\\Projects\\Codecool\\PHP\\TindR\\tindr-react\\src\\components\\Asd.js",[],"D:\\Gyakran hasznalt\\Projects\\Codecool\\PHP\\TindR\\tindr-react\\src\\reportWebVitals.js",[],["117","118"],"D:\\Gyakran hasznalt\\Projects\\Codecool\\PHP\\TindR\\tindr-react\\src\\components\\Test.js",["119"],"import React, { Component } from 'react'\r\nimport axios from 'axios';\r\n//import hash from \"./hash\";\r\nimport { encoded,authEndpoint } from \"./spotify_config\";\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faPlay, faPause } from '@fortawesome/free-solid-svg-icons'\r\n\r\nexport default class Test extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        \r\n        this.state={\r\n            baseAPI:\"https://api.spotify.com/v1/tracks/\",\r\n            token:'',\r\n            isLoading:true,\r\n            externalWindow:'',\r\n            song:'',\r\n            isPlaying:false\r\n        }\r\n        this.player = React.createRef();\r\n        \r\n    }\r\n    audio=null;\r\n\r\n    async getToken(){\r\n        await axios.post(authEndpoint,\"grant_type=client_credentials\",{\r\n            headers:{\r\n                \"Authorization\": \"Basic \"+encoded\r\n            }\r\n        })\r\n        .then(resp=>{\r\n            this.setState({token:resp.data.access_token});\r\n        })\r\n        await this.getSong();\r\n    }\r\n\r\n    async getSong(){\r\n        if (this.props.songID === null){\r\n            return console.log('%c -------ERROR-------\\n SongID was null! \\n Refusing to send request. \\nAsk the user to set an anthem \\n---------------------', 'background: #222; color: red');\r\n        }\r\n        await axios.get(this.state.baseAPI+this.props.songID,{\r\n            headers: {\r\n                'Authorization':'Bearer '+this.state.token\r\n            }\r\n        })\r\n        .then(resp=>{\r\n            this.setState({song:resp.data,isLoading:false});\r\n        })\r\n        this.audio = new Audio(this.state.song.preview_url);\r\n    }\r\n\r\n    playClicked(){\r\n        this.setState({ isPlaying: !this.state.isPlaying }, () => {\r\n            this.state.isPlaying ? this.audio.play() : this.audio.pause();\r\n        });\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.getToken();\r\n    }\r\n\r\n    render() {\r\n        if (this.props.songID === null) {\r\n            return null;\r\n        }\r\n        if(this.state.isLoading){\r\n            return(\"haggyámátőteni\");\r\n        }\r\n        \r\n        return (\r\n            <>\r\n                <div className=\"card bg-secondary text-white\" style={{width:\"100%\"}}>\r\n                    <div className=\"row\">\r\n                        <div className=\"col-sm-2\" style={{position:\"relative\"}}>\r\n                            <img height=\"80\" src={this.state.song.album.images[0].url}></img>\r\n                        </div>\r\n                        <div className=\"col-sm-2\" style={{position:\"absolute\",top:\"30%\",left:\"3%\"}}>\r\n                            {this.state.isPlaying ? <FontAwesomeIcon onClick={this.playClicked.bind(this)} icon={faPause} size=\"2x\" /> : <FontAwesomeIcon onClick={this.playClicked.bind(this)} icon={faPlay} size=\"2x\" />}\r\n                        </div>\r\n                        <div style={{zIndex:\"-100\"}} className=\"col-sm-1\"></div>\r\n                        <div className=\"col-sm-8\">\r\n                            <div className=\"row\">\r\n                                <div className=\"col\">{this.state.song.artists[0].name} - {this.state.song.name}</div>\r\n                            </div>\r\n                            <div className=\"row\">\r\n                                <div className=\"col\"></div>\r\n                            </div>\r\n                            <div className=\"row\">\r\n                                <div className=\"col\"></div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </>\r\n        )\r\n    }\r\n}",["120","121"],"D:\\Gyakran hasznalt\\Projects\\Codecool\\PHP\\TindR\\tindr-react\\src\\components\\Picture_upload.js",["122","123"],"import React, { Component } from 'react'\r\nimport Swal from 'sweetalert2'\r\nimport axios from 'axios';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faTimesCircle } from '@fortawesome/free-solid-svg-icons'\r\nimport { faCheck } from '@fortawesome/free-solid-svg-icons'\r\n\r\nexport default class Picture_upload extends Component {\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            images: this.props.images,\r\n            isLoading:false,\r\n            image_raw:'',\r\n            checked:true,\r\n            checkedid:this.props.images[0].id,\r\n            saved:this.props.saved\r\n        }\r\n        this.uploadFile=this.uploadFile.bind(this);\r\n    }\r\n\r\n    getFile = async (event) => {\r\n        const file = event.target.files[0];\r\n       \r\n        const base64 = await this.convertBase64(file);\r\n        this.setState({image_raw:base64});\r\n        this.showFile();\r\n    }\r\n\r\n    getCheckedid(){\r\n        return this.state.checkedid;\r\n    }\r\n\r\n    convertBase64 = (file) => {\r\n        return new Promise((resolve, reject) => {\r\n          const fileReader = new FileReader();\r\n          fileReader.readAsDataURL(file)\r\n          fileReader.onload = () => {\r\n            resolve(fileReader.result);\r\n          }\r\n          fileReader.onerror = (error) => {\r\n            reject(error);\r\n          }\r\n        })\r\n    }\r\n\r\n    showFile(){\r\n        const swalWithBootstrapButtons = Swal.mixin({\r\n            customClass: {\r\n              confirmButton: 'btn btn-success',\r\n              cancelButton: 'btn btn-danger'\r\n            },\r\n            buttonsStyling: false\r\n          })\r\n          \r\n          swalWithBootstrapButtons.fire({\r\n            title: 'Do you want to upload this?',\r\n            text: \"Click upload to upload you image.\",\r\n            imageUrl: this.state.image_raw,\r\n            showCancelButton: true,\r\n            confirmButtonText: 'Yes, upload it!',\r\n            cancelButtonText: 'No, cancel!',\r\n            reverseButtons: true\r\n          }).then((result) => {\r\n            if (result.isConfirmed) {\r\n                this.uploadFile();\r\n                swalWithBootstrapButtons.fire( \r\n                    'Uploaded!',\r\n                    'Your file has been uploaded.',\r\n                    'success'\r\n                )\r\n            } else if (\r\n              result.dismiss === Swal.DismissReason.cancel\r\n            ) {\r\n              swalWithBootstrapButtons.fire(\r\n                'Cancelled',\r\n                'No uploado happenedo 🤠',\r\n                'error'\r\n              )\r\n            }\r\n        })\r\n    }\r\n\r\n    uploadFile(){\r\n        axios.post(process.env.REACT_APP_IP+\"/api/pictures/upload/\"+this.props.user.id,{\r\n           img_raw:this.state.image_raw\r\n        });\r\n    }\r\n\r\n    deletePic(data){\r\n        if (this.state.images.length === 1){\r\n            Swal.fire('You must have at least 1 image uploaded!')\r\n        }\r\n        else {\r\n            Swal.fire({\r\n                title: 'Are you sure?',\r\n                text: \"You won't be able to revert this!\",\r\n                icon: 'warning',\r\n                showCancelButton: true,\r\n                confirmButtonColor: '#3085d6',\r\n                cancelButtonColor: '#d33',\r\n                confirmButtonText: 'Yes, delete it!'\r\n            }).then((result) => {\r\n                if (result.isConfirmed) {\r\n                    axios.post(process.env.REACT_APP_IP+\"/api/pictures/delete/\"+this.props.user.id,{\r\n                        del_data: data\r\n                    });\r\n                    Swal.fire(\r\n                    'Deleted!',\r\n                    'Your file has been deleted.',\r\n                    'success'\r\n                    );\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    chooseAsMainPic(userid,picid){\r\n        this.setState({ checkedid:picid});\r\n\r\n    }\r\n\r\n    sendd(){\r\n        axios.post(process.env.REACT_APP_IP+\"/api/pictures/setmain/\"+this.props.user.id,{\r\n                pic_id:this.state.checkedid\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const {isLoading, images} = this.state;\r\n        if (isLoading){\r\n            return(\r\n                <div className=\"container\">\r\n                    <div className=\"text-center\">\r\n                        <img src=\"/img/Loading_svg.svg\"></img>\r\n                    </div>\r\n                </div>\r\n            );\r\n        }\r\n    \r\n        return (\r\n           \r\n            <div className=\"container-fluid\">\r\n                <div className=\"\">\r\n                {images.map((image,i) => \r\n                    <div key={image.id} className=\"card\" style={{width:\"8rem\", display:\"inline-block\",margin:\"1em\", border:\"none\"}}>\r\n                        <img className=\"card-img-top\" onClick={()=>this.chooseAsMainPic(this.props.user.id,image.id)} src={image.route} alt=\"Card image cap\"></img>\r\n                        <a href=\"/#\" onClick={() => this.deletePic(image.route)}><FontAwesomeIcon style={{position: \"absolute\",bottom:\"85%\",left:\"5%\"}} icon={faTimesCircle} color=\"grey\" size=\"lg\" /></a>\r\n                        <FontAwesomeIcon style={{display:(this.state.checked && this.state.checkedid===image.id) ? 'inline-block':'none',position: \"absolute\",bottom:\"85%\",right:\"5%\"}} icon={faCheck} color=\"green\" size=\"lg\" />\r\n                    </div>\r\n                )}\r\n                </div>\r\n                \r\n                <div className=\"custom-file\">\r\n                    <input onChange={this.getFile} id=\"customFile\" name=\"file\" type=\"file\" accept=\"image/*\" className=\"custom-file-input\" ></input>\r\n                    <label className=\"custom-file-label\" htmlFor=\"customFile\">Choose file</label>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","D:\\Gyakran hasznalt\\Projects\\Codecool\\PHP\\TindR\\tindr-react\\src\\components\\Recommendations.js",["124","125","126","127"],"import React, {Component} from 'react';\r\nimport { Helmet } from 'react-helmet';\r\nimport axios from 'axios';\r\nimport moment from \"moment\";\r\nimport TinderCard from 'react-tinder-card';\r\n\r\nclass Recommendations extends Component {\r\n    constructor() {\r\n      super();\r\n\r\n      this.state = {\r\n          recommendations: [],\r\n          pictures: [],\r\n          currentPictureIndex: 0,\r\n          isLoading: true,\r\n          showProfile: false,\r\n          current: {\r\n              index: undefined,\r\n              user: undefined\r\n          }\r\n      }\r\n\r\n      this.getRecommendations = this.getRecommendations.bind(this);\r\n      this.getNextProfile = this.getNextProfile.bind(this);\r\n      this.getCurrentData = this.getCurrentData.bind(this);\r\n      this.handleLike = this.handleLike.bind(this);\r\n      this.handleDislike = this.handleDislike.bind(this);\r\n      this.handleKeyDown = this.handleKeyDown.bind(this);\r\n      this.setNextPicture = this.setNextPicture.bind(this);\r\n      this.setPreviousPicture = this.setPreviousPicture.bind(this);\r\n      this.showProfile = this.showProfile.bind(this);\r\n      this.ageCalculation = this.ageCalculation.bind(this);\r\n      this.getCurrentPictures = this.getCurrentPictures.bind(this);\r\n\r\n      this.onCardLeftScreen = this.onCardLeftScreen.bind(this);\r\n      this.onSwipe = this.onSwipe.bind(this);\r\n    }\r\n\r\n    async componentDidMount() {\r\n        await this.getRecommendations();\r\n        await this.getCurrentPictures();\r\n    }\r\n\r\n    async getRecommendations() {\r\n        await axios.get(`http://${process.env.REACT_APP_IP}:8000/api/recommendations/${this.props.userID}`)\r\n        .then(response => {\r\n            let updCurrent = {\r\n                index: 0,\r\n                user: response.data.length === undefined ? response.data : response.data[0]\r\n            }\r\n\r\n            this.setState({\r\n                recommendations : response.data,\r\n                current : updCurrent\r\n            });\r\n        })\r\n    }\r\n\r\n   async getCurrentPictures() {\r\n       const { current } = this.state;\r\n\r\n        await axios.get(`http://${process.env.REACT_APP_IP}:8000/api/pictures/${current.user.id}`)\r\n            .then(response => {\r\n                Promise.all(response.data.map(p => {\r\n                    this.setState({\r\n                        pictures: p,\r\n                        isLoading: false\r\n                    });\r\n                }))\r\n            });\r\n   }\r\n\r\n    async getNextProfile() {\r\n        const { recommendations, current } = this.state;\r\n        console.log(recommendations[current.index + 1])\r\n\r\n        if (recommendations[current.index + 1] !== undefined) {\r\n            let updCurrent = {\r\n                index: current.index + 1,\r\n                user: recommendations[current.index + 1]\r\n            }\r\n            await this.setState({\r\n                current : updCurrent,\r\n                isLoading : true\r\n            })\r\n            this.getCurrentPictures();\r\n        }\r\n        else {\r\n            this.setState({\r\n                current : {\r\n                    index: 0,\r\n                    user: undefined\r\n                },\r\n                isLoading : false\r\n            })\r\n        }\r\n    }\r\n\r\n    setNextPicture() {\r\n        const { currentPictureIndex, pictures } = this.state;\r\n\r\n        const max = pictures.length -1;\r\n        const next = currentPictureIndex + 1;\r\n        \r\n        if (next <= max)\r\n            this.setState({currentPictureIndex: next})\r\n        else\r\n            this.setState({currentPictureIndex: 0});\r\n    }\r\n\r\n    setPreviousPicture() {\r\n        const { currentPictureIndex, pictures } = this.state;\r\n\r\n        const max = pictures.length -1;\r\n        const previous = currentPictureIndex - 1;\r\n\r\n        if (previous < 0) \r\n            this.setState({currentPictureIndex : max});\r\n        else\r\n            this.setState({currentPictureIndex : previous});\r\n    }\r\n\r\n    showProfile() {\r\n        const { current, showProfile } = this.state;\r\n        const user = current.user;\r\n\r\n        if(showProfile) {\r\n            return (\r\n                <>\r\n                    <link rel=\"stylesheet\" href=\"https://use.fontawesome.com/releases/v5.15.1/css/all.css\" integrity=\"sha384-vp86vTRFVJgpjF9jiIGPEEqYqlDwgyBgEF109VFjmqGmIY/Y4HV4d3Gp2irVfcrp\" crossorigin=\"anonymous\"></link>\r\n                    \r\n                    <p>\r\n                        <span className=\"fa fa-info-circle\" /> \r\n                        Description: {user.description !== null ? user.description : \"N/A\"}\r\n                    </p>\r\n                    <p>Birthdate: {user.birthdate !== null ? moment(user.birthdate).format('MMMM Do YYYY') : \"N/A\"}</p>\r\n                    <p>School: {user.school !== null ? user.school : \"N/A\"}</p>\r\n                    <p>Works at: {user.company !== null ? user.company : \"N/A\"}</p>\r\n                    <p>Position: {user.job_title !== null ? user.job_title : \"N/A\"}</p>\r\n                    <p>Gender: {user.gender !== null ? user.gender : \"N/A\"}</p>\r\n                    <p>Passions: {user.passion !== null ? user.passion : \"N/A\"}</p>\r\n                    <p>Sexual Orientation: {user.sexual_orientation !== null ? user.sexual_orientation : \"N/A\"}</p>\r\n\r\n                    {user.anthem !== null &&\r\n                        <iframe width=\"560\" height=\"315\" \r\n                                src={`https://www.youtube.com/embed/${user.anthem}`}\r\n                                frameborder=\"0\" \r\n                                allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" \r\n                                allowfullscreen\r\n                            >\r\n                        </iframe>\r\n                    }\r\n                </>\r\n            );\r\n        }\r\n    }\r\n\r\n    ageCalculation(date) {\r\n        const now = new Date();\r\n        const birthdate = new Date(date);\r\n\r\n        let diff = now.getTime() - birthdate.getTime();\r\n        return Math.floor(diff / (1000 * 60 * 60 * 24 * 365.25));\r\n    }\r\n\r\n    getCurrentData() {\r\n        const { current, pictures, currentPictureIndex } = this.state;\r\n\r\n        if (current.user !== undefined) {\r\n            const route = pictures.length === undefined ? pictures.route : pictures[currentPictureIndex].route;\r\n            return(\r\n                <>\r\n                    <img src={route} />\r\n\r\n                    <div className=\"mx-auto my-0 text-red\">\r\n                        <button onClick={this.handleDislike}>Dislike</button>\r\n                        <button onClick={this.handleLike}>Like</button>\r\n\r\n                        <h1>{current.user.name} {this.ageCalculation(current.user.birthdate)}</h1>\r\n                    </div>\r\n                    \r\n                    {this.showProfile()}\r\n                </>\r\n            );\r\n        }\r\n        else {\r\n            return(\r\n                <>\r\n                    No more!\r\n                </>\r\n            );\r\n        }\r\n    }\r\n\r\n    async handleLike() {\r\n        const { current } = this.state;\r\n\r\n        await axios.post(`http://${process.env.REACT_APP_IP}:8000/api/add_like`, {\r\n            giverid: this.props.userID,\r\n            receiverid: current.user.id\r\n        });\r\n        this.getNextProfile();\r\n    }\r\n\r\n    async handleDislike() {\r\n        const { current } = this.state;\r\n\r\n        await axios.post(`http://${process.env.REACT_APP_IP}:8000/api/add_dislike`, {\r\n            giverid: this.props.userID,\r\n            receiverid: current.user.id\r\n        });\r\n        this.getNextProfile();\r\n    }\r\n\r\n    handleKeyDown(event) {\r\n        switch(event.key) {\r\n            case \"ArrowRight\": {\r\n                this.handleLike();\r\n                break;\r\n            }\r\n            case \"ArrowLeft\": {\r\n                this.handleDislike();\r\n                break;\r\n            }\r\n            case \" \": { //Space\r\n                this.setNextPicture();\r\n                break;\r\n            }\r\n            case \"Backspace\": {\r\n                this.setPreviousPicture();\r\n                break;\r\n            }\r\n            case \"ArrowUp\": {\r\n                this.setState({showProfile : true});\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                this.setState({showProfile : false});\r\n                break;\r\n            }\r\n            default:\r\n        }\r\n    }\r\n\r\n    onSwipe(direction) {\r\n        console.log(direction)\r\n    }\r\n\r\n    onCardLeftScreen(id) {\r\n        console.log(id)\r\n    }\r\n\r\n    render() {\r\n        const { isLoading } = this.state;\r\n\r\n        if (!isLoading) {\r\n            /*\r\n            <div onKeyDown={this.handleKeyDown} tabIndex=\"0\" className=\"container d-flex h-100 align-items-center\">\r\n                        <div className=\"mx-auto text-center\">\r\n                            {this.getCurrentData()}\r\n                        </div>\r\n                    </div>\r\n            */\r\n            return (\r\n                <>\r\n                    <div onKeyDown={this.handleKeyDown} tabIndex=\"0\" className=\"container d-flex h-100 align-items-center\">\r\n                        <div className=\"mx-auto text-center\">\r\n                            <TinderCard onSwipe={this.onSwipe} onCardLeftScreen={() => this.onCardLeftScreen('fooBar')} preventSwipe={['right', 'left']}>\r\n                                {this.getCurrentData()}\r\n                            </TinderCard>\r\n                        </div>\r\n                    </div>\r\n                </>\r\n            );\r\n        }\r\n        else\r\n            return (\r\n                <h1>Loading...</h1>\r\n            );\r\n    }\r\n}\r\n\r\nexport default Recommendations;","D:\\Gyakran hasznalt\\Projects\\Codecool\\PHP\\TindR\\tindr-react\\src\\components\\Loading.js",["128"],"import React, { Component } from 'react'\r\n\r\nexport default class Loading extends Component {\r\n    render() {\r\n        return (\r\n            <svg \r\n                xmlns=\"http://www.w3.org/2000/svg\" \r\n                xmlns={{xlink:\"http://www.w3.org/1999/xlink\"}} \r\n                style={{margin:'auto', background:'#fff', display:'block', float:'left'}} \r\n                width=\"100px\" \r\n                height=\"100px\" \r\n                viewBox=\"0 0 100 100\" \r\n                preserveAspectRatio=\"xMidYMid\"\r\n            >\r\n                <path \r\n                    fill=\"none\" \r\n                    stroke=\"#e90c59\" \r\n                    stroke-width=\"8\" \r\n                    stroke-dasharray=\"42.76482137044271 42.76482137044271\" \r\n                    d=\"M24.3 30C11.4 30 5 43.3 5 50s6.4 20 19.3 20c19.3 0 32.1-40 51.4-40 C88.6 30 95 43.3 95 50s-6.4 20-19.3 20C56.4 70 43.6 30 24.3 30z\" \r\n                    stroke-linecap=\"round\" \r\n                    style={{transform:'scale(0.8)', transformOrigin:'50px 50px'}}\r\n                >\r\n                    <animate \r\n                        attributeName=\"stroke-dashoffset\" \r\n                        repeatCount=\"indefinite\" \r\n                        dur=\"1s\" \r\n                        keyTimes=\"0;1\" \r\n                        values=\"0;256.58892822265625\"\r\n                    ></animate>\r\n                </path>\r\n        </svg>\r\n        );\r\n    }\r\n}","D:\\Gyakran hasznalt\\Projects\\Codecool\\PHP\\TindR\\tindr-react\\src\\components\\Pulse.js",["129","130"],"import React, { Component } from 'react'\r\nimport \"./css/pulse.css\";\r\nimport axios from 'axios';\r\n\r\nimport Loading from './Loading'\r\n\r\nexport default class Pulse extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            isLoading: true,\r\n            userImg: ''\r\n        }\r\n\r\n        this.getProfilePicture = this.getProfilePicture.bind(this);\r\n    }\r\n\r\n    async getProfilePicture() {\r\n        await axios.get(`${process.env.REACT_APP_IP}/api/pictures/${this.props.userID}`)\r\n        .then(response => {\r\n            Promise.all(response.data.map(p => {\r\n                this.setState({\r\n                    isLoading : false,\r\n                    userImg : p.route\r\n                });\r\n              }))\r\n        });\r\n    }\r\n\r\n    async componentDidMount() {\r\n        await this.getProfilePicture();\r\n    }\r\n\r\n    render() {\r\n        const { isLoading, userImg } = this.state;\r\n\r\n        if(!isLoading) {\r\n            return(\r\n                <>\r\n                    <div class=\"load\">\r\n                        <img src={userImg} style={{borderRadius:\"50%\", width:\"100%\"}}></img>\r\n                    </div>\r\n                    <p>We are unable to find any potential matches right now. Try changing your preferences to see who is nearby.</p>\r\n                </>\r\n            );\r\n        }\r\n        else {\r\n            return(\r\n                <Loading />\r\n            );\r\n        }\r\n    }\r\n}","D:\\Gyakran hasznalt\\Projects\\Codecool\\PHP\\TindR\\tindr-react\\src\\components\\spotify_config.js",[],{"ruleId":"131","severity":1,"message":"132","line":4,"column":9,"nodeType":"133","messageId":"134","endLine":4,"endColumn":14},{"ruleId":"131","severity":1,"message":"135","line":13,"column":8,"nodeType":"133","messageId":"134","endLine":13,"endColumn":16},{"ruleId":"131","severity":1,"message":"136","line":14,"column":8,"nodeType":"133","messageId":"134","endLine":14,"endColumn":16},{"ruleId":"131","severity":1,"message":"137","line":168,"column":13,"nodeType":"133","messageId":"134","endLine":168,"endColumn":23},{"ruleId":"138","severity":1,"message":"139","line":200,"column":11,"nodeType":"140","endLine":200,"endColumn":60},{"ruleId":"138","severity":1,"message":"139","line":209,"column":11,"nodeType":"140","endLine":209,"endColumn":45},{"ruleId":"141","severity":1,"message":"142","line":331,"column":21,"nodeType":"140","endLine":331,"endColumn":132},{"ruleId":"143","replacedBy":"144"},{"ruleId":"145","replacedBy":"146"},{"ruleId":"143","replacedBy":"147"},{"ruleId":"145","replacedBy":"148"},{"ruleId":"131","severity":1,"message":"149","line":4,"column":8,"nodeType":"133","messageId":"134","endLine":4,"endColumn":13},{"ruleId":"150","severity":1,"message":"151","line":54,"column":6,"nodeType":"152","endLine":54,"endColumn":15,"suggestions":"153"},{"ruleId":"154","severity":1,"message":"155","line":100,"column":22,"nodeType":"156","messageId":"157","endLine":100,"endColumn":24},{"ruleId":"154","severity":1,"message":"155","line":119,"column":28,"nodeType":"156","messageId":"157","endLine":119,"endColumn":30},{"ruleId":"154","severity":1,"message":"158","line":68,"column":27,"nodeType":"156","messageId":"157","endLine":68,"endColumn":29},{"ruleId":"154","severity":1,"message":"158","line":68,"column":50,"nodeType":"156","messageId":"157","endLine":68,"endColumn":52},{"ruleId":"154","severity":1,"message":"158","line":110,"column":25,"nodeType":"156","messageId":"157","endLine":110,"endColumn":27},{"ruleId":"154","severity":1,"message":"158","line":138,"column":22,"nodeType":"156","messageId":"157","endLine":138,"endColumn":24},{"ruleId":"154","severity":1,"message":"158","line":140,"column":41,"nodeType":"156","messageId":"157","endLine":140,"endColumn":43},{"ruleId":"154","severity":1,"message":"158","line":140,"column":76,"nodeType":"156","messageId":"157","endLine":140,"endColumn":78},{"ruleId":"154","severity":1,"message":"158","line":158,"column":39,"nodeType":"156","messageId":"157","endLine":158,"endColumn":41},{"ruleId":"154","severity":1,"message":"158","line":191,"column":22,"nodeType":"156","messageId":"157","endLine":191,"endColumn":24},{"ruleId":"154","severity":1,"message":"158","line":258,"column":15,"nodeType":"156","messageId":"157","endLine":258,"endColumn":17},{"ruleId":"154","severity":1,"message":"155","line":259,"column":24,"nodeType":"156","messageId":"157","endLine":259,"endColumn":26},{"ruleId":"154","severity":1,"message":"158","line":262,"column":20,"nodeType":"156","messageId":"157","endLine":262,"endColumn":22},{"ruleId":"154","severity":1,"message":"155","line":263,"column":24,"nodeType":"156","messageId":"157","endLine":263,"endColumn":26},{"ruleId":"154","severity":1,"message":"158","line":292,"column":27,"nodeType":"156","messageId":"157","endLine":292,"endColumn":29},{"ruleId":"154","severity":1,"message":"158","line":292,"column":50,"nodeType":"156","messageId":"157","endLine":292,"endColumn":52},{"ruleId":"154","severity":1,"message":"158","line":324,"column":26,"nodeType":"156","messageId":"157","endLine":324,"endColumn":28},{"ruleId":"131","severity":1,"message":"159","line":389,"column":24,"nodeType":"133","messageId":"134","endLine":389,"endColumn":30},{"ruleId":"154","severity":1,"message":"155","line":423,"column":34,"nodeType":"156","messageId":"157","endLine":423,"endColumn":36},{"ruleId":"160","severity":1,"message":"161","line":445,"column":21,"nodeType":"140","endLine":445,"endColumn":53},{"ruleId":"138","severity":1,"message":"162","line":450,"column":17,"nodeType":"140","endLine":452,"endColumn":18},{"ruleId":"138","severity":1,"message":"162","line":463,"column":17,"nodeType":"140","endLine":465,"endColumn":18},{"ruleId":"131","severity":1,"message":"163","line":1,"column":27,"nodeType":"133","messageId":"134","endLine":1,"endColumn":36},{"ruleId":"131","severity":1,"message":"164","line":2,"column":9,"nodeType":"133","messageId":"134","endLine":2,"endColumn":21},{"ruleId":"131","severity":1,"message":"165","line":2,"column":23,"nodeType":"133","messageId":"134","endLine":2,"endColumn":35},{"ruleId":"131","severity":1,"message":"166","line":2,"column":37,"nodeType":"133","messageId":"134","endLine":2,"endColumn":52},{"ruleId":"131","severity":1,"message":"167","line":2,"column":54,"nodeType":"133","messageId":"134","endLine":2,"endColumn":66},{"ruleId":"131","severity":1,"message":"168","line":80,"column":13,"nodeType":"133","messageId":"134","endLine":80,"endColumn":21},{"ruleId":"131","severity":1,"message":"169","line":7,"column":8,"nodeType":"133","messageId":"134","endLine":7,"endColumn":16},{"ruleId":"131","severity":1,"message":"170","line":10,"column":8,"nodeType":"133","messageId":"134","endLine":10,"endColumn":15},{"ruleId":"143","replacedBy":"171"},{"ruleId":"145","replacedBy":"172"},{"ruleId":"160","severity":1,"message":"161","line":75,"column":29,"nodeType":"140","endLine":75,"endColumn":88},{"ruleId":"143","replacedBy":"173"},{"ruleId":"145","replacedBy":"174"},{"ruleId":"160","severity":1,"message":"161","line":136,"column":25,"nodeType":"140","endLine":136,"endColumn":57},{"ruleId":"175","severity":1,"message":"176","line":148,"column":25,"nodeType":"140","endLine":148,"endColumn":158},{"ruleId":"131","severity":1,"message":"177","line":2,"column":10,"nodeType":"133","messageId":"134","endLine":2,"endColumn":16},{"ruleId":"178","severity":1,"message":"179","line":64,"column":49,"nodeType":"180","messageId":"181","endLine":64,"endColumn":51},{"ruleId":"182","severity":1,"message":"183","line":145,"column":25,"nodeType":"140","endLine":150,"endColumn":30},{"ruleId":"160","severity":1,"message":"161","line":173,"column":21,"nodeType":"140","endLine":173,"endColumn":40},{"ruleId":"184","severity":1,"message":"185","line":8,"column":17,"nodeType":"186","endLine":8,"endColumn":63},{"ruleId":"178","severity":1,"message":"179","line":22,"column":45,"nodeType":"180","messageId":"181","endLine":22,"endColumn":47},{"ruleId":"160","severity":1,"message":"161","line":42,"column":25,"nodeType":"140","endLine":42,"endColumn":87},"no-unused-vars","'Badge' is defined but never used.","Identifier","unusedVar","'NotifyMe' is defined but never used.","'Checkbox' is defined but never used.","'searchData' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","react/jsx-pascal-case","Imported JSX component Picture_upload must be in PascalCase or SCREAMING_SNAKE_CASE","no-native-reassign",["187"],"no-negated-in-lhs",["188"],["187"],["188"],"'axios' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'userID'. Either include it or remove the dependency array.","ArrayExpression",["189"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","Expected '===' and instead saw '=='.","'accept' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","'useEffect' is defined but never used.","'SettingsPane' is defined but never used.","'SettingsPage' is defined but never used.","'SettingsContent' is defined but never used.","'SettingsMenu' is defined but never used.","'settings' is assigned a value but never used.","'Settings' is defined but never used.","'SideBar' is defined but never used.",["187"],["188"],["187"],["188"],"jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","'Helmet' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","jsx-a11y/iframe-has-title","<iframe> elements must have a unique title property.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","no-global-assign","no-unsafe-negation",{"desc":"190","fix":"191"},"Update the dependencies array to be: [doFetch, userID]",{"range":"192","text":"193"},[1353,1362],"[doFetch, userID]"]