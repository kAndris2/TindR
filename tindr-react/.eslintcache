[{"/home/lara/TindR/tindr-react/src/index.js":"1","/home/lara/TindR/tindr-react/src/reportWebVitals.js":"2","/home/lara/TindR/tindr-react/src/App.js":"3","/home/lara/TindR/tindr-react/src/components/Loading.js":"4","/home/lara/TindR/tindr-react/src/components/Pulse.js":"5","/home/lara/TindR/tindr-react/src/components/Settings.js":"6","/home/lara/TindR/tindr-react/src/components/Asd.js":"7","/home/lara/TindR/tindr-react/src/components/Test.js":"8","/home/lara/TindR/tindr-react/src/components/Recommendations.js":"9","/home/lara/TindR/tindr-react/src/components/Deck.js":"10","/home/lara/TindR/tindr-react/src/components/WelcomePage.js":"11","/home/lara/TindR/tindr-react/src/components/SideBar.js":"12","/home/lara/TindR/tindr-react/src/components/spotify_config.js":"13","/home/lara/TindR/tindr-react/src/components/Card.js":"14","/home/lara/TindR/tindr-react/src/components/Picture_upload.js":"15"},{"size":597,"mtime":1607511733050,"results":"16","hashOfConfig":"17"},{"size":362,"mtime":1606467231072,"results":"18","hashOfConfig":"17"},{"size":3457,"mtime":1610622392354,"results":"19","hashOfConfig":"17"},{"size":1375,"mtime":1610534214277,"results":"20","hashOfConfig":"17"},{"size":1392,"mtime":1610542624534,"results":"21","hashOfConfig":"17"},{"size":4211,"mtime":1607941070486,"results":"22","hashOfConfig":"17"},{"size":3299,"mtime":1610544913295,"results":"23","hashOfConfig":"17"},{"size":3480,"mtime":1608154326294,"results":"24","hashOfConfig":"17"},{"size":9302,"mtime":1607942771250,"results":"25","hashOfConfig":"17"},{"size":3156,"mtime":1610622392354,"results":"26","hashOfConfig":"17"},{"size":15650,"mtime":1610542624542,"results":"27","hashOfConfig":"17"},{"size":14749,"mtime":1610542624534,"results":"28","hashOfConfig":"17"},{"size":424,"mtime":1608117066224,"results":"29","hashOfConfig":"17"},{"size":2617,"mtime":1610534214277,"results":"30","hashOfConfig":"17"},{"size":5552,"mtime":1610542624534,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"rjn930",{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"34"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"34"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"34"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"34"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"34"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"58","messages":"59","errorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"34"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"34"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"34"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71"},"/home/lara/TindR/tindr-react/src/index.js",[],["72","73"],"/home/lara/TindR/tindr-react/src/reportWebVitals.js",[],"/home/lara/TindR/tindr-react/src/App.js",["74","75"],"/home/lara/TindR/tindr-react/src/components/Loading.js",["76"],"import React, { Component } from 'react'\n\nexport default class Loading extends Component {\n    render() {\n        return (\n            <svg \n                xmlns=\"http://www.w3.org/2000/svg\" \n                xmlns={{xlink:\"http://www.w3.org/1999/xlink\"}} \n                style={{margin:'auto', background:'#fff', display:'block', float:'left'}} \n                width=\"100px\" \n                height=\"100px\" \n                viewBox=\"0 0 100 100\" \n                preserveAspectRatio=\"xMidYMid\"\n            >\n                <path \n                    fill=\"none\" \n                    stroke=\"#e90c59\" \n                    stroke-width=\"8\" \n                    stroke-dasharray=\"42.76482137044271 42.76482137044271\" \n                    d=\"M24.3 30C11.4 30 5 43.3 5 50s6.4 20 19.3 20c19.3 0 32.1-40 51.4-40 C88.6 30 95 43.3 95 50s-6.4 20-19.3 20C56.4 70 43.6 30 24.3 30z\" \n                    stroke-linecap=\"round\" \n                    style={{transform:'scale(0.8)', transformOrigin:'50px 50px'}}\n                >\n                    <animate \n                        attributeName=\"stroke-dashoffset\" \n                        repeatCount=\"indefinite\" \n                        dur=\"1s\" \n                        keyTimes=\"0;1\" \n                        values=\"0;256.58892822265625\"\n                    ></animate>\n                </path>\n        </svg>\n        );\n    }\n}","/home/lara/TindR/tindr-react/src/components/Pulse.js",["77","78"],"import React, { Component } from 'react'\nimport \"./css/pulse.css\";\nimport axios from 'axios';\n\nimport Loading from './Loading'\n\nexport default class Pulse extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            isLoading: true,\n            userImg: ''\n        }\n\n        this.getProfilePicture = this.getProfilePicture.bind(this);\n    }\n\n    async getProfilePicture() {\n        await axios.get(`${process.env.REACT_APP_IP}/api/pictures/${this.props.userID}`)\n        .then(response => {\n            Promise.all(response.data.map(p => {\n                this.setState({\n                    isLoading : false,\n                    userImg : p.route\n                });\n              }))\n        });\n    }\n\n    async componentDidMount() {\n        await this.getProfilePicture();\n    }\n\n    render() {\n        const { isLoading, userImg } = this.state;\n\n        if(!isLoading) {\n            return(\n                <>\n                    <div class=\"load\">\n                        <img src={userImg} style={{borderRadius:\"50%\", width:\"100%\"}}></img>\n                    </div>\n                    <p>We are unable to find any potential matches right now. Try changing your preferences to see who is nearby.</p>\n                </>\n            );\n        }\n        else {\n            return(\n                <Loading />\n            );\n        }\n    }\n}","/home/lara/TindR/tindr-react/src/components/Settings.js",["79","80","81","82","83"],"import React, { Component } from 'react';\nimport {SettingsPane, SettingsPage, SettingsContent, SettingsMenu} from 'react-settings-pane';\n\nexport default class Settings extends Component {\n    constructor(props) {\n        super(props);\n    \n        // You will maybe receive your settings from this.props or do a fetch request in your componentWillMount\n        // but here is an example of how it should look like:\n        this.state = {\n          \"mysettings.general.name\": \"Dennis Stücken\",\n          \"mysettings.general.username\": \"dstuecken\",\n          \"mysettings.general.color-theme\": \"purple\",\n          \"mysettings.general.email\": \"dstuecken@react-settings-pane.com\",\n          \"mysettings.general.picture\": \"earth\",\n          \"mysettings.profile.firstname\": \"Dennis\",\n          \"mysettings.profile.lastname\": \"Stücken\"\n        };\n    \n        // Save settings after close\n        this._leavePaneHandler = (wasSaved, newSettings, oldSettings) => {\n          // \"wasSaved\" indicates wheather the pane was just closed or the save button was clicked.\n    \n          if (wasSaved && newSettings !== oldSettings) {\n            // do something with the settings, e.g. save via ajax.\n            this.setState(newSettings);\n          }\n    \n          this.hidePrefs();\n        };\n    \n        // React if a single setting changed\n        this._settingsChanged = ev => {};\n    \n        // Define your menu\n        this._menu = [\n          {\n            title: \"General\", // Title that is displayed as text in the menu\n            url: \"/settings/general\" // Identifier (url-slug)\n          },\n          {\n            title: \"Profile\",\n            url: \"/settings/profile\"\n          },\n          {\n            title: \"Notifications\",\n            url: \"/settings/notifications\"\n          },\n          {\n            title: \"Language\",\n            url: \"/settings/language\"\n          },\n          {\n            title: \"Appearance\",\n            url: \"/settings/appearance\"\n          },\n          {\n            title: \"Plugins\",\n            url: \"/settings/plugins\"\n          },\n          {\n            title: \"About\",\n            url: \"/settings/about\"\n          }\n        ];\n    }\n    \n      hidePrefs() {\n        this.prefs.className = \"md-modal\";\n        this.overlay.style.visibility = \"\";\n      }\n    \n      showPrefs() {\n        this.prefs.className = \"md-modal show\";\n        this.overlay.style.visibility = \"visible\";\n      }\n    \n      render() {\n        // Get settings\n        let settings = this.state;\n    \n        // Define one of your Settings pages\n        /*\n         const dynamicOptionsForGeneralPage = [\n           {\n             key: null\n             label: 'Account',\n             type: 'headline',\n           },\n           {\n             key: 'mysettings.general.email',\n             label: 'E-Mail address',\n             type: 'text',\n           },\n           {\n             key: 'mysettings.general.password',\n             label: 'Password',\n             type: 'password',\n           },\n           {\n             key: 'mysettings.general.password-repeat',\n             label: 'Password repeat',\n             type: 'password',\n           },\n           {\n             key: null,\n             label: 'Appearance',\n             type: 'headline',\n           },\n           {\n             key: 'mysettings.general.color-theme',\n             label: 'Color Theme',\n             type: 'custom',\n             component: <select><option value=\"blue\">Blue</option><option value=\"red\">Red</option></select>,\n           }\n         ];\n         // Then use with:\n         // <SettingsPage handler=\"/settings/general\" options={dynamicOptionsForGeneralPage} />\n         */\n    \n        // Return your Settings Pane\n        return (\n          <div className=\"container\">\n            <div className=\"page-header\">\n              <h1>\n                Settings\n              </h1>\n            </div>\n            <div style={{ margin: \"30px 0 90px 0\" }}>\n              <button\n                onClick={this.showPrefs.bind(this)}\n                className=\"btn btn-info\"\n              >\n                Show Preferences\n              </button>\n            </div>\n            \n          </div>\n        );\n      }\n}\n","/home/lara/TindR/tindr-react/src/components/Asd.js",[],"/home/lara/TindR/tindr-react/src/components/Test.js",["84"],"import React, { Component } from 'react'\nimport axios from 'axios';\n//import hash from \"./hash\";\nimport { encoded,authEndpoint } from \"./spotify_config\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faPlay, faPause } from '@fortawesome/free-solid-svg-icons'\n\nexport default class Test extends Component {\n    constructor(props){\n        super(props);\n        \n        this.state={\n            baseAPI:\"https://api.spotify.com/v1/tracks/\",\n            token:'',\n            isLoading:true,\n            externalWindow:'',\n            song:'',\n            isPlaying:false\n        }\n        this.player = React.createRef();\n        \n    }\n    audio=null;\n\n    async getToken(){\n        await axios.post(authEndpoint,\"grant_type=client_credentials\",{\n            headers:{\n                \"Authorization\": \"Basic \"+encoded\n            }\n        })\n        .then(resp=>{\n            this.setState({token:resp.data.access_token});\n        })\n        await this.getSong();\n    }\n\n    async getSong(){\n        if (this.props.songID === null){\n            return console.log('%c -------ERROR-------\\n SongID was null! \\n Refusing to send request. \\nAsk the user to set an anthem \\n---------------------', 'background: #222; color: red');\n        }\n        await axios.get(this.state.baseAPI+this.props.songID,{\n            headers: {\n                'Authorization':'Bearer '+this.state.token\n            }\n        })\n        .then(resp=>{\n            this.setState({song:resp.data,isLoading:false});\n        })\n        this.audio = new Audio(this.state.song.preview_url);\n    }\n\n    playClicked(){\n        this.setState({ isPlaying: !this.state.isPlaying }, () => {\n            this.state.isPlaying ? this.audio.play() : this.audio.pause();\n        });\n    }\n\n    componentDidMount(){\n        this.getToken();\n    }\n\n    render() {\n        if (this.props.songID === null) {\n            return null;\n        }\n        if(this.state.isLoading){\n            return(\"haggyámátőteni\");\n        }\n        \n        return (\n            <>\n                <div className=\"card bg-secondary text-white\" style={{width:\"100%\"}}>\n                    <div className=\"row\">\n                        <div className=\"col-sm-2\" style={{position:\"relative\"}}>\n                            <img height=\"80\" src={this.state.song.album.images[0].url}></img>\n                        </div>\n                        <div className=\"col-sm-2\" style={{position:\"absolute\",top:\"30%\",left:\"3%\"}}>\n                            {this.state.isPlaying ? <FontAwesomeIcon onClick={this.playClicked.bind(this)} icon={faPause} size=\"2x\" /> : <FontAwesomeIcon onClick={this.playClicked.bind(this)} icon={faPlay} size=\"2x\" />}\n                        </div>\n                        <div style={{zIndex:\"-100\"}} className=\"col-sm-1\"></div>\n                        <div className=\"col-sm-8\">\n                            <div className=\"row\">\n                                <div className=\"col\">{this.state.song.artists[0].name} - {this.state.song.name}</div>\n                            </div>\n                            <div className=\"row\">\n                                <div className=\"col\"></div>\n                            </div>\n                            <div className=\"row\">\n                                <div className=\"col\"></div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </>\n        )\n    }\n}","/home/lara/TindR/tindr-react/src/components/Recommendations.js",["85","86","87","88"],"import React, {Component} from 'react';\nimport { Helmet } from 'react-helmet';\nimport axios from 'axios';\nimport moment from \"moment\";\nimport TinderCard from 'react-tinder-card';\n\nclass Recommendations extends Component {\n    constructor() {\n      super();\n\n      this.state = {\n          recommendations: [],\n          pictures: [],\n          currentPictureIndex: 0,\n          isLoading: true,\n          showProfile: false,\n          current: {\n              index: undefined,\n              user: undefined\n          }\n      }\n\n      this.getRecommendations = this.getRecommendations.bind(this);\n      this.getNextProfile = this.getNextProfile.bind(this);\n      this.getCurrentData = this.getCurrentData.bind(this);\n      this.handleLike = this.handleLike.bind(this);\n      this.handleDislike = this.handleDislike.bind(this);\n      this.handleKeyDown = this.handleKeyDown.bind(this);\n      this.setNextPicture = this.setNextPicture.bind(this);\n      this.setPreviousPicture = this.setPreviousPicture.bind(this);\n      this.showProfile = this.showProfile.bind(this);\n      this.ageCalculation = this.ageCalculation.bind(this);\n      this.getCurrentPictures = this.getCurrentPictures.bind(this);\n\n      this.onCardLeftScreen = this.onCardLeftScreen.bind(this);\n      this.onSwipe = this.onSwipe.bind(this);\n    }\n\n    async componentDidMount() {\n        await this.getRecommendations();\n        await this.getCurrentPictures();\n    }\n\n    async getRecommendations() {\n        await axios.get(`http://${process.env.REACT_APP_IP}:8000/api/recommendations/${this.props.userID}`)\n        .then(response => {\n            let updCurrent = {\n                index: 0,\n                user: response.data.length === undefined ? response.data : response.data[0]\n            }\n\n            this.setState({\n                recommendations : response.data,\n                current : updCurrent\n            });\n        })\n    }\n\n   async getCurrentPictures() {\n       const { current } = this.state;\n\n        await axios.get(`http://${process.env.REACT_APP_IP}:8000/api/pictures/${current.user.id}`)\n            .then(response => {\n                Promise.all(response.data.map(p => {\n                    this.setState({\n                        pictures: p,\n                        isLoading: false\n                    });\n                }))\n            });\n   }\n\n    async getNextProfile() {\n        const { recommendations, current } = this.state;\n        console.log(recommendations[current.index + 1])\n\n        if (recommendations[current.index + 1] !== undefined) {\n            let updCurrent = {\n                index: current.index + 1,\n                user: recommendations[current.index + 1]\n            }\n            await this.setState({\n                current : updCurrent,\n                isLoading : true\n            })\n            this.getCurrentPictures();\n        }\n        else {\n            this.setState({\n                current : {\n                    index: 0,\n                    user: undefined\n                },\n                isLoading : false\n            })\n        }\n    }\n\n    setNextPicture() {\n        const { currentPictureIndex, pictures } = this.state;\n\n        const max = pictures.length -1;\n        const next = currentPictureIndex + 1;\n        \n        if (next <= max)\n            this.setState({currentPictureIndex: next})\n        else\n            this.setState({currentPictureIndex: 0});\n    }\n\n    setPreviousPicture() {\n        const { currentPictureIndex, pictures } = this.state;\n\n        const max = pictures.length -1;\n        const previous = currentPictureIndex - 1;\n\n        if (previous < 0) \n            this.setState({currentPictureIndex : max});\n        else\n            this.setState({currentPictureIndex : previous});\n    }\n\n    showProfile() {\n        const { current, showProfile } = this.state;\n        const user = current.user;\n\n        if(showProfile) {\n            return (\n                <>\n                    <link rel=\"stylesheet\" href=\"https://use.fontawesome.com/releases/v5.15.1/css/all.css\" integrity=\"sha384-vp86vTRFVJgpjF9jiIGPEEqYqlDwgyBgEF109VFjmqGmIY/Y4HV4d3Gp2irVfcrp\" crossorigin=\"anonymous\"></link>\n                    \n                    <p>\n                        <span className=\"fa fa-info-circle\" /> \n                        Description: {user.description !== null ? user.description : \"N/A\"}\n                    </p>\n                    <p>Birthdate: {user.birthdate !== null ? moment(user.birthdate).format('MMMM Do YYYY') : \"N/A\"}</p>\n                    <p>School: {user.school !== null ? user.school : \"N/A\"}</p>\n                    <p>Works at: {user.company !== null ? user.company : \"N/A\"}</p>\n                    <p>Position: {user.job_title !== null ? user.job_title : \"N/A\"}</p>\n                    <p>Gender: {user.gender !== null ? user.gender : \"N/A\"}</p>\n                    <p>Passions: {user.passion !== null ? user.passion : \"N/A\"}</p>\n                    <p>Sexual Orientation: {user.sexual_orientation !== null ? user.sexual_orientation : \"N/A\"}</p>\n\n                    {user.anthem !== null &&\n                        <iframe width=\"560\" height=\"315\" \n                                src={`https://www.youtube.com/embed/${user.anthem}`}\n                                frameborder=\"0\" \n                                allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" \n                                allowfullscreen\n                            >\n                        </iframe>\n                    }\n                </>\n            );\n        }\n    }\n\n    ageCalculation(date) {\n        const now = new Date();\n        const birthdate = new Date(date);\n\n        let diff = now.getTime() - birthdate.getTime();\n        return Math.floor(diff / (1000 * 60 * 60 * 24 * 365.25));\n    }\n\n    getCurrentData() {\n        const { current, pictures, currentPictureIndex } = this.state;\n\n        if (current.user !== undefined) {\n            const route = pictures.length === undefined ? pictures.route : pictures[currentPictureIndex].route;\n            return(\n                <>\n                    <img src={route} />\n\n                    <div className=\"mx-auto my-0 text-red\">\n                        <button onClick={this.handleDislike}>Dislike</button>\n                        <button onClick={this.handleLike}>Like</button>\n\n                        <h1>{current.user.name} {this.ageCalculation(current.user.birthdate)}</h1>\n                    </div>\n                    \n                    {this.showProfile()}\n                </>\n            );\n        }\n        else {\n            return(\n                <>\n                    No more!\n                </>\n            );\n        }\n    }\n\n    async handleLike() {\n        const { current } = this.state;\n\n        await axios.post(`http://${process.env.REACT_APP_IP}:8000/api/add_like`, {\n            giverid: this.props.userID,\n            receiverid: current.user.id\n        });\n        this.getNextProfile();\n    }\n\n    async handleDislike() {\n        const { current } = this.state;\n\n        await axios.post(`http://${process.env.REACT_APP_IP}:8000/api/add_dislike`, {\n            giverid: this.props.userID,\n            receiverid: current.user.id\n        });\n        this.getNextProfile();\n    }\n\n    handleKeyDown(event) {\n        switch(event.key) {\n            case \"ArrowRight\": {\n                this.handleLike();\n                break;\n            }\n            case \"ArrowLeft\": {\n                this.handleDislike();\n                break;\n            }\n            case \" \": { //Space\n                this.setNextPicture();\n                break;\n            }\n            case \"Backspace\": {\n                this.setPreviousPicture();\n                break;\n            }\n            case \"ArrowUp\": {\n                this.setState({showProfile : true});\n                break;\n            }\n            case \"ArrowDown\": {\n                this.setState({showProfile : false});\n                break;\n            }\n            default:\n        }\n    }\n\n    onSwipe(direction) {\n        console.log(direction)\n    }\n\n    onCardLeftScreen(id) {\n        console.log(id)\n    }\n\n    render() {\n        const { isLoading } = this.state;\n\n        if (!isLoading) {\n            /*\n            <div onKeyDown={this.handleKeyDown} tabIndex=\"0\" className=\"container d-flex h-100 align-items-center\">\n                        <div className=\"mx-auto text-center\">\n                            {this.getCurrentData()}\n                        </div>\n                    </div>\n            */\n            return (\n                <>\n                    <div onKeyDown={this.handleKeyDown} tabIndex=\"0\" className=\"container d-flex h-100 align-items-center\">\n                        <div className=\"mx-auto text-center\">\n                            <TinderCard onSwipe={this.onSwipe} onCardLeftScreen={() => this.onCardLeftScreen('fooBar')} preventSwipe={['right', 'left']}>\n                                {this.getCurrentData()}\n                            </TinderCard>\n                        </div>\n                    </div>\n                </>\n            );\n        }\n        else\n            return (\n                <h1>Loading...</h1>\n            );\n    }\n}\n\nexport default Recommendations;","/home/lara/TindR/tindr-react/src/components/Deck.js",["89","90","91","92"],"/home/lara/TindR/tindr-react/src/components/WelcomePage.js",["93","94","95","96","97","98","99","100","101","102","103","104","105","106","107","108","109","110","111","112"],"import React, {Component} from 'react';\nimport { Helmet } from 'react-helmet';\nimport Swal from \"sweetalert2\";\nimport axios from 'axios';\nimport moment from \"moment\";\nimport ReactCodeInput from 'react-code-input';\nimport withReactContent from 'sweetalert2-react-content'\n\nclass WelcomePage extends Component {\n    constructor() {\n      super();\n\n      this.state = {\n        apikey:'6259e30396ee22afa1b50ed0d8468bd7be1204de',\n        appkey:'a1yqe5e4o6a6eborahy7',\n        userName: undefined,\n        email: undefined,\n        phoneNumber: undefined,\n        password: undefined,\n        confirmPass: undefined,\n        birthDate: undefined,\n        passions: undefined,\n      }\n\n      this.startLogin = this.startLogin.bind(this);\n      this.handleLogin = this.handleLogin.bind(this);\n      this.doLogin = this.doLogin.bind(this);\n      this.startRegister = this.startRegister.bind(this);\n      this.regEnterUsername = this.regEnterUsername.bind(this);\n      this.regEnterEmail = this.regEnterEmail.bind(this);\n      this.isValidEmail = this.isValidEmail.bind(this);\n      this.regEnterPhoneNumber = this.regEnterPhoneNumber.bind(this);\n      this.isValidPhoneNumber = this.isValidPhoneNumber.bind(this);\n      this.regEnterPassword = this.regEnterPassword.bind(this);\n      this.regEnterBirthdate = this.regEnterBirthdate.bind(this);\n      this.regEnterPassions = this.regEnterPassions.bind(this);\n      this.regUploadImage = this.regUploadImage.bind(this);\n      this.showDetails = this.showDetails.bind(this);\n      this.doRegistration = this.doRegistration.bind(this);\n      this.requestPin = this.requestPin.bind(this);\n      this.validatePin = this.validatePin.bind(this);\n    }\n\n    async startLogin() {\n      await this.handleLogin();\n    }\n\n    async handleLogin(error = \"\") {\n      const { value: formValues } = await Swal.fire({\n        title: 'Sign in',\n        html:\n          `${error !== \"\" ? `<p style=\"color:red\">${error}</p>\\n\\n` : \"\"}` +\n          '<p>Enter your email address</p>' +\n          '<input id=\"swal-input1\" class=\"swal2-input\" type=\"email\">' +\n          '<p>Enter your password</p>' +\n          '<input id=\"swal-input2\" class=\"swal2-input\" type=\"password\">',\n        focusConfirm: false,\n        confirmButtonText: `Sign in`,\n        preConfirm: () => {\n          return [\n            document.getElementById('swal-input1').value,\n            document.getElementById('swal-input2').value\n          ]\n        }\n      })\n\n      if (formValues !== undefined) {\n        if (formValues[0] == \"\" || formValues[1] == \"\") {\n          this.handleLogin(\"You must be enter your username and your password!\");\n        }\n        else\n          this.doLogin(formValues[0], formValues[1]);\n      }\n    }\n\n    doLogin(email, password) {\n      axios.post(process.env.REACT_APP_IP+\"/api/login\", {\n        email: email,\n        password: password\n      }).then(response => {\n        if (response.data.length !== 0) {\n          this.props.setUser(response.data);\n        }\n        else\n          this.handleLogin(\"Incorrect e-mail or password!\")\n      })\n    }\n\n    async startRegister() {\n      await this.regEnterUsername();\n    }\n\n    async regEnterUsername(error = \"\") {\n      const { value: username } = await Swal.fire({\n        title: 'Registration step 1/7',\n        html:\n          '<p>Enter your username</p>' +\n          `${error !== \"\" ? `\\n\\n<p style=\"color:red\">${error}</p>` : \"\"}` +\n          '<input id=\"swal-input1\" class=\"swal2-input\" type=\"text\">',\n        focusConfirm: false,\n        confirmButtonText: `Next`,\n        preConfirm: () => {\n          return [\n            document.getElementById('swal-input1').value\n          ]\n        }\n      })\n\n      if (username !== undefined) {\n        if (username[0] == \"\")\n          this.regEnterUsername(\"You must be enter your username!\");\n        else if (username[0].length <= 3)\n          this.regEnterUsername(\"Username must have 4 characters long!\");\n        else {\n            this.setState({userName : username[0]});\n            this.regEnterEmail();\n        }\n      }\n    }\n\n    async regEnterEmail(error = \"\") {\n      const { value: email } = await Swal.fire({\n        title: 'Registration step 2/7',\n        html:\n          '<p>Enter your e-mail address</p>' +\n          `${error !== \"\" ? `\\n\\n<p style=\"color:red\">${error}</p>` : \"\"}` +\n          '<input id=\"swal-input1\" class=\"swal2-input\" type=\"email\" placeholder=\"(eg.: somebody@example.com)\">',\n        focusConfirm: false,\n        confirmButtonText: `Next`,\n        preConfirm: () => {\n          return [\n            document.getElementById('swal-input1').value\n          ]\n        }\n      })\n\n      if (email !== undefined) {\n        if (email[0] == \"\")\n          return this.regEnterEmail(\"You must be enter your e-mail address!\")\n        else if (email[0].includes(\"@\") == false || email[0].includes(\".\") == false)\n          return this.regEnterEmail(\"Invalid e-mail address!\")\n      \n        const check = await this.isValidEmail(email[0])\n\n        if (check) {\n          this.setState({email : email[0]});\n          this.regEnterPhoneNumber();\n        } \n        else\n          this.regEnterEmail(\"This e-mail is already in use!\")\n      }\n    }\n\n    async isValidEmail(email) {\n      let temp = undefined;\n      await axios.get(process.env.REACT_APP_IP+\"/api/valid_email/\" + email)\n      .then(response => {\n          temp = response.data.length == 0\n      })\n      return temp;\n    }\n\n    async requestPin(number){\n      await axios.post(process.env.REACT_APP_IP+\"/api/getpin\",{\n        appkey:this.state.appkey,\n        apikey:this.state.apikey,\n        phone:number\n      })\n      .then(resp =>{\n        console.log(resp.data);\n      })\n    }\n\n    async regEnterPhoneNumber(error = \"\") {\n      const { value: phone } = await Swal.fire({\n        title: 'Registration step 3/7',\n        html:\n          '<p>Enter your phone number</p>' +\n          `${error !== \"\" ? `\\n\\n<p style=\"color:red\">${error}</p>` : \"\"}` +\n          '<input id=\"swal-input1\" class=\"swal2-input\" type=\"tel\" placeholder=\"(eg.: 30/123-4567)\">',\n        focusConfirm: false,\n        confirmButtonText: `Next`,\n        preConfirm: () => {\n          return [\n            document.getElementById('swal-input1').value\n          ]\n        }\n      })\n\n      if (phone !== undefined) {\n        if (phone[0] == \"\")\n          this.regEnterPhoneNumber(\"You must enter your phone number\");\n        else if (this.isValidPhoneNumber(phone[0])) {\n          let pinnumber = \"+36\" + phone[0].replace(\"/\",\"\").replace(\"-\",\"\");\n          this.requestPin(pinnumber);\n          this.validatePin(pinnumber);\n          this.setState({phoneNumber : phone[0]});\n          \n        } \n        else \n          this.regEnterPhoneNumber(`Invalid phone number!\\n'${phone}'`);\n      }\n    }\n    \n    async validatePin(pinnumber){\n      const mySwal = withReactContent(Swal);\n      let pin = 0;\n      let pinHtml = <ReactCodeInput type=\"number\" onChange={(e) => pin = e} fields={4}/>;\n      await mySwal.fire({\n        title: 'Enter the verification code',\n        html:pinHtml,\n        //input: 'text',\n        inputAttributes: {\n          autocapitalize: 'off'\n        },\n        showCancelButton: true,\n        confirmButtonText: 'Validate',\n        showLoaderOnConfirm: true,\n        preConfirm: (usuallytrue) => {\n          return axios.post(process.env.REACT_APP_IP+\"/api/validatecode\",{\n            appkey:this.state.appkey,\n            apikey:this.state.apikey,\n            phone:pinnumber,\n            code:pin\n          })\n          .then(response => {\n            if (response.data.status !== \"SUCCESS\") {\n              throw new Error(response.statusText)\n            }\n            return response.data;\n          })\n          .catch(error => {\n            Swal.showValidationMessage(\n              `Request failed: ${error}`\n            )\n          })\n        },\n        allowOutsideClick: () => !Swal.isLoading()\n      }).then((result) => {\n        console.log(result);\n        if (result.isConfirmed) {\n          Swal.fire({\n            confirmButtonText:'OK',\n            title: `${result.value.status}`,\n            preConfirm: (ok) =>{\n              this.regEnterPassword();\n            }\n          })\n        }\n      })\n    }\n\n    isValidPhoneNumber(phone) {\n      if (phone.length < 11 || phone.length > 11)\n        return false;\n\n      for (let i = 0; i < phone.length; i++) {\n        if (i == 2) {\n          if (phone[i] != '/')\n            return false;\n        }\n        else if (i == 6) {\n          if (phone[i] != \"-\")\n            return false;\n        }\n        else if (isNaN(phone[i]))\n            return false;\n      }\n      return true;\n    }\n\n    async regEnterPassword(error = \"\", pw = \"\") {\n      const { value: formValues } = await Swal.fire({\n        title: 'Registration step 4/7',\n        html:\n          '<p>Enter your password</p>' +\n          `${error !== \"\" ? `<p style=\"color:red\">${error}</p>` : \"\"}` +\n          `<input id=\"swal-input1\" class=\"swal2-input\" type=\"password\" value=\"${pw}\">` +\n          '<p>Confirm your password</p>' +\n          '<input id=\"swal-input2\" class=\"swal2-input\" type=\"password\">',\n        focusConfirm: false,\n        confirmButtonText: `Next`,\n        preConfirm: () => {\n          return [\n            document.getElementById('swal-input1').value,\n            document.getElementById('swal-input2').value\n          ]\n        }\n      })\n      \n      if (formValues !== undefined) {\n        if (formValues[0] == \"\" || formValues[1] == \"\")\n          this.regEnterPassword(\"You must be enter your password and confirm it!\");\n        else if (formValues[0] === formValues[1]) {\n            this.setState({password : formValues[0]});\n            this.regEnterBirthdate();\n        }\n        else\n          this.regEnterPassword(\"Invalid confirm password!\", formValues[0]);\n      }\n    }\n\n    async regEnterBirthdate(error = \"\") {\n      const { value: birthdate } = await Swal.fire({\n        title: 'Registration step 5/7',\n        html: \n          '<p>Enter your birthdate</p>' +\n          `${error !== \"\" ? `<p style=\"color:red\">${error}</p>` : \"\"}` +\n          '<input id=\"swal-input1\" class=\"swal2-input\" type=\"date\">',\n        focusConfirm: false,\n        confirmButtonText: `Next`,\n        preConfirm: () => {\n          return [\n            document.getElementById('swal-input1').value\n          ]\n        }\n      })\n\n      const bDate = moment(birthdate[0]).valueOf(),\n            now = moment().valueOf(),\n            minValue = 31556952000 * 18; //age 18\n\n      if (birthdate !== undefined) {\n        if (birthdate[0] == \"\")\n          this.regEnterBirthdate(\"You didn't enter your birthdate!\");\n        else if(now - bDate < minValue)\n          this.regEnterBirthdate(\"You cannot register under the age of 18!\");\n        else {\n          this.setState({birthDate : bDate});\n          this.regEnterPassions();\n        }\n      }\n    }\n\n    async regEnterPassions(error = \"\") {\n      const { value: passions } = await Swal.fire({\n        title: 'Registration step 6/7',\n        html: \n          '<p>Enter minimum 3 passions comma separated</p>' +\n          `${error !== \"\" ? `<p style=\"color:red\">${error}</p>` : \"\"}` +\n          '<input id=\"swal-input1\" class=\"swal2-input\" type=\"text\" placeholder=\"(eg.: reading,coding,walking)\">',\n        focusConfirm: false,\n        confirmButtonText: `Next`,\n        preConfirm: () => {\n          return [\n            document.getElementById('swal-input1').value\n          ]\n        }\n      })\n\n      if (passions !== undefined) {\n        if (passions[0].split(',').length >= 3) {\n          this.setState({passions : passions[0]});\n          this.regUploadImage();\n        }\n        else\n          this.regEnterPassions(\"You have to enter minimum 3 passion!\")\n      }\n    }\n\n    async regUploadImage(error = \"\") {\n      const { value: file } = await Swal.fire({\n        title: 'Registration step 7/7',\n        html:\n          '<p>Upload an image of yourself</p>' +\n          `${error !== \"\" ? `<p style=\"color:red\">${error}</p>` : \"\"}`,\n        input: 'file',\n        confirmButtonText: `Upload`,\n        inputAttributes: {\n          'accept': 'image/*',\n          'aria-label': 'Upload your profile picture'\n        }\n      })\n      \n      if (file !== undefined) {\n        if (file) {\n          this.showDetails(file);\n        }\n        else\n          this.regUploadImage(\"You must be upload an image!\");\n      }\n    }\n\n    showDetails(file) {\n      const reader = new FileReader()\n      const {userName, email, phoneNumber, birthDate, passions} = this.state\n\n      reader.onload = (e) => {\n        const { value: accept } = Swal.fire({\n          title: 'Your details',\n          input: 'checkbox',\n          inputValue: 0,\n          inputPlaceholder: 'I agree with the terms and conditions',\n          imageUrl: e.target.result,\n          html:\n            `<p>Name: ${userName}</p>` +\n            `<p>E-mail: ${email}</p>` +\n            `<p>Phone: ${phoneNumber}</p>` +\n            `<p>Birthdate: ${moment(birthDate).format(\"MMMM Do YYYY\")}</p>` +\n            `<p>Passions: ${passions}</p>`,\n          imageAlt: 'The uploaded picture',\n          confirmButtonText: `Register`,\n          inputValidator: (result) => {\n            return !result ? 'You need to agree with T&C' : this.doRegistration(e.target.result);\n          }\n        })\n      }\n      reader.readAsDataURL(file)\n    }\n\n    async doRegistration(file) {\n      const {userName, email, phoneNumber, password, birthDate, passions} = this.state;\n\n      await axios.post(process.env.REACT_APP_IP+\"/api/register\", {\n        name: userName,\n        email: email,\n        phone_number: phoneNumber,\n        password: password,\n        birthdate: birthDate,\n        passion: passions,\n        rawImage: file\n      }).then(response => {\n        if (response.data.length != 0) {\n          this.props.setUser(response.data);\n        }\n      })\n    }\n  \n    render() {\n      return (\n        <>\n          <Helmet>\n              <title>Tinder | Dating, Make Friends & Meet New People</title>\n          </Helmet>\n  \n          <section style={{ height:\"100vh\",\n                            background: 'linear-gradient(rgba(0,0,0,.4), rgba(0,0,0,.4)), url(\"https://tinder.com/static/build/m/b07fe760ab4714aa3e932a15657494e5.webp\")',\n                            backgroundRepeat:\"no-repeat\",\n                            backgroundSize:\"cover\"}}\n          >\n            <nav className=\"navbar navbar-light bg-transparent justify-content-between\">\n              <div className=\"flex justify-start lg:w-0 lg:flex-1\">\n                <a href=\"/\">\n                    <span className=\"sr-only\">TindR</span>\n                    <img src=\"logo.svg\" width=\"55%\"></img>\n                </a>\n              </div>   \n  \n              <div className=\"hidden md:flex items-center justify-end md:flex-1 lg:w-0\">\n                <a className=\"btn btn-success rounded-pill\"\n                    onClick={this.startLogin}\n                >\n                    LOG IN\n                </a>\n              </div>\n            </nav>\n  \n            <div className=\"container d-flex h-100 align-items-center\">\n              <div className=\"mx-auto text-center\">\n                <h1 className=\"mx-auto my-0 text-white\" style={{fontSize:\"800%\"}}>\n                  Swipe Right®\n                </h1>\n                <a  className=\"btn btn-danger js-scroll-trigger rounded-pill\"\n                    onClick={this.startRegister}\n                >\n                  CREATE ACCOUNT \n                </a>\n              </div>\n            </div>\n          </section>\n        </>\n      );\n    }\n  }\n  \n  export default WelcomePage;","/home/lara/TindR/tindr-react/src/components/SideBar.js",["113","114","115","116","117","118","119"],"import { slide as Menu } from 'react-burger-menu';\nimport React, { Component } from 'react';\nimport axios from 'axios';\nimport {Badge} from 'react-bootstrap';\nimport {SettingsPane, SettingsPage, SettingsContent, SettingsMenu} from 'react-settings-pane';\nimport { InputTags } from 'react-bootstrap-tagsinput';\nimport 'react-bootstrap-tagsinput/dist/index.css';\nimport InputRange from 'react-input-range';\nimport 'react-input-range/lib/css/index.css';\nimport Select from 'react-select';\nimport Picture_upload from './Picture_upload';\nimport Test from './Test';\nimport NotifyMe from 'react-notification-timeline';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Loading from './Loading'\n\nconst options = [\n  { value: 'Men', label: 'Men' },\n  { value: 'Women', label: 'Women' },\n  { value: 'Everyone', label: 'Everyone' },\n];\n\nexport default class SideBar extends Component {\n  constructor(props){\n    super(props);\n    this.picupload = React.createRef();\n    this.state={\n      profilePath:'',\n      isLoading:true,\n      details:'',\n      formData: '',\n      tags:this.props.user.passion.split(\",\"),\n      finalTags:[],\n      tocompsave:false,\n      distanceValue: this.props.searchData.max_distance,\n      ageValue: { \n        min: this.props.searchData.min_age, \n        max: this.props.searchData.max_age \n      },\n      lookingFor: this.props.searchData.looking_for\n    }\n\n     // Save settings after close\n    \n     this._leavePaneHandler = (wasSaved, newSettings, oldSettings) => {\n    // \"wasSaved\" indicates wheather the pane was just closed or the save button was clicked.\n      if (wasSaved){\n        try {\n          this.setState({tocompsave:true});\n          this.saveToPic();\n        } catch (error) {\n          \n        }\n      }\n      if (wasSaved && (newSettings !== oldSettings)) {\n        // do something with the settings, e.g. save via ajax.\n        \n        //this.setState({formData:newSettings});\n        //https://open.spotify.com/track/0vWUhCPxpJOJR5urYbZypB\n\n        let songID='';\n        if ((newSettings.anthem) && newSettings.anthem.length > 22){\n          songID = newSettings.anthem.split(\"track/\")[1];\n        }\n        else songID = oldSettings.anthem;\n\n        axios.put(process.env.REACT_APP_IP+\"/api/update_user/\"+this.props.user.id,{\n          name:newSettings.name,\n          description:newSettings.description,\n          anthem:songID\n        });\n        axios.put(process.env.REACT_APP_IP+\"/api/update_account/\"+this.props.user.id,{\n          email:newSettings.email,\n          phone_number:newSettings.phone_number\n        });\n        axios.put(process.env.REACT_APP_IP+\"/api/update_search/\"+this.props.user.id,{\n          max_distance: newSettings.distanceValue,\n          looking_for: newSettings.lookingFor.value,\n          min_age: newSettings.ageValue.min,\n          max_age: newSettings.ageValue.max,\n          status: newSettings.status,\n          global: newSettings.global\n        });\n        if (this.state.finalTags.length >= 1){\n          axios.put(process.env.REACT_APP_IP+\"/api/update_user/\"+this.props.user.id,{\n            passion:newSettings.finalTags.join()\n          });\n        }\n        this.props.forceRender();\n      }\n\n      this.hidePrefs();\n    };\n\n    // React if a single setting changed\n    this._settingsChanged = ev => {\n      \n    };\n\n    // Settings menu definition\n    this._menu = [\n      {\n        title: \"General\", // Title that is displayed as text in the menu\n        url: \"/settings/general\" // Identifier (url-slug)\n      },\n      {\n        title: \"Profile\",\n        url: \"/settings/profile\"\n      },\n      {\n        title: \"Pictures\",\n        url: \"/settings/pictures\"\n      },\n      {\n        title: \"Search\",\n        url: \"/settings/search\"\n      }\n    ];\n\n  }\n\n  saveToPic(){\n    this.picupload.current.sendd();\n  }\n\n  hidePrefs() {\n    this.prefs.className = \"md-modal\";\n    this.overlay.style.visibility = \"\";\n  }\n\n  showPrefs() {\n    this.prefs.className = \"md-modal show\";\n    this.overlay.style.visibility = \"visible\";\n  }\n\n  async getProfilePictures(user) {\n    await axios.get(`${process.env.REACT_APP_IP}/api/pictures/${user.id}`)\n    .then(response => {\n      /*\n      Promise.all(response.data.map(p => {\n        this.setState({\n          profilePath: p,\n          isLoading: false\n      });\n      }))\n      */\n        this.setState({\n            profilePath: response.data,\n            isLoading: false\n        });\n    })\n  }\n\n  async getDetails(userid){\n    await axios.get(process.env.REACT_APP_IP+\"/api/details/\"+userid)\n    .then(resp => {\n      this.setState({details:resp.data})\n    })\n  }\n\n  async componentDidMount(){\n    await this.getProfilePictures(this.props.user);\n    await this.getDetails(this.props.user.id);\n  }\n\n  render() {\n    const {isLoading, profilePath, details, tags, lookingFor} = this.state;\n    const { searchData } = this.props;\n\n    let settings = this.state;\n    if(isLoading){\n      return(<Loading />)\n    }\n    \n    return (\n      <>\n        <Menu>\n          <div className=\"menu-item\" href=\"/\">\n            {this.props.user.name}\n            {/* <span className=\"btn pull-right\">\n              <NotifyMe\n                data={[\n                  {\n                    \"update\":\"70 new employees are shifted\",\n                    \"timestamp\":Date()\n                  },\n                ]}\n                storageKey='notific_key'\n                notific_key='timestamp'\n                notific_value='update'\n                heading='Notification Alerts'\n                sortedByKey={false}\n                showDate={true}\n                size={36}\n                color=\"yellow\"\n                markAsReadFn={(e) => console.log(e)}\n              />\n            </span> */}\n          </div>\n          <a className=\"navbar-brand text-center\" href=\"#\">\n            <img src={profilePath[0].route} height=\"80\" alt=\"\"/>\n          </a>\n          <a className=\"menu-item\" href=\"/\">\n            Home\n          </a>\n          <p className=\"menu-item\" style={{cursor:\"pointer\"}} onClick={this.showPrefs.bind(this)}>\n            Settings\n          </p>\n          <a className=\"menu-item\" href=\"#\">\n            Asd\n          </a>\n          <a className=\"menu-item\" href=\"/\" onClick={this.props.removeCookie} >\n            Logout\n          </a>\n        </Menu>\n        <div ref={ref => (this.overlay = ref)} className=\"overlay\" />\n            <div ref={ref => (this.prefs = ref)} className=\"md-modal\">\n              <SettingsPane\n                items={this._menu}\n                index=\"/settings/general\"\n                settings={settings}\n                onChange={this._settingsChanged}\n                onPaneLeave={this._leavePaneHandler}\n              >\n                <SettingsMenu headline=\"General Settings\" />\n                <SettingsContent header>\n                  <SettingsPage \n                    handler=\"/settings/general\"\n                  >\n                    \n                    <fieldset className=\"form-group\">\n                      <label htmlFor=\"generalUsername\">Username: </label>\n                      <div className=\"input-group\">\n                        <input\n                          type=\"text\"\n                          name=\"name\"\n                          className=\"form-control\"\n                          placeholder=\"Username\"\n                          aria-describedby=\"basic-addon1\"\n                          onChange={this._settingsChanged}\n                          defaultValue={this.props.user.name}\n                        />\n                      </div>\n                    </fieldset>\n                    <fieldset className=\"form-group\">\n                      <label htmlFor=\"generalMail\">E-Mail address: </label>\n                      <input\n                        type=\"text\"\n                        className=\"form-control\"\n                        name=\"email\"\n                        placeholder=\"E-Mail Address\"\n                        id=\"generalMail\"\n                        onChange={this._settingsChanged}\n                        defaultValue={details.email}\n                      />\n                    </fieldset>\n                    <fieldset className=\"form-group\">\n                      <label htmlFor=\"generalPic\">Mobile number: </label>\n                      <input\n                        type=\"text\"\n                        className=\"form-control\"\n                        name=\"phone_number\"\n                        placeholder=\"Mobile number\"\n                        id=\"generalPic\"\n                        onChange={this._settingsChanged}\n                        defaultValue={details.phone_number}\n                      />\n                    </fieldset>\n                  </SettingsPage>\n                  <SettingsPage \n                    handler=\"/settings/profile\"\n                  >\n                  <fieldset className=\"form-group\">\n                      <label htmlFor=\"profileFirstname\">Company: </label>\n                      <input\n                        type=\"text\"\n                        className=\"form-control\"\n                        name=\"mysettings.profile.firstname\"\n                        placeholder=\"Add a company\"\n                        id=\"profileFirstname\"\n                        onChange={this._settingsChanged}\n                        defaultValue={this.props.user.copmany}\n                      />\n                    </fieldset>\n                    <fieldset className=\"form-group\">\n                      <label htmlFor=\"profileFirstname\">Job Title: </label>\n                      <input\n                        type=\"text\"\n                        className=\"form-control\"\n                        name=\"mysettings.profile.firstname\"\n                        placeholder=\"Job title\"\n                        id=\"profileFirstname\"\n                        onChange={this._settingsChanged}\n                        defaultValue={settings[\"mysettings.profile.firstname\"]}\n                      />\n                    </fieldset>\n                    <fieldset className=\"form-group\">\n                      <label htmlFor=\"profileLastname\">Your passions: </label>\n                      <InputTags values={tags} onTags={(value) => this.setState({finalTags:value.values})} />\n                    </fieldset>\n                    <fieldset className=\"form-group\">\n                      <label htmlFor=\"profileBiography\">Details: </label>\n                      <textarea\n                        className=\"form-control\"\n                        name=\"description\"\n                        placeholder=\"Tell us something about yourself\"\n                        id=\"profileBiography\"\n                        onChange={this._settingsChanged}\n                        defaultValue={this.props.user.description}\n                      />\n                    </fieldset>\n                    <fieldset className=\"form-group\">\n                      <label htmlFor=\"profileLastname\">Anthem: </label>\n                      <input\n                        type=\"text\"\n                        className=\"form-control\"\n                        name=\"anthem\"\n                        placeholder=\"ex.: https://open.spotify.com/track/0vWUhCPxpJOJR5urYbZypB\"\n                        onChange={this._settingsChanged}\n                        \n                      />\n                    </fieldset>\n                    {this.props.user.anthem !== null &&\n                      <fieldset className=\"form-group\">\n                        <label>Current:</label>\n                        <div><Test songID={this.props.user.anthem}></Test></div>\n                      </fieldset>\n                    }\n                  </SettingsPage>\n                  <SettingsPage handler=\"/settings/pictures\">\n                    <Picture_upload ref={this.picupload} saved={this.state.tocompsave} images={profilePath} user={this.props.user}></Picture_upload>\n                  </SettingsPage>\n\n                  <SettingsPage \n                    handler=\"/settings/search\"\n                  >\n                  <fieldset className=\"form-group\">\n                    <label>Looking for:</label>\n                      <Select\n                        value={lookingFor}\n                        placeholder={lookingFor}\n                        options={options}\n                        onChange={value => {\n                          this.setState({ lookingFor : value });\n                          //this._settingsChanged();\n                        }} \n                      />\n                    </fieldset>\n                    <fieldset className=\"form-group\">\n                      <label>Max distance:</label><br /><br />\n                      <InputRange\n                        maxValue={150}\n                        minValue={0}\n                        formatLabel={value => `${value} km`}\n                        value={this.state.distanceValue}\n                        onChange={value => {\n                          this.setState({ distanceValue : value });\n                          //this._settingsChanged();\n                        }} \n                      />\n                    </fieldset><br />\n                    <fieldset className=\"form-group\">\n                      <label>Age range:</label><br /><br />\n                      <InputRange\n                        maxValue={100}\n                        minValue={18}\n                        value={this.state.ageValue}\n                        onChange={value => {\n                          this.setState({ ageValue : value });\n                          //this._settingsChanged();\n                        }} \n                      />\n                    </fieldset><br />\n                    <fieldset className=\"form-group\">\n                      <input \n                        type=\"checkbox\" \n                        id=\"status\" \n                        name=\"status\" \n                        value=\"true\"\n                        defaultChecked={this.props.searchData.status}\n                        onChange={this._settingsChanged} \n                      />\n                      <label for=\"status\">Show me on TindR</label><br />\n                    </fieldset>\n                    <fieldset className=\"form-group\">\n                      <input \n                        type=\"checkbox\" \n                        id=\"global\" \n                        name=\"global\" \n                        value=\"true\"\n                        defaultChecked={this.props.searchData.global}\n                        onChange={this._settingsChanged}\n                      />\n                      <label for=\"global\">Global mode</label><br />\n                    </fieldset>\n                  </SettingsPage>\n\n                </SettingsContent>\n              </SettingsPane>\n            </div>\n      </>\n    )\n  }\n}","/home/lara/TindR/tindr-react/src/components/spotify_config.js",[],"/home/lara/TindR/tindr-react/src/components/Card.js",["120"],"import React, { useState, useEffect } from \"react\";\nimport { string, number, array } from \"prop-types\";\nimport { animated, interpolate } from \"react-spring\";\nimport Carousel from \"nuka-carousel\";\nimport Test from './Test';\nimport { InputTags } from 'react-bootstrap-tagsinput';\n\nconst ageCalculation = (date) => {\n  const now = new Date();\n  const birthdate = new Date(date);\n\n  let diff = now.getTime() - birthdate.getTime();\n  return Math.floor(diff / (1000 * 60 * 60 * 24 * 365.25));\n}\n\nconst Card = ({ i, x, y, rot, scale, trans, bind, data }) => {\n  const { name, age, distance, text, pics, anthem } = data[i];\n\n  const [userMeta, setData] = useState([]);\n\n  const handleClick = () => {\n    userMeta.length === 0 ? setData(data[i].user) : setData([]);\n  }\n\n  const showMeta = (user) => {\n    if(user.length !== 0) {\n      return (\n        <>\n          <div>\n            {user.gender !== null &&\n              <p>Gender: {user.gender}</p>\n            }\n            {user.job_title !== null &&\n              <p>Current job: {user.job_title}</p>\n            }\n            {user.company !== null &&\n              <p>Company: {user.company}</p>\n            }\n            {user.school !== null &&\n              <p>School: {user.school}</p>\n            }\n            {user.sexual_orientation !== null &&\n              <p>Sexual orientation: {user.sexual_orientation}</p>\n            }\n            {anthem !== null &&\n              <div>\n                <label>Anthem:</label>\n                <Test songID={anthem}></Test>\n            </div>\n            }\n            <InputTags values={user.passion.split(\",\")} onTags={(value) => console.log(value)} />\n          </div>\n        </>\n      );\n    }\n  }\n\n  return (\n    <>\n      <animated.div\n        key={i}\n        style={{\n          transform: interpolate([x, y], (x, y) => `translate3d(${x}px,${y}px,0)`)\n        }}\n      >\n        <animated.div\n          {...bind(i)}\n          style={{\n            transform: interpolate([rot, scale], trans)\n          }}\n        >\n          <div id=\"dc\" >\n            <Carousel>\n              {pics.map((pic, index) => (\n                <img id=\"di\" src={pic} key={index} alt=\"profilePicture\" />\n              ))}\n            </Carousel>\n            <h2 onClick={handleClick}>{name},</h2>\n            <h2>{ageCalculation(age)}</h2>\n            <h5>{distance}</h5><br />\n            <h5>{text}</h5>\n          </div>\n        </animated.div>\n        {showMeta(userMeta)}\n      </animated.div>\n    </>\n  );\n};\n\nCard.propTypes = {\n  name: string,\n  age: number,\n  distance: string,\n  text: string,\n  pics: array\n};\n\nexport default Card;\n","/home/lara/TindR/tindr-react/src/components/Picture_upload.js",["121","122"],"import React, { Component } from 'react'\nimport Swal from 'sweetalert2'\nimport axios from 'axios';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faTimesCircle } from '@fortawesome/free-solid-svg-icons'\nimport { faCheck } from '@fortawesome/free-solid-svg-icons'\n\nexport default class Picture_upload extends Component {\n    constructor(props){\n        super(props);\n\n        this.state = {\n            images: this.props.images,\n            isLoading:false,\n            image_raw:'',\n            checked:true,\n            checkedid:this.props.images[0].id,\n            saved:this.props.saved\n        }\n        this.uploadFile=this.uploadFile.bind(this);\n    }\n\n    getFile = async (event) => {\n        const file = event.target.files[0];\n       \n        const base64 = await this.convertBase64(file);\n        this.setState({image_raw:base64});\n        this.showFile();\n    }\n\n    getCheckedid(){\n        return this.state.checkedid;\n    }\n\n    convertBase64 = (file) => {\n        return new Promise((resolve, reject) => {\n          const fileReader = new FileReader();\n          fileReader.readAsDataURL(file)\n          fileReader.onload = () => {\n            resolve(fileReader.result);\n          }\n          fileReader.onerror = (error) => {\n            reject(error);\n          }\n        })\n    }\n\n    showFile(){\n        const swalWithBootstrapButtons = Swal.mixin({\n            customClass: {\n              confirmButton: 'btn btn-success',\n              cancelButton: 'btn btn-danger'\n            },\n            buttonsStyling: false\n          })\n          \n          swalWithBootstrapButtons.fire({\n            title: 'Do you want to upload this?',\n            text: \"Click upload to upload you image.\",\n            imageUrl: this.state.image_raw,\n            showCancelButton: true,\n            confirmButtonText: 'Yes, upload it!',\n            cancelButtonText: 'No, cancel!',\n            reverseButtons: true\n          }).then((result) => {\n            if (result.isConfirmed) {\n                this.uploadFile();\n                swalWithBootstrapButtons.fire( \n                    'Uploaded!',\n                    'Your file has been uploaded.',\n                    'success'\n                )\n            } else if (\n              result.dismiss === Swal.DismissReason.cancel\n            ) {\n              swalWithBootstrapButtons.fire(\n                'Cancelled',\n                'No uploado happenedo 🤠',\n                'error'\n              )\n            }\n        })\n    }\n\n    uploadFile(){\n        axios.post(process.env.REACT_APP_IP+\"/api/pictures/upload/\"+this.props.user.id,{\n           img_raw:this.state.image_raw\n        });\n    }\n\n    deletePic(data){\n        if (this.state.images.length === 1){\n            Swal.fire('You must have at least 1 image uploaded!')\n        }\n        else {\n            Swal.fire({\n                title: 'Are you sure?',\n                text: \"You won't be able to revert this!\",\n                icon: 'warning',\n                showCancelButton: true,\n                confirmButtonColor: '#3085d6',\n                cancelButtonColor: '#d33',\n                confirmButtonText: 'Yes, delete it!'\n            }).then((result) => {\n                if (result.isConfirmed) {\n                    axios.post(process.env.REACT_APP_IP+\"/api/pictures/delete/\"+this.props.user.id,{\n                        del_data: data\n                    });\n                    Swal.fire(\n                    'Deleted!',\n                    'Your file has been deleted.',\n                    'success'\n                    );\n                }\n            })\n        }\n    }\n\n    chooseAsMainPic(userid,picid){\n        this.setState({ checkedid:picid});\n\n    }\n\n    sendd(){\n        axios.post(process.env.REACT_APP_IP+\"/api/pictures/setmain/\"+this.props.user.id,{\n                pic_id:this.state.checkedid\n        })\n    }\n\n    render() {\n        const {isLoading, images} = this.state;\n        if (isLoading){\n            return(\n                <div className=\"container\">\n                    <div className=\"text-center\">\n                        <img src=\"/img/Loading_svg.svg\"></img>\n                    </div>\n                </div>\n            );\n        }\n    \n        return (\n           \n            <div className=\"container-fluid\">\n                <div className=\"\">\n                {images.map((image,i) => \n                    <div key={image.id} className=\"card\" style={{width:\"8rem\", display:\"inline-block\",margin:\"1em\", border:\"none\"}}>\n                        <img className=\"card-img-top\" onClick={()=>this.chooseAsMainPic(this.props.user.id,image.id)} src={image.route} alt=\"Card image cap\"></img>\n                        <a href=\"/#\" onClick={() => this.deletePic(image.route)}><FontAwesomeIcon style={{position: \"absolute\",bottom:\"85%\",left:\"5%\"}} icon={faTimesCircle} color=\"grey\" size=\"lg\" /></a>\n                        <FontAwesomeIcon style={{display:(this.state.checked && this.state.checkedid===image.id) ? 'inline-block':'none',position: \"absolute\",bottom:\"85%\",right:\"5%\"}} icon={faCheck} color=\"green\" size=\"lg\" />\n                    </div>\n                )}\n                </div>\n                \n                <div className=\"custom-file\">\n                    <input onChange={this.getFile} id=\"customFile\" name=\"file\" type=\"file\" accept=\"image/*\" className=\"custom-file-input\" ></input>\n                    <label className=\"custom-file-label\" htmlFor=\"customFile\">Choose file</label>\n                </div>\n            </div>\n        )\n    }\n}\n",{"ruleId":"123","replacedBy":"124"},{"ruleId":"125","replacedBy":"126"},{"ruleId":"127","severity":1,"message":"128","line":7,"column":8,"nodeType":"129","messageId":"130","endLine":7,"endColumn":16},{"ruleId":"127","severity":1,"message":"131","line":10,"column":8,"nodeType":"129","messageId":"130","endLine":10,"endColumn":15},{"ruleId":"132","severity":1,"message":"133","line":8,"column":17,"nodeType":"134","endLine":8,"endColumn":63},{"ruleId":"135","severity":1,"message":"136","line":22,"column":45,"nodeType":"137","messageId":"138","endLine":22,"endColumn":47},{"ruleId":"139","severity":1,"message":"140","line":42,"column":25,"nodeType":"141","endLine":42,"endColumn":87},{"ruleId":"127","severity":1,"message":"142","line":2,"column":9,"nodeType":"129","messageId":"130","endLine":2,"endColumn":21},{"ruleId":"127","severity":1,"message":"143","line":2,"column":23,"nodeType":"129","messageId":"130","endLine":2,"endColumn":35},{"ruleId":"127","severity":1,"message":"144","line":2,"column":37,"nodeType":"129","messageId":"130","endLine":2,"endColumn":52},{"ruleId":"127","severity":1,"message":"145","line":2,"column":54,"nodeType":"129","messageId":"130","endLine":2,"endColumn":66},{"ruleId":"127","severity":1,"message":"146","line":80,"column":13,"nodeType":"129","messageId":"130","endLine":80,"endColumn":21},{"ruleId":"139","severity":1,"message":"140","line":75,"column":29,"nodeType":"141","endLine":75,"endColumn":88},{"ruleId":"127","severity":1,"message":"147","line":2,"column":10,"nodeType":"129","messageId":"130","endLine":2,"endColumn":16},{"ruleId":"135","severity":1,"message":"136","line":64,"column":49,"nodeType":"137","messageId":"138","endLine":64,"endColumn":51},{"ruleId":"148","severity":1,"message":"149","line":145,"column":25,"nodeType":"141","endLine":150,"endColumn":30},{"ruleId":"139","severity":1,"message":"140","line":173,"column":21,"nodeType":"141","endLine":173,"endColumn":40},{"ruleId":"127","severity":1,"message":"150","line":4,"column":8,"nodeType":"129","messageId":"130","endLine":4,"endColumn":13},{"ruleId":"151","severity":1,"message":"152","line":54,"column":6,"nodeType":"153","endLine":54,"endColumn":15,"suggestions":"154"},{"ruleId":"155","severity":1,"message":"156","line":100,"column":22,"nodeType":"157","messageId":"158","endLine":100,"endColumn":24},{"ruleId":"155","severity":1,"message":"156","line":119,"column":28,"nodeType":"157","messageId":"158","endLine":119,"endColumn":30},{"ruleId":"155","severity":1,"message":"159","line":68,"column":27,"nodeType":"157","messageId":"158","endLine":68,"endColumn":29},{"ruleId":"155","severity":1,"message":"159","line":68,"column":50,"nodeType":"157","messageId":"158","endLine":68,"endColumn":52},{"ruleId":"155","severity":1,"message":"159","line":110,"column":25,"nodeType":"157","messageId":"158","endLine":110,"endColumn":27},{"ruleId":"155","severity":1,"message":"159","line":138,"column":22,"nodeType":"157","messageId":"158","endLine":138,"endColumn":24},{"ruleId":"155","severity":1,"message":"159","line":140,"column":41,"nodeType":"157","messageId":"158","endLine":140,"endColumn":43},{"ruleId":"155","severity":1,"message":"159","line":140,"column":76,"nodeType":"157","messageId":"158","endLine":140,"endColumn":78},{"ruleId":"155","severity":1,"message":"159","line":158,"column":39,"nodeType":"157","messageId":"158","endLine":158,"endColumn":41},{"ruleId":"155","severity":1,"message":"159","line":191,"column":22,"nodeType":"157","messageId":"158","endLine":191,"endColumn":24},{"ruleId":"155","severity":1,"message":"159","line":258,"column":15,"nodeType":"157","messageId":"158","endLine":258,"endColumn":17},{"ruleId":"155","severity":1,"message":"156","line":259,"column":24,"nodeType":"157","messageId":"158","endLine":259,"endColumn":26},{"ruleId":"155","severity":1,"message":"159","line":262,"column":20,"nodeType":"157","messageId":"158","endLine":262,"endColumn":22},{"ruleId":"155","severity":1,"message":"156","line":263,"column":24,"nodeType":"157","messageId":"158","endLine":263,"endColumn":26},{"ruleId":"155","severity":1,"message":"159","line":292,"column":27,"nodeType":"157","messageId":"158","endLine":292,"endColumn":29},{"ruleId":"155","severity":1,"message":"159","line":292,"column":50,"nodeType":"157","messageId":"158","endLine":292,"endColumn":52},{"ruleId":"155","severity":1,"message":"159","line":324,"column":26,"nodeType":"157","messageId":"158","endLine":324,"endColumn":28},{"ruleId":"127","severity":1,"message":"160","line":389,"column":24,"nodeType":"129","messageId":"130","endLine":389,"endColumn":30},{"ruleId":"155","severity":1,"message":"156","line":423,"column":34,"nodeType":"157","messageId":"158","endLine":423,"endColumn":36},{"ruleId":"139","severity":1,"message":"140","line":445,"column":21,"nodeType":"141","endLine":445,"endColumn":53},{"ruleId":"161","severity":1,"message":"162","line":450,"column":17,"nodeType":"141","endLine":452,"endColumn":18},{"ruleId":"161","severity":1,"message":"162","line":463,"column":17,"nodeType":"141","endLine":465,"endColumn":18},{"ruleId":"127","severity":1,"message":"163","line":4,"column":9,"nodeType":"129","messageId":"130","endLine":4,"endColumn":14},{"ruleId":"127","severity":1,"message":"164","line":13,"column":8,"nodeType":"129","messageId":"130","endLine":13,"endColumn":16},{"ruleId":"127","severity":1,"message":"165","line":14,"column":8,"nodeType":"129","messageId":"130","endLine":14,"endColumn":16},{"ruleId":"127","severity":1,"message":"166","line":168,"column":13,"nodeType":"129","messageId":"130","endLine":168,"endColumn":23},{"ruleId":"161","severity":1,"message":"167","line":200,"column":11,"nodeType":"141","endLine":200,"endColumn":60},{"ruleId":"161","severity":1,"message":"167","line":209,"column":11,"nodeType":"141","endLine":209,"endColumn":45},{"ruleId":"168","severity":1,"message":"169","line":331,"column":21,"nodeType":"141","endLine":331,"endColumn":132},{"ruleId":"127","severity":1,"message":"170","line":1,"column":27,"nodeType":"129","messageId":"130","endLine":1,"endColumn":36},{"ruleId":"139","severity":1,"message":"140","line":136,"column":25,"nodeType":"141","endLine":136,"endColumn":57},{"ruleId":"171","severity":1,"message":"172","line":148,"column":25,"nodeType":"141","endLine":148,"endColumn":158},"no-native-reassign",["173"],"no-negated-in-lhs",["174"],"no-unused-vars","'Settings' is defined but never used.","Identifier","unusedVar","'SideBar' is defined but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'SettingsPane' is defined but never used.","'SettingsPage' is defined but never used.","'SettingsContent' is defined but never used.","'SettingsMenu' is defined but never used.","'settings' is assigned a value but never used.","'Helmet' is defined but never used.","jsx-a11y/iframe-has-title","<iframe> elements must have a unique title property.","'axios' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'userID'. Either include it or remove the dependency array.","ArrayExpression",["175"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","Expected '===' and instead saw '=='.","'accept' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","'Badge' is defined but never used.","'NotifyMe' is defined but never used.","'Checkbox' is defined but never used.","'searchData' is assigned a value but never used.","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","react/jsx-pascal-case","Imported JSX component Picture_upload must be in PascalCase or SCREAMING_SNAKE_CASE","'useEffect' is defined but never used.","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","no-global-assign","no-unsafe-negation",{"desc":"176","fix":"177"},"Update the dependencies array to be: [doFetch, userID]",{"range":"178","text":"179"},[1300,1309],"[doFetch, userID]"]
